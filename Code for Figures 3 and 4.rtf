{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1031\deflangfe1031\themelang1031\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f45\fbidi \fmodern\fcharset0\fprq1{\*\panose 020b0609020204030204}Consolas;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0302020204030204}Calibri Light;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f46\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f47\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f49\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f50\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f51\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f52\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f53\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f54\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f66\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f67\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f69\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f70\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f71\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f72\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f73\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f74\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f66\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f67\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f69\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f70\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f71\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f72\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f73\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f74\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f496\fbidi \fmodern\fcharset238\fprq1 Consolas CE;}{\f497\fbidi \fmodern\fcharset204\fprq1 Consolas Cyr;}
{\f499\fbidi \fmodern\fcharset161\fprq1 Consolas Greek;}{\f500\fbidi \fmodern\fcharset162\fprq1 Consolas Tur;}{\f503\fbidi \fmodern\fcharset186\fprq1 Consolas Baltic;}{\f504\fbidi \fmodern\fcharset163\fprq1 Consolas (Vietnamese);}
{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri Light CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Light Cyr;}
{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Light Greek;}{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Light Tur;}{\fhimajor\f31533\fbidi \fswiss\fcharset177\fprq2 Calibri Light (Hebrew);}
{\fhimajor\f31534\fbidi \fswiss\fcharset178\fprq2 Calibri Light (Arabic);}{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Light Baltic;}{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri Light (Vietnamese);}
{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31573\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhiminor\f31574\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green176\blue80;}{\*\defchp }{\*\defpap \ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }
\noqfpromote {\stylesheet{\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 \snext0 \sqformat \spriority0 Normal;}{\*
\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 \snext11 \ssemihidden \sunhideused Normal Table;}{
\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 \f45\fs21\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 \sbasedon0 \snext15 \slink16 \spriority0 \styrsid12133299 
Plain Text;}{\*\cs16 \additive \rtlch\fcs1 \af0\afs21 \ltrch\fcs0 \f45\fs21 \sbasedon10 \slink15 \slocked \spriority0 \styrsid12133299 Nur Text Zchn;}}{\*\rsidtbl \rsid137847\rsid201765\rsid282756\rsid329567\rsid545605\rsid875983\rsid998865\rsid1012666
\rsid1079702\rsid1186914\rsid1187558\rsid1210323\rsid1379773\rsid1397456\rsid1402677\rsid1458918\rsid1657607\rsid1716039\rsid1920351\rsid2171971\rsid2450779\rsid2566317\rsid2639395\rsid2709274\rsid2883584\rsid2889805\rsid2954327\rsid2980729\rsid3090963
\rsid3098676\rsid3155038\rsid3348181\rsid3358091\rsid3360257\rsid3424994\rsid3438939\rsid3440572\rsid3496379\rsid3496729\rsid3608540\rsid3813628\rsid3825170\rsid3963763\rsid4029312\rsid4074728\rsid4083796\rsid4262738\rsid4287694\rsid4416945\rsid4465477
\rsid4479936\rsid4532565\rsid4535590\rsid4551512\rsid4589506\rsid4613223\rsid4741630\rsid4927341\rsid4996566\rsid5136470\rsid5191541\rsid5195352\rsid5388715\rsid5643276\rsid5724249\rsid5786944\rsid5835967\rsid5968245\rsid5969036\rsid5982360\rsid6162926
\rsid6166058\rsid6176082\rsid6190352\rsid6362924\rsid6364577\rsid6433188\rsid6502697\rsid6632644\rsid6635347\rsid6773162\rsid6778264\rsid6821690\rsid6833870\rsid6977765\rsid7013080\rsid7168019\rsid7372597\rsid7413415\rsid7544151\rsid7756367\rsid7812302
\rsid7880272\rsid8012932\rsid8284120\rsid8482517\rsid8608084\rsid8683301\rsid8717971\rsid8747016\rsid8791328\rsid8938124\rsid9052799\rsid9057667\rsid9400825\rsid9448165\rsid9518021\rsid9664352\rsid9780539\rsid9782442\rsid9852053\rsid9927085\rsid9966034
\rsid9967546\rsid9987885\rsid10027220\rsid10034115\rsid10241298\rsid10245498\rsid10432447\rsid10436233\rsid10437813\rsid10499346\rsid10507949\rsid10758690\rsid10775448\rsid10836641\rsid10891252\rsid10894412\rsid11172405\rsid11218417\rsid11367522
\rsid11627947\rsid11758734\rsid11819092\rsid11862215\rsid11873673\rsid11877205\rsid12020922\rsid12068694\rsid12075594\rsid12085799\rsid12133299\rsid12145584\rsid12211182\rsid12218911\rsid12280048\rsid12394241\rsid12547716\rsid12789208\rsid13064829
\rsid13119477\rsid13121319\rsid13240905\rsid13388970\rsid13456105\rsid13501532\rsid13528419\rsid13633541\rsid13783138\rsid13789258\rsid13848946\rsid13857606\rsid13897917\rsid13923016\rsid13967962\rsid13978108\rsid14030984\rsid14101533\rsid14162425
\rsid14186245\rsid14302041\rsid14433429\rsid14437351\rsid14622096\rsid14769836\rsid14822470\rsid14842639\rsid14895016\rsid14905876\rsid15078625\rsid15084164\rsid15085326\rsid15208560\rsid15236935\rsid15341357\rsid15351618\rsid15414212\rsid15495668
\rsid15674585\rsid15738252\rsid15801506\rsid15860003\rsid15929632\rsid15937999\rsid15939874\rsid16022663\rsid16069708\rsid16137513\rsid16138115\rsid16479115\rsid16606392\rsid16611029\rsid16737148}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0
\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author Windows-Benutzer}{\operator Windows-Benutzer}{\creatim\yr2021\mo12\dy9\hr14\min12}{\revtim\yr2021\mo12\dy9\hr14\min13}{\version3}{\edmins0}{\nofpages33}
{\nofwords9630}{\nofchars60675}{\*\company Philosophische Fakultaet HHUD}{\nofcharsws70165}{\vern57451}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}
\paperw11906\paperh16838\margl1334\margr1335\margt1417\margb1134\gutter0\ltrsect 
\deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0
\showxmlerrors1\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1334\dgvorigin1417\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\nojkernpunct\rsidroot2883584\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal 
\nouicompat \fet0{\*\wgrffmtfilter 013f}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl\sectrsid12133299\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang 
{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9
\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid12133299 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\f45\fs21\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 {\rtlch\fcs1 \af2 \ltrch\fcs0 \b\f2\cf17\insrsid3015044\charrsid14622096 'This program was used to compute the predictions, success rates, etc. given data concerning the Aust Rules Football

\par 'prediction tournament.
\par 
\par 'The code is currently set up to generate the data for Figures 3 and 4, of the the paper "Escaping the No Free Lunch Theorem: A Priori
\par 'Advantages of Regret-Based Meta-Induction". (Switch the variable Nat_Scoring to 0 to generate the data for Figure 4.) 
\par 
\par 'The code can be pasted into a newly created Windows Form Application. One just needs to add two buttons, and the appropriate references. 
\par 'To add references select "PROJECT" tab, and then select "Add Reference". Add: System.Numerics, and Microsoft Excel 15.0 Object Library.
\par 
\par 'Upon executing program, press the first button to open an Excel spreadsheet, then paste the relevant data into the spreadsheet, 
\par 'then press button 2.
\par 
\par 'Data format for spreadsheet: First row is the event sequence. Subsequent rows are the predictions of non-MI players. 
\par 'A final column may include a ranking of the players by some criterion (i.e, ascending values associated with the players). 
\par 'The ranking can then be used to exclude players. For example, include only the 31 players that made the most predictions. In that case, set Top_Num to 31.
\par 
\par 'The program also 'prints' data back into the spreadsheet. This can be modified, i.e., what data is printed.
\par 
\par 'Numerous parameters can be adjusted, at the top of the program. Number of players and rounds is crucial.
\par 
\par 'For example, one can toggle between linear (natural) and quadratic scoring, by setting Nat_Scoring to 1 or 0.
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid3015044\charrsid12133299 
\par 
\par Imports System.Math
\par 
\par Public Class Form1
\par 
\par     'Current settings (Rounds = 1514 and Players = 1072) corresponds to Complete Footy Data 2005-2012: 
\par     Dim Rounds As Integer = 1514
\par     Dim Players As Integer = 1072 'Inputed valued should be number of players + 1 (i.e., number of players inputed from spreadsheet plus the event sequence). 
\par 
\par     Dim Top_Num As Integer = 31 'Players 'Used to set the number of players who make prediction, according to a ranking. (Players is default) (various ranking systems possible) 
\par     Dim Top_Players(Top_Num) As Integer 'records the top ranked players 
\par     Dim Test_in_Top As Integer 'used for a test
\par 
\par     'the following variables are for an ABC variant which uses sampling to estimate cue validities:
\par     Dim Use_Sample_to_Set_Cue_Validities As Integer = 0
\par     Dim Sample_Size As Integer = Rounds * 1.0
\par     Dim Remove_Sample_from_Event_Sequence As Integer = 0
\par     Dim Rounds_in_Sample(Sample_Size) As Integer 'Will store a list of the rounds in teh sample.
\par     Dim nonMI_Sample_Success_Rates(Players) As Double 'Reconds the success rates of the nonMI players within the sample.
\par     Dim nonMI_Sample_Validities(Players) As Double 'Reconds the validities of the nonMI players within the sample.
\par     Dim Prediction_Begins As Double 'Record round number when prediction begins, i.e., when test set begins.
\par 
\par     Dim Nat_Scoring As Integer = 1 'One can toggle between linear (natural) and quadratic scoring, by setting Nat_Scoring to 1 or 0.
\par 
\par 
\par     Dim ABC_Format As Integer = 0 'predictions are transformed into extreme predictions
\par     Dim Null_Prediction_Margin As Double = 0.0 'could be zero: how far from 0.5 a prediction is before being transformed to an extreme prediction
\par 
\par     Dim objApp As Microsoft.Office.Interop.Excel.Application 'used in accessing an manipulating an excel spreadsheet
\par     Dim objBook As Microsoft.Office.Interop.Excel._Workbook 'for excel
\par 
\par     Dim nonMI_Score_Transcript(Players, Rounds) As Double
\par     Dim Forced_nonMI_Prediction_Transcript(Players, Rounds) As Double 'Transcript where a prediction is 'forced' at each round. No prediction equals a prediction of 0.5.
\par     Dim nonMI_Success_Rate_Transcript(Players, Rounds) As Double 'Success rate where predictions are forced.
\par 
\par     Dim nonMI_Variants_Validity_Transcript(Players, Rounds, 12) As Double 'Permits scaling to include 12 variants of iAW applied to the validities of nonMIs within past time windows of 12 different sizes. Size is 2 to the (n minus 1). 
\par     'Set up so only n = 12 is computed at the moment. This can adjusted by uncommenting code, below.
\par 
\par     Dim Holder1 As Double
\par     Dim Holder2 As Double
\par     Dim Holder3 As Integer
\par     Dim Holder4 As Double
\par 
\par     Dim No_Prediction_Counter(4) As Integer 'for diagnostics
\par     Dim test As Integer
\par 
\par     Dim RandomClass As New Random() 'needed to generate random numbers (bteween 0 and 1)
\par     Dim RandomNumber As Double
\par     Dim RandomNumber2 As Double
\par 
\par     Dim Number_of_Predictions_Made(Players) As Integer 'Records the number of actual predictions made by the nonMIs.
\par 
\par 
\par     'This Sub opens and prepares the Excel spreadsheet that will be used in loading data:
\par     Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
\par 
\par         Dim objBooks As Microsoft.Office.Interop.Excel.Workbooks 'for excel
\par         Dim objSheets As Microsoft.Office.Interop.Excel.Sheets 'for excel
\par         Dim objSheet As Microsoft.Office.Interop.Excel._Worksheet 'for excel
\par         Dim range As Microsoft.Office.Interop.Excel.Range 'for excel
\par 
\par         ' Create a new instance of Excel and start a new workbook:
\par         objApp = New Microsoft.Office.Interop.Excel.Application()
\par         objBooks = objApp.Workbooks
\par         objBook = objBooks.Add
\par         objSheets = objBook.Worksheets
\par         objSheet = objSheets(1)
\par 
\par         range = objSheet.Range("A1", Reflection.Missing.Value) 'for excel
\par         range = range.Resize(Players, Rounds + 1) 'for excel
\par 
\par         Dim saRet(Players, Rounds + 1) As Double 'This matrix will temporarily store the match outcomes and the predictions of the nonMIs.
\par 
\par         range.Value = saRet 'indicates the cells of the spreadsheet that will be loaded into saRet
\par 
\par         'Return control of Excel to the user.
\par         objApp.Visible = True
\par         objApp.UserControl = True
\par 
\par         'Clean up a little.
\par         range = Nothing
\par         objSheet = Nothing
\par         objSheets = Nothing
\par         objBooks = Nothing
\par 
\par     End Sub
\par 
\par     'This inlcudes the main program, which is run after button two is pressed:
\par     Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
\par         Dim objSheets As Microsoft.Office.Interop.Excel.Sheets
\par         Dim objSheet As Microsoft.Office.Interop.Excel._Worksheet
\par         Dim range As Microsoft.Office.Interop.Excel.Range
\par 
\par         'Get a reference to the first sheet of the workbook.
\par         objSheets = objBook.Worksheets
\par         objSheet = objSheets(1)
\par 
\par         'Get a range of data.
\par         range = objSheet.Range("A1", "BFG1072") 'Specifies area of spreadsheet to be accessed. Can be modified manually (BFG1072 is for a 1514 round game with 1072 Players; BFG is equivalent to 1514, and specifies the number of columns; for 100 
rounds: CW ) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
\par 
\par         'Retrieve the data from the range.
\par         Dim SpreadSheetData(Players, Rounds) As Object 'This matrix will store the match outcomes and the predictions of the nonMIs.
\par         SpreadSheetData = range.Value
\par 
\par         Randomize() 'sets seed for random number generator, by clock-value
\par 
\par 
\par         'the following chooses a sample of the matches as a basis for assessing success rates and validities, if test is met (i.e., if Use_Sample_to_Set_Cue_Validities = 1):
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             For x = 1 To Sample_Size
\par                 test = 0
\par                 Do While test = 0
\par                     test = 1
\par                     Holder3 = RandomClass.NextDouble() * Rounds
\par                     For y = 1 To x - 1
\par                         If Holder3 = Rounds_in_Sample(y) Or Holder3 = 0 Then
\par                             test = 0
\par                             y = x - 1
\par                         End If
\par                     Next
\par                     If test = 1 Then
\par                         Rounds_in_Sample(x) = Holder3
\par                     End If
\par                 Loop
\par             Next
\par 
\par             For rx = 1 To Sample_Size
\par                 For p = 2 To Players
\par 
\par                     'In_Top Check *************************************************************
\par                     Test_in_Top = 0 'This block determines whether a player is considered.
\par                     If SpreadSheetData(p, Rounds + 1) <= Top_Num Then
\par                         Test_in_Top = 1
\par                     End If
\par 
\par                     If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                         If SpreadSheetData(p, Rounds_in_Sample(rx)) = -1 Then
\par                             Forced_nonMI_Prediction_Transcript(p, rx) = 0.5
\par                             'Forced_nonMI_Prediction_Transcript(p, r) = RandomClass.NextDouble() 'an alternative
\par                         Else
\par                             Forced_nonMI_Prediction_Transcript(p, rx) = SpreadSheetData(p, Rounds_in_Sample(rx))
\par                         End If
\par 
\par                         If ABC_Format = 1 Then
\par                             If Forced_nonMI_Prediction_Transcript(p, rx) > 0.5 + Null_Prediction_Margin Then
\par                                 Forced_nonMI_Prediction_Transcript(p, rx) = 1
\par                             Else
\par                                 If Forced_nonMI_Prediction_Transcript(p, rx) < 0.5 - Null_Prediction_Margin Then
\par                                     Forced_nonMI_Prediction_Transcript(p, rx) = 0
\par                                 Else
\par                                     'Holder4 = RandomClass.NextDouble()
\par                                     'If Holder4 > 0.5 Then
\par                                     '    Forced_nonMI_Prediction_Transcript(p, rx) = 1
\par                                     'Else
\par                                     '    Forced_nonMI_Prediction_Transcript(p, rx) = 0
\par                                     'End If
\par                                     Forced_nonMI_Prediction_Transcript(p, rx) = 0.5
\par                                 End If
\par                             End If
\par                         End If
\par 
\par 
\par                         If Nat_Scoring = 1 Then
\par                             If SpreadSheetData(1, Rounds_in_Sample(rx)) >= Forced_nonMI_Prediction_Transcript(p, rx) Then 'linear scoring
\par                                 nonMI_Score_Transcript(p, rx) = 1 - SpreadSheetData(1, Rounds_in_Sample(rx)) + Forced_nonMI_Prediction_Transcript(p, rx)
\par                             Else
\par                                 nonMI_Score_Transcript(p, rx) = 1 - Forced_nonMI_Prediction_Transcript(p, rx) + SpreadSheetData(1, Rounds_in_Sample(rx))
\par                             End If
\par                         Else
\par                             'quadratic scoring
\par                             nonMI_Score_Transcript(p, rx) = 1 - (Math.Abs(SpreadSheetData(1, Rounds_in_Sample(rx)) - Forced_nonMI
_Prediction_Transcript(p, rx)) * Math.Abs(SpreadSheetData(1, Rounds_in_Sample(rx)) - Forced_nonMI_Prediction_Transcript(p, rx)))
\par 
\par                         End If
\par 
\par 
\par 
\par                         If SpreadSheetData(1, Rounds_in_Sample(rx)) = 0.5 And SpreadSheetData(p, Rounds_in_Sample(rx)) = -1 Then
\par                             nonMI_Score_Transcript(p, rx) = 0.75
\par                         End If
\par 
\par                     End If
\par 
\par                 Next
\par             Next
\par 
\par             'Computes success rates for round 1, for ABC variant (i.e., extremized predictions):
\par             For p = 2 To Players
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     nonMI_Success_Rate_Transcript(p, 1) = nonMI_Score_Transcript(p, 1)
\par                 End If
\par             Next
\par 
\par             'Computes remaining success rates, for ABC variant:
\par             For r = 2 To Sample_Size
\par                 For p = 2 To Players
\par 
\par                     'In_Top Check *************************************************************
\par                     Test_in_Top = 0 'This block determines whether a player is considered.
\par                     If SpreadSheetData(p, Rounds + 1) <= Top_Num Then
\par                         Test_in_Top = 1
\par                     End If
\par 
\par                     If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                         nonMI_Success_Rate_Transcript(p, r) = ((nonMI_Success_Rate_Transcript(p, r - 1) * (r - 1)) + nonMI_Score_Transcript(p, r)) / r
\par                     End If
\par                 Next
\par             Next
\par             For p = 2 To Players
\par                 nonMI_Sample_Success_Rates(p) = nonMI_Success_Rate_Transcript(p, Sample_Size)
\par             Next
\par 
\par             'computes validities, for ABC variant:
\par             For r = 1 To Sample_Size
\par                 For p = 2 To Players
\par 
\par                     'In_Top Check *************************************************************
\par                     'This block determines whether a player is considered
\par                     Test_in_Top = 0
\par                     If SpreadSheetData(p, Rounds + 1) <= Top_Num Then
\par                         Test_in_Top = 1
\par                     End If
\par 
\par                     If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                         Holder1 = 0
\par                         Number_of_Predictions_Made(p) = 0
\par                         For n = 1 To r
\par                             If Not SpreadSheetData(p, Rounds_in_Sample(n)) = -1 Then
\par                                 Holder1 = nonMI_Score_Transcript(p, n) + Holder1
\par                                 Number_of_Predictions_Made(p) = Number_of_Predictions_Made(p) + 1
\par                             End If
\par                         Next
\par                         If Not Number_of_Predictions_Made(p) = 0 Then
\par                             nonMI_Variants_Validity_Transcript(p, r, 12) = Holder1 / Number_of_Predictions_Made(p)
\par                         Else
\par                             nonMI_Variants_Validity_Transcript(p, r, 12) = 0
\par                         End If
\par                     End If
\par 
\par                 Next
\par             Next
\par             For p = 2 To Players
\par                 nonMI_Sample_Validities(p) = nonMI_Variants_Validity_Transcript(p, Sample_Size, 12)
\par             Next
\par 
\par             'the following removes sampled events from the event sequence:
\par             Dim Counter As Integer = 0
\par             test = 1
\par             If Remove_Sample_from_Event_Sequence = 1 Then
\par                 For rx = 1 To Rounds
\par                     For x = 1 To Sample_Size
\par                         If rx = Rounds_in_Sample(x) Then
\par                             test = 0
\par                         End If
\par                     Next
\par                     If test = 1 Then
\par                         Counter = Counter + 1
\par                         For p = 1 To Players
\par                             SpreadSheetData(p, Counter) = SpreadSheetData(p, rx)
\par                         Next
\par                     End If
\par                     test = 1
\par                 Next
\par                 Rounds = Rounds - Sample_Size
\par             Else
\par                 Sample_Size = 0
\par             End If
\par 
\par         Else
\par             Sample_Size = 0
\par         End If
\par 
\par 
\par 
\par         ''the following is for excluding non-predictors
\par         'For p = 2 To Players
\par         '    objApp.Cells(p, Rounds + 1) = 1
\par         'Next
\par         'For p = 2 To Players
\par         '    Number_of_Predictions_Made(p) = 0
\par         'Next
\par         'For p = 2 To Players
\par         '    For r = 1 To Rounds
\par         '        If Not SpreadSheetData(p, r) = -1 Then
\par         '            Number_of_Predictions_Made(p) = Number_of_Predictions_Made(p) + 1
\par         '        End If
\par         '    Next
\par         'Next
\par         'For p = 2 To Players
\par         '    If Number_of_Predictions_Made(p) = 0 Then
\par         '        objApp.Cells(p, Rounds + 1) = 100000
\par         '    End If
\par         'Next
\par 
\par 
\par 
\par         'Computes Scores for NonMI for each round (the first player is the event):
\par         For r = 1 To Rounds
\par             For p = 2 To Players
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     If SpreadSheetData(p, r) = -1 Then
\par                         Forced_nonMI_Prediction_Transcript(p, r) = 0.5
\par                         'Forced_nonMI_Prediction_Transcript(p, r) = RandomClass.NextDouble() 'an alternative to setting to 0.5
\par                     Else
\par                         Forced_nonMI_Prediction_Transcript(p, r) = SpreadSheetData(p, r)
\par                     End If
\par 
\par 
\par                     If ABC_Format = 1 Then
\par                         If Forced_nonMI_Prediction_Transcript(p, r) > 0.5 + Null_Prediction_Margin Then
\par                             Forced_nonMI_Prediction_Transcript(p, r) = 1
\par                         Else
\par                             If Forced_nonMI_Prediction_Transcript(p, r) < 0.5 - Null_Prediction_Margin Then
\par                                 Forced_nonMI_Prediction_Transcript(p, r) = 0
\par                             Else
\par                                 'Holder4 = RandomClass.NextDouble()
\par                                 'If Holder4 > 0.5 Then
\par                                 '    Forced_nonMI_Prediction_Transcript(p, r) = 1
\par                                 'Else
\par                                 '    Forced_nonMI_Prediction_Transcript(p, r) = 0
\par                                 'End If
\par                                 Forced_nonMI_Prediction_Transcript(p, r) = 0.5
\par                             End If
\par                         End If
\par                     End If
\par 
\par 
\par                     If Nat_Scoring = 1 Then
\par                         If SpreadSheetData(1, r) >= Forced_nonMI_Prediction_Transcript(p, r) Then 'linear scoring
\par                             nonMI_Score_Transcript(p, r) = 1 - SpreadSheetData(1, r) + Forced_nonMI_Prediction_Transcript(p, r)
\par                         Else
\par                             nonMI_Score_Transcript(p, r) = 1 - Forced_nonMI_Prediction_Transcript(p, r) + SpreadSheetData(1, r)
\par                         End If
\par                     Else
\par                         'quadratic scoring
\par                         nonMI_Score_Transcript(p, r) = 1 - (Math.Abs(SpreadSheetData(1, r) - Forced_nonMI_Prediction_Transcript(p, r)) * Math.Abs(SpreadSheetData(1, r) - Forced_nonMI_Prediction_Transcript(p, r)))
\par                     End If
\par 
\par 
\par 
\par 
\par 
\par                     If SpreadSheetData(1, r) = 0.5 And SpreadSheetData(p, r) = -1 Then '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
\par                         nonMI_Score_Transcript(p, r) = 0.75
\par                     End If
\par 
\par                 End If
\par 
\par             Next
\par         Next
\par 
\par 
\par         'Computes forced prediction success rates for each NonMI, each round (first player is the event):
\par         For p = 2 To Players
\par 
\par             'In_Top Check *************************************************************
\par             Test_in_Top = 0 'This block determines whether a player is considered.
\par             If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                 Test_in_Top = 1
\par             End If
\par 
\par             If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                 nonMI_Success_Rate_Transcript(p, 1) = nonMI_Score_Transcript(p, 1)
\par             End If
\par 
\par         Next
\par 
\par         Dim nonMI_Avg_Success_Rate_Transcript(Rounds) As Double
\par         For r = 2 To Rounds
\par             For p = 2 To Players
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     nonMI_Success_Rate_Transcript(p, r) = ((nonMI_Success_Rate_Transcript(p, r - 1) * (r - 1)) + nonMI_Score_Transcript(p, r)) / r
\par                 End If
\par 
\par             Next
\par 
\par             nonMI_Avg_Success_Rate_Transcript(r) = 0
\par             For p = 2 To Players
\par                 nonMI_Avg_Success_Rate_Transcript(r) = nonMI_Avg_Success_Rate_Transcript(r) + nonMI_Success_Rate_Transcript(p, r)
\par             Next
\par             nonMI_Avg_Success_Rate_Transcript(r) = nonMI_Avg_Success_Rate_Transcript(r) / (Players - 1)
\par         Next
\par 
\par 
\par         'the following records some relevant success rates:
\par         Dim Top_nonMI_Success_Rate(Rounds) As Double
\par         Dim Top_nonMI_Player_by_Success(Rounds) As Double
\par         For r = 1 To Rounds
\par 
\par             Holder1 = 2
\par             Holder2 = nonMI_Success_Rate_Transcript(2, r)
\par             For p = 3 To Players
\par                 If nonMI_Success_Rate_Transcript(p, r) > Holder2 Then
\par                     Holder1 = p
\par                     Holder2 = nonMI_Success_Rate_Transcript(p, r)
\par                 End If
\par             Next
\par             Top_nonMI_Player_by_Success(r) = Holder1
\par             Top_nonMI_Success_Rate(r) = Holder2
\par         Next
\par 
\par 
\par         Dim Duplicate_nonMI_Success_Rate_Transcript(Players, Rounds) As Double 'useful to have a duplicate matrix.
\par         For x = 2 To Players
\par             For y = 1 To Rounds
\par                 Duplicate_nonMI_Success_Rate_Transcript(x, y) = nonMI_Success_Rate_Transcript(x, y)
\par             Next
\par         Next
\par 
\par 
\par 
\par         'the following implements limited precognition
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par 
\par             For r = 0 To Rounds
\par                 For p = 2 To Players
\par                     nonMI_Success_Rate_Transcript(p, r) = nonMI_Sample_Success_Rates(p)
\par                     nonMI_Variants_Validity_Transcript(p, r, 12) = nonMI_Sample_Validities(p)
\par                 Next
\par             Next
\par         End If
\par 
\par 
\par         ''Some data is collected that was of interest at some point:
\par         'Dim Forced_Average_Score As Double = 0
\par         'Dim UnForced_Average_Score As Double = 0
\par         'Dim Total_Unforced_nonMI_Predictions As Integer = 0
\par         'Dim Forced_Average_Score_Transcript(Rounds) As Double
\par         'Dim UnForced_Average_Score_Transcript(Rounds) As Double
\par         'For r = 1 To Rounds
\par         '    For p = 2 To Players
\par 
\par         '        'In_Top Check *************************************************************
\par         '        Test_in_Top = 0 'This block determines whether a player is considered.
\par         '        If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par         '            Test_in_Top = 1
\par         '        End If
\par 
\par         '        If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par         '            Forced_Average_Score = Forced_Average_Score + nonMI_Score_Transcript(p, r)
\par         '            If Not SpreadSheetData(p, r) = -1 Then
\par         '                UnForced_Average_Score = UnForced_Average_Score + nonMI_Score_Transcript(p, r)
\par         '                Total_Unforced_nonMI_Predictions = Total_Unforced_nonMI_Predictions + 1
\par         '            End If
\par         '        End If
\par 
\par         '    Next
\par 
\par         '    UnForced_Average_Score_Transcript(r) = UnForced_Average_Score / Total_Unforced_nonMI_Predictions
\par         '    Forced_Average_Score_Transcript(r) = Forced_Average_Score / (r * Top_Num)
\par 
\par         'Next
\par         'UnForced_Average_Score = UnForced_Average_Score / Total_Unforced_nonMI_Predictions
\par         'Forced_Average_Score = Forced_Average_Score / (Rounds * Top_Num)
\par 
\par 
\par 
\par         'Computes AW's predictions, scores, and success rates:
\par         Dim AW_Prediction_Transcript(Rounds) As Double
\par         Dim AW_Score_Transcript(Rounds) As Double
\par         Dim AW_Success_Rate_Transcript(Rounds) As Double
\par 
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             Prediction_Begins = 1
\par         Else
\par             AW_Prediction_Transcript(1) = -1
\par             AW_Score_Transcript(1) = 0.5
\par             AW_Success_Rate_Transcript(1) = 0.5
\par             Prediction_Begins = 2
\par             'If ABC_Format = 1 Then
\par             '    Holder4 = RandomClass.NextDouble()
\par             '    If Holder4 > 0.5 Then
\par             '        AW_Score_Transcript(1) = 1
\par             '        AW_Success_Rate_Transcript(1) = 1
\par             '    Else
\par             '        AW_Score_Transcript(1) = 0
\par             '        AW_Success_Rate_Transcript(1) = 0
\par             '    End If
\par             'End If
\par         End If
\par 
\par         For r = Prediction_Begins To Rounds
\par             Holder1 = 0
\par             Holder2 = 0
\par             For p = 2 To Players
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     If nonMI_Success_Rate_Transcript(p, r - 1) > AW_Success_Rate_Transcript(r - 1) Then
\par                         Holder1 = Holder1 + (Forced_nonMI_Prediction_Transcript(p, r) * (nonMI_Success_Rate_Transcript(p, r - 1) - AW_Success_Rate_Transcript(r - 1))) 'numerator
\par                         Holder2 = Holder2 + (nonMI_Success_Rate_Transcript(p, r - 1) - AW_Success_Rate_Transcript(r - 1)) 'denominator
\par                     End If
\par                 End If
\par 
\par             Next
\par 
\par             If Not Holder2 = 0 Then 'prediction
\par                 AW_Prediction_Transcript(r) = Holder1 / Holder2
\par             Else
\par                 AW_Prediction_Transcript(r) = 0.5
\par             End If
\par 
\par 
\par             If ABC_Format = 1 Then
\par                 'Holder4 = RandomClass.NextDouble()
\par                 'If Holder4 <= AW_Prediction_Transcript(r) Then
\par                 '    AW_Prediction_Transcript(r) = 1
\par                 'Else
\par                 '    AW_Prediction_Transcript(r) = 0
\par                 'End If
\par 
\par 
\par                 If AW_Prediction_Transcript(r) > 0.5 + Null_Prediction_Margin Then
\par                     AW_Prediction_Transcript(r) = 1
\par                 Else
\par                     If AW_Prediction_Transcript(r) < 0.5 - Null_Prediction_Margin Then
\par                         AW_Prediction_Transcript(r) = 0
\par                     Else
\par                         AW_Prediction_Transcript(r) = 0.5
\par                         'Holder4 = RandomClass.NextDouble()
\par                         'If Holder4 > 0.5 Then
\par                         '    AW_Prediction_Transcript(r) = 1
\par                         'Else
\par                         '    AW_Prediction_Transcript(r) = 0
\par                         'End If
\par                     End If
\par                 End If
\par             End If
\par 
\par 
\par             If Nat_Scoring = 1 Then
\par                 If SpreadSheetData(1, r) >= AW_Prediction_Transcript(r) Then 'linear scoring 
\par                     AW_Score_Transcript(r) = 1 - SpreadSheetData(1, r) + AW_Prediction_Transcript(r)
\par                 Else
\par                     AW_Score_Transcript(r) = 1 - AW_Prediction_Transcript(r) + SpreadSheetData(1, r)
\par                 End If
\par             Else
\par                 AW_Score_Transcript(r) = 1 - (Math.Abs(SpreadSheetData(1, r) - AW_Prediction_Transcript(r)) * Math.Abs(SpreadSheetData(1, r) - AW_Prediction_Transcript(r)))
\par             End If
\par 
\par 
\par 
\par 
\par             AW_Success_Rate_Transcript(r) = ((AW_Success_Rate_Transcript(r - 1) * (r - 1)) + AW_Score_Transcript(r)) / r
\par 
\par         Next
\par 
\par 
\par 
\par 
\par         'Computes eAW's predictions, scores, and success rates:
\par         Dim eAW_Prediction_Transcript(Rounds) As Double
\par         Dim eAW_Score_Transcript(Rounds) As Double
\par         Dim eAW_Success_Rate_Transcript(Rounds) As Double
\par         Dim eAW_EXP As Double
\par 
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             Prediction_Begins = 1
\par         Else
\par             eAW_Prediction_Transcript(1) = -1
\par             eAW_Score_Transcript(1) = 0.5
\par             eAW_Success_Rate_Transcript(1) = 0.5
\par             Prediction_Begins = 2
\par             'If ABC_Format = 1 Then
\par             '    Holder4 = RandomClass.NextDouble()
\par             '    If Holder4 > 0.5 Then
\par             '        eAW_Score_Transcript(1) = 1
\par             '        eAW_Success_Rate_Transcript(1) = 1
\par             '    Else
\par             '        eAW_Score_Transcript(1) = 0
\par             '        eAW_Success_Rate_Transcript(1) = 0
\par             '    End If
\par             'End If
\par         End If
\par 
\par         For r = Prediction_Begins To Rounds
\par             eAW_EXP = Math.Sqrt((8 * Math.Log(Top_Num)) / r)
\par             Holder1 = 0
\par             Holder2 = 0
\par             For p = 2 To Players
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     Holder1 = Holder1 + (Forced_nonMI_Prediction_Transcript(p, r) * Math.Exp(eAW_EXP * ((r - 1) * (nonMI_Success_Rate_Transcript(p, r - 1) - eAW_Success_Rate_Transcript(r - 1)))))
\par                     Holder2 = Holder2 + Math.Exp(eAW_EXP * ((r - 1) * (nonMI_Success_Rate_Transcript(p, r - 1) - eAW_Success_Rate_Transcript(r - 1))))
\par                 End If
\par 
\par             Next
\par 
\par             If Not Holder2 = 0 Then 'prediction
\par                 eAW_Prediction_Transcript(r) = Holder1 / Holder2
\par             Else
\par                 eAW_Prediction_Transcript(r) = 0.5
\par             End If
\par 
\par 
\par             If ABC_Format = 1 Then
\par                 'Holder4 = RandomClass.NextDouble()
\par                 'If Holder4 <= eAW_Prediction_Transcript(r) Then
\par                 '    eAW_Prediction_Transcript(r) = 1
\par                 'Else
\par                 '    eAW_Prediction_Transcript(r) = 0
\par                 'End If
\par 
\par 
\par                 If eAW_Prediction_Transcript(r) > 0.5 + Null_Prediction_Margin Then
\par                     eAW_Prediction_Transcript(r) = 1
\par                 Else
\par                     If eAW_Prediction_Transcript(r) < 0.5 - Null_Prediction_Margin Then
\par                         eAW_Prediction_Transcript(r) = 0
\par                     Else
\par                         eAW_Prediction_Transcript(r) = 0.5
\par                         'Holder4 = RandomClass.NextDouble()
\par                         'If Holder4 > 0.5 Then
\par                         '    eAW_Prediction_Transcript(r) = 1
\par                         'Else
\par                         '    eAW_Prediction_Transcript(r) = 0
\par                         'End If
\par                     End If
\par                 End If
\par             End If
\par 
\par 
\par             If Nat_Scoring = 1 Then
\par                 If SpreadSheetData(1, r) >= eAW_Prediction_Transcript(r) Then 'linear scoring 
\par                     eAW_Score_Transcript(r) = 1 - SpreadSheetData(1, r) + eAW_Prediction_Transcript(r)
\par                 Else
\par                     eAW_Score_Transcript(r) = 1 - eAW_Prediction_Transcript(r) + SpreadSheetData(1, r)
\par                 End If
\par             Else
\par                 eAW_Score_Transcript(r) = 1 - (Math.Abs(SpreadSheetData(1, r) - eAW_Prediction_Transcript(r)) * Math.Abs(SpreadSheetData(1, r) - eAW_Prediction_Transcript(r)))
\par             End If
\par 
\par 
\par             eAW_Success_Rate_Transcript(r) = ((eAW_Success_Rate_Transcript(r - 1) * (r - 1)) + eAW_Score_Transcript(r)) / r
\par 
\par         Next
\par 
\par 
\par 
\par 
\par         'Computes SW's predictions, scores, and success rates:
\par         Dim SW_Prediction_Transcript(Rounds) As Double
\par         Dim SW_Score_Transcript(Rounds) As Double
\par         Dim SW_Success_Rate_Transcript(Rounds) As Double
\par 
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             Prediction_Begins = 1
\par         Else
\par             SW_Prediction_Transcript(1) = -1
\par             SW_Score_Transcript(1) = 0.5
\par             SW_Success_Rate_Transcript(1) = 0.5
\par             Prediction_Begins = 2
\par             If ABC_Format = 1 Then
\par                 Holder4 = RandomClass.NextDouble()
\par                 If Holder4 > 0.5 Then
\par                     SW_Score_Transcript(1) = 1
\par                     SW_Success_Rate_Transcript(1) = 1
\par                 Else
\par                     SW_Score_Transcript(1) = 0
\par                     SW_Success_Rate_Transcript(1) = 0
\par                 End If
\par             End If
\par         End If
\par 
\par         For r = Prediction_Begins To Rounds
\par             Holder1 = 0
\par             Holder2 = 0
\par             For p = 2 To Players
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     Holder1 = Holder1 + (Forced_nonMI_Prediction_Transcript(p, r) * nonMI_Success_Rate_Transcript(p, r - 1)) 'numerator
\par                     Holder2 = Holder2 + nonMI_Success_Rate_Transcript(p, r - 1) 'denominator
\par                 End If
\par 
\par             Next
\par 
\par             If Not Holder2 = 0 Then 'prediction
\par                 SW_Prediction_Transcript(r) = Holder1 / Holder2
\par             Else
\par                 SW_Prediction_Transcript(r) = 0.5
\par             End If
\par 
\par             If ABC_Format = 1 Then
\par                 If SW_Prediction_Transcript(r) > 0.5 + Null_Prediction_Margin Then
\par                     SW_Prediction_Transcript(r) = 1
\par                 Else
\par                     If SW_Prediction_Transcript(r) < 0.5 - Null_Prediction_Margin Then
\par                         SW_Prediction_Transcript(r) = 0
\par                     Else
\par                         Holder4 = RandomClass.NextDouble()
\par                         If Holder4 > 0.5 Then
\par                             SW_Prediction_Transcript(r) = 1
\par                         Else
\par                             SW_Prediction_Transcript(r) = 0
\par                         End If
\par                     End If
\par                 End If
\par             End If
\par 
\par             If Nat_Scoring = 1 Then
\par                 If SpreadSheetData(1, r) >= SW_Prediction_Transcript(r) Then 'linear scoring 
\par                     SW_Score_Transcript(r) = 1 - SpreadSheetData(1, r) + SW_Prediction_Transcript(r)
\par                 Else
\par                     SW_Score_Transcript(r) = 1 - SW_Prediction_Transcript(r) + SpreadSheetData(1, r)
\par                 End If
\par             Else
\par                 SW_Score_Transcript(r) = 1 - (SW_Prediction_Transcript(r) + SpreadSheetData(1, r) * SW_Prediction_Transcript(r) + SpreadSheetData(1, r))
\par             End If
\par 
\par 
\par             SW_Success_Rate_Transcript(r) = ((SW_Success_Rate_Transcript(r - 1) * (r - 1)) + SW_Score_Transcript(r)) / r
\par 
\par         Next
\par 
\par 
\par 
\par         'Computes CSW's predictions, scores, and success rates:
\par         Dim CSW_Prediction_Transcript(Rounds) As Double
\par         Dim CSW_Score_Transcript(Rounds) As Double
\par         Dim CSW_Success_Rate_Transcript(Rounds) As Double
\par 
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             Prediction_Begins = 1
\par         Else
\par             CSW_Prediction_Transcript(1) = -1
\par             CSW_Score_Transcript(1) = 0.5
\par             CSW_Success_Rate_Transcript(1) = 0.5
\par             Prediction_Begins = 2
\par             If ABC_Format = 1 Then
\par                 Holder4 = RandomClass.NextDouble()
\par                 If Holder4 > 0.5 Then
\par                     CSW_Score_Transcript(1) = 1
\par                     CSW_Success_Rate_Transcript(1) = 1
\par                 Else
\par                     CSW_Score_Transcript(1) = 0
\par                     CSW_Success_Rate_Transcript(1) = 0
\par                 End If
\par             End If
\par         End If
\par 
\par         For r = Prediction_Begins To Rounds
\par             Holder1 = 0
\par             Holder2 = 0
\par             For p = 2 To Players
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     If nonMI_Success_Rate_Transcript(p, r - 1) > 0.5 Then
\par                         Holder1 = Holder1 + (Forced_nonMI_Prediction_Transcript(p, r) * (nonMI_Success_Rate_Transcript(p, r - 1) - 0.5)) 'numerator
\par                         Holder2 = Holder2 + nonMI_Success_Rate_Transcript(p, r - 1) - 0.5 'denominator
\par                     End If
\par                 End If
\par 
\par             Next
\par 
\par             If Not Holder2 = 0 Then 'prediction
\par                 CSW_Prediction_Transcript(r) = Holder1 / Holder2
\par             Else
\par                 CSW_Prediction_Transcript(r) = 0.5
\par             End If
\par 
\par 
\par             If ABC_Format = 1 Then
\par                 If CSW_Prediction_Transcript(r) > 0.5 + Null_Prediction_Margin Then
\par                     CSW_Prediction_Transcript(r) = 1
\par                 Else
\par                     If CSW_Prediction_Transcript(r) < 0.5 - Null_Prediction_Margin Then
\par                         CSW_Prediction_Transcript(r) = 0
\par                     Else
\par                         Holder4 = RandomClass.NextDouble()
\par                         If Holder4 > 0.5 Then
\par                             CSW_Prediction_Transcript(r) = 1
\par                         Else
\par                             CSW_Prediction_Transcript(r) = 0
\par                         End If
\par                     End If
\par                 End If
\par             End If
\par 
\par             If Nat_Scoring = 1 Then
\par                 If SpreadSheetData(1, r) >= CSW_Prediction_Transcript(r) Then 'linear scoring 
\par                     CSW_Score_Transcript(r) = 1 - SpreadSheetData(1, r) + CSW_Prediction_Transcript(r)
\par                 Else
\par                     CSW_Score_Transcript(r) = 1 - CSW_Prediction_Transcript(r) + SpreadSheetData(1, r)
\par                 End If
\par             Else
\par                 CSW_Score_Transcript(r) = 1 - (CSW_Prediction_Transcript(r) + SpreadSheetData(1, r) * CSW_Prediction_Transcript(r) + SpreadSheetData(1, r))
\par             End If
\par 
\par 
\par 
\par             CSW_Success_Rate_Transcript(r) = ((CSW_Success_Rate_Transcript(r - 1) * (r - 1)) + CSW_Score_Transcript(r)) / r
\par 
\par         Next
\par 
\par 
\par 
\par         'Computes the validities for each round for the nonMI variant v = 12 (i.e., prediction horizon is 2 to the (12 -1))
\par         For r = 1 To Rounds
\par             For p = 2 To Players
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     Holder1 = 0
\par                     Number_of_Predictions_Made(p) = 0
\par                     For n = 1 To r
\par 
\par                         If Not SpreadSheetData(p, n) = -1 Then
\par                             Holder1 = nonMI_Score_Transcript(p, n) + Holder1
\par                             Number_of_Predictions_Made(p) = Number_of_Predictions_Made(p) + 1
\par                         End If
\par 
\par                     Next
\par 
\par                     If Not Number_of_Predictions_Made(p) = 0 Then
\par                         nonMI_Variants_Validity_Transcript(p, r, 12) = Holder1 / Number_of_Predictions_Made(p)
\par                     Else
\par                         nonMI_Variants_Validity_Transcript(p, r, 12) = 0
\par                     End If
\par                 End If
\par 
\par             Next
\par         Next
\par 
\par 
\par         ''data manipulation:
\par         'Dim Final_nonMI_Validities(Players) As Double
\par         'For p = 2 To Players
\par         '    Final_nonMI_Validities(p) = nonMI_Variants_Validity_Transcript(p, Rounds, 12)
\par         'Next
\par 
\par 
\par 
\par         'Computes iSW's predictions, scores, and success rates
\par         Dim iSW_Prediction_Transcript(Rounds) As Double
\par         Dim iSW_Score_Transcript(Rounds) As Double
\par         Dim iSW_Success_Rate_Transcript(Rounds) As Double
\par         Dim iSW_Final_Success_Rate As Double
\par 
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             Prediction_Begins = 1
\par         Else
\par             iSW_Prediction_Transcript(1) = -1
\par             iSW_Score_Transcript(1) = 0.5
\par             iSW_Success_Rate_Transcript(1) = 0.5
\par             Prediction_Begins = 2
\par             If ABC_Format = 1 Then
\par                 Holder4 = RandomClass.NextDouble()
\par                 If Holder4 > 0.5 Then
\par                     iSW_Score_Transcript(1) = 1
\par                     iSW_Success_Rate_Transcript(1) = 1
\par                 Else
\par                     iSW_Score_Transcript(1) = 0
\par                     iSW_Success_Rate_Transcript(1) = 0
\par                 End If
\par             End If
\par         End If
\par 
\par         For r = Prediction_Begins To Rounds
\par             Holder1 = 0
\par             Holder2 = 0
\par             For p = 2 To Players
\par 
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 And Not SpreadSheetData(p, r) = -1 Then 'only consider players whose rank is sufficiently high
\par                     Holder1 = Holder1 + (Forced_nonMI_Prediction_Transcript(p, r) * nonMI_Variants_Validity_Transcript(p, r - 1, 12)) 'numerator
\par                     Holder2 = Holder2 + nonMI_Variants_Validity_Transcript(p, r - 1, 12) 'denominator
\par                 End If
\par 
\par             Next
\par 
\par             If Not Holder2 = 0 Then 'prediction
\par                 iSW_Prediction_Transcript(r) = Holder1 / Holder2
\par             Else
\par                 iSW_Prediction_Transcript(r) = 0.5
\par                 No_Prediction_Counter(2) = No_Prediction_Counter(2) + 1
\par             End If
\par 
\par 
\par             If ABC_Format = 1 Then
\par                 If iSW_Prediction_Transcript(r) > 0.5 + Null_Prediction_Margin Then
\par                     iSW_Prediction_Transcript(r) = 1
\par                 Else
\par                     If iSW_Prediction_Transcript(r) < 0.5 - Null_Prediction_Margin Then
\par                         iSW_Prediction_Transcript(r) = 0
\par                     Else
\par                         Holder4 = RandomClass.NextDouble()
\par                         If Holder4 > 0.5 Then
\par                             iSW_Prediction_Transcript(r) = 1
\par                         Else
\par                             iSW_Prediction_Transcript(r) = 0
\par                         End If
\par                     End If
\par                 End If
\par             End If
\par 
\par 
\par             If Nat_Scoring = 1 Then
\par                 If SpreadSheetData(1, r) >= iSW_Prediction_Transcript(r) Then 'linear scoring 
\par                     iSW_Success_Rate_Transcript(r) = 1 - SpreadSheetData(1, r) + iSW_Prediction_Transcript(r)
\par                 Else
\par                     iSW_Success_Rate_Transcript(r) = 1 - iSW_Prediction_Transcript(r) + SpreadSheetData(1, r)
\par                 End If
\par             Else
\par                 iSW_Success_Rate_Transcript(r) = 1 - (iSW_Prediction_Transcript(r) + SpreadSheetData(1, r) * iSW_Prediction_Transcript(r) + SpreadSheetData(1, r))
\par             End If
\par 
\par 
\par 
\par 
\par 
\par             iSW_Success_Rate_Transcript(r) = ((iSW_Success_Rate_Transcript(r - 1) * (r - 1)) + iSW_Success_Rate_Transcript(r)) / r
\par 
\par         Next
\par         iSW_Final_Success_Rate = iSW_Success_Rate_Transcript(Rounds)
\par 
\par 
\par 
\par         'Computes iCSW's predictions, scores, and success rates:
\par         Dim iCSW_Prediction_Transcript(Rounds) As Double
\par         Dim iCSW_Score_Transcript(Rounds) As Double
\par         Dim iCSW_Success_Rate_Transcript(Rounds) As Double
\par 
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             Prediction_Begins = 1
\par         Else
\par             iCSW_Prediction_Transcript(1) = -1
\par             iCSW_Score_Transcript(1) = 0.5
\par             iCSW_Success_Rate_Transcript(1) = 0.5
\par             Prediction_Begins = 2
\par             If ABC_Format = 1 Then
\par                 Holder4 = RandomClass.NextDouble()
\par                 If Holder4 > 0.5 Then
\par                     iCSW_Score_Transcript(1) = 1
\par                     iCSW_Success_Rate_Transcript(1) = 1
\par                 Else
\par                     iCSW_Score_Transcript(1) = 0
\par                     iCSW_Success_Rate_Transcript(1) = 0
\par                 End If
\par             End If
\par         End If
\par 
\par         Dim no_pred As Integer = 0
\par 
\par         For r = Prediction_Begins To Rounds
\par             Holder1 = 0
\par             Holder2 = 0
\par             For p = 2 To Players
\par 
\par                 'In_Top Check *************************************************************
\par                 Test_in_Top = 0 'This block determines whether a player is considered.
\par                 If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                     Test_in_Top = 1
\par                 End If
\par 
\par                 If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                     If nonMI_Variants_Validity_Transcript(p, r - 1, 12) > 0.5 And Not SpreadSheetData(p, r) = -1 Then
\par                         Holder1 = Holder1 + (Forced_nonMI_Prediction_Transcript(p, r) * (nonMI_Variants_Validity_Transcript(p, r - 1, 12) - 0.5)) 'numerator
\par                         Holder2 = Holder2 + nonMI_Variants_Validity_Transcript(p, r - 1, 12) - 0.5 'denominator
\par                     End If
\par                 End If
\par 
\par             Next
\par 
\par             If Not Holder2 = 0 Then 'prediction
\par                 iCSW_Prediction_Transcript(r) = Holder1 / Holder2
\par             Else
\par                 iCSW_Prediction_Transcript(r) = 0.5
\par                 No_Prediction_Counter(3) = No_Prediction_Counter(3) + 1
\par             End If
\par 
\par 
\par             If ABC_Format = 1 Then
\par                 If iCSW_Prediction_Transcript(r) > 0.5 + Null_Prediction_Margin Then
\par                     iCSW_Prediction_Transcript(r) = 1
\par                 Else
\par                     If iCSW_Prediction_Transcript(r) < 0.5 - Null_Prediction_Margin Then
\par                         iCSW_Prediction_Transcript(r) = 0
\par                     Else
\par                         Holder4 = RandomClass.NextDouble()
\par                         If Holder4 > 0.5 Then
\par                             iCSW_Prediction_Transcript(r) = 1
\par                         Else
\par                             iCSW_Prediction_Transcript(r) = 0
\par                         End If
\par                     End If
\par                 End If
\par             End If
\par 
\par             If Nat_Scoring = 1 Then
\par                 If SpreadSheetData(1, r) >= iCSW_Prediction_Transcript(r) Then 'linear scoring 
\par                     iCSW_Score_Transcript(r) = 1 - SpreadSheetData(1, r) + iCSW_Prediction_Transcript(r)
\par                 Else
\par                     iCSW_Score_Transcript(r) = 1 - iCSW_Prediction_Transcript(r) + SpreadSheetData(1, r)
\par                 End If
\par             Else
\par                 iCSW_Score_Transcript(r) = 1 - (iCSW_Prediction_Transcript(r) + SpreadSheetData(1, r) * iCSW_Prediction_Transcript(r) + SpreadSheetData(1, r))
\par             End If
\par 
\par 
\par 
\par             iCSW_Success_Rate_Transcript(r) = ((iCSW_Success_Rate_Transcript(r - 1) * (r - 1)) + iCSW_Score_Transcript(r)) / r
\par 
\par         Next
\par 
\par 
\par 
\par         ''The following may be commented out to expedite computation:
\par         ''Computes unforced prediction success rates for each round NonMI variant v (i.e., prediction horizon is v)
\par         'Dim Prediction_Horizon As Integer
\par         'For v = 1 To 11 'Amended for 
\par 
\par         'Prediction_Horizon = 2 ^ (v - 1)
\par 
\par         '    For r = 1 To Rounds
\par         '        For p = 2 To Players
\par 
\par         '            'In_Top Check *************************************************************
\par         '            Test_in_Top = 0 'This block determines whether a player is considered.
\par         '            If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par         '                Test_in_Top = 1
\par         '            End If
\par 
\par         '            If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par         '                Holder1 = 0
\par         '                Holder2 = 0
\par         '                If Prediction_Horizon > r Then
\par         '                    nonMI_Variants_Validity_Transcript(p, r, v) = nonMI_Variants_Validity_Transcript(p, r, 12)
\par         '                Else
\par 
\par         '                    For n = r - Prediction_Horizon + 1 To r
\par         '                        If Not SpreadSheetData(p, n) = -1 Then
\par         '                            Holder1 = nonMI_Score_Transcript(p, n) + Holder1
\par         '                            Holder2 = Holder2 + 1
\par         '                        End If
\par         '                    Next
\par 
\par         '                    If Holder2 > 0 Then
\par         '                        nonMI_Variants_Validity_Transcript(p, r, v) = Holder1 / Holder2
\par         '                    Else
\par         '                        nonMI_Variants_Validity_Transcript(p, r, v) = 0
\par         '                    End If
\par 
\par         '                End If
\par         '            End If
\par 
\par         '        Next
\par         '    Next
\par         'Next
\par 
\par 
\par 
\par         'Computes iAW (and variations) predictions, scores, and success rates:  (Currently set to compute only the version with past window including all events, i.e., For v = 12 To 12.)
\par         Dim iAW_Variants_Prediction_Transcript(Rounds, 12) As Double
\par         Dim iAW_Variants_Score_Transcript(Rounds, 12) As Double
\par         Dim iAW_Variants_Success_Rate_Transcript(Rounds, 12) As Double
\par 
\par         For v = 12 To 12 '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
\par 
\par             If Use_Sample_to_Set_Cue_Validities = 1 Then
\par                 Prediction_Begins = 1
\par             Else
\par                 iAW_Variants_Prediction_Transcript(1, v) = -1
\par                 iAW_Variants_Score_Transcript(1, v) = 0.5
\par                 iAW_Variants_Success_Rate_Transcript(1, v) = 0.5
\par                 Prediction_Begins = 2
\par                 If ABC_Format = 1 Then
\par                     Holder4 = RandomClass.NextDouble()
\par                     If Holder4 > 0.5 Then
\par                         iAW_Variants_Score_Transcript(1, v) = 1
\par                         iAW_Variants_Success_Rate_Transcript(1, v) = 1
\par                     Else
\par                         iAW_Variants_Score_Transcript(1, v) = 0
\par                         iAW_Variants_Success_Rate_Transcript(1, v) = 0
\par                     End If
\par                 End If
\par             End If
\par 
\par             For r = Prediction_Begins To Rounds
\par 
\par                 Holder1 = 0
\par                 Holder2 = 0
\par                 For p = 2 To Players
\par 
\par                     'In_Top Check *************************************************************
\par                     Test_in_Top = 0 'This block determines whether a player is considered.
\par                     If SpreadSheetData(p, Rounds + Sample_Size + 1) <= Top_Num Then
\par                         Test_in_Top = 1
\par                     End If
\par 
\par                     If Test_in_Top = 1 Then 'only consider players whose rank is sufficiently high
\par                         If nonMI_Variants_Validity_Transcript(p, r - 1, v) > iAW_Variants_Success_Rate_Transcript(r - 1, v) And Not SpreadSheetData(p, r) = -1 Then
\par                             Holder1 = Holder1 + (SpreadSheetData(p, r) * (nonMI_Variants_Validity_Transcript(p, r - 1, v) - iAW_Variants_Success_Rate_Transcript(r - 1, v))) 'numerator
\par                             Holder2 = Holder2 + (nonMI_Variants_Validity_Transcript(p, r - 1, v) - iAW_Variants_Success_Rate_Transcript(r - 1, v)) 'denominator
\par                         End If
\par                     End If
\par 
\par                 Next
\par 
\par                 If Not Holder2 = 0 Then 'prediction
\par                     iAW_Variants_Prediction_Transcript(r, v) = Holder1 / Holder2
\par                 Else
\par                     iAW_Variants_Prediction_Transcript(r, v) = 0.5
\par                     No_Prediction_Counter(4) = No_Prediction_Counter(4) + 1
\par                 End If
\par 
\par                 If ABC_Format = 1 Then
\par                     If iAW_Variants_Prediction_Transcript(r, v) > 0.5 + Null_Prediction_Margin Then
\par                         iAW_Variants_Prediction_Transcript(r, v) = 1
\par                     Else
\par                         If iAW_Variants_Prediction_Transcript(r, v) < 0.5 - Null_Prediction_Margin Then
\par                             iAW_Variants_Prediction_Transcript(r, v) = 0
\par                         Else
\par                             Holder4 = RandomClass.NextDouble()
\par                             If Holder4 > 0.5 Then
\par                                 iAW_Variants_Prediction_Transcript(r, v) = 1
\par                             Else
\par                                 iAW_Variants_Prediction_Transcript(r, v) = 0
\par                             End If
\par                         End If
\par                     End If
\par                 End If
\par 
\par 
\par                 If Nat_Scoring = 1 Then
\par                     If SpreadSheetData(1, r) >= iAW_Variants_Prediction_Transcript(r, v) Then 'linear scoring 
\par                         iAW_Variants_Score_Transcript(r, v) = 1 - SpreadSheetData(1, r) + iAW_Variants_Prediction_Transcript(r, v)
\par                     Else
\par                         iAW_Variants_Score_Transcript(r, v) = 1 - iAW_Variants_Prediction_Transcript(r, v) + SpreadSheetData(1, r)
\par                     End If
\par                 Else
\par                     iAW_Variants_Score_Transcript(r, v) = 1 - (iAW_Variants_Prediction_Transcript(r, v) + SpreadSheetData(1, r) * iAW_Variants_Prediction_Transcript(r, v) + SpreadSheetData(1, r))
\par                 End If
\par 
\par 
\par 
\par                 iAW_Variants_Success_Rate_Transcript(r, v) = ((iAW_Variants_Success_Rate_Transcript(r - 1, v) * (r - 1)) + iAW_Variants_Score_Transcript(r, v)) / r
\par 
\par             Next
\par 
\par         Next
\par 
\par         'To ease book keeping:
\par         Dim iAW_Success_Rates_Transcript(Rounds) As Double
\par         For r = 1 To Rounds
\par             iAW_Success_Rates_Transcript(r) = iAW_Variants_Success_Rate_Transcript(r, 12)
\par         Next
\par 
\par 
\par         'Computes ITB's predictions, scores, and success rates
\par         Dim Imitate_the_Best_Prediction_Transcript(Rounds) As Double
\par         Dim Imitate_the_Best_Score_Transcript(Rounds) As Double
\par         Dim Imitate_the_Best_Success_Rate_Transcript(Rounds) As Double
\par         Dim Imitate_the_Best_Favorite_Transcript(Rounds) As Integer
\par 
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             Prediction_Begins = 1
\par             Imitate_the_Best_Favorite_Transcript(0) = Top_nonMI_Player_by_Success(Rounds)
\par         Else
\par             Imitate_the_Best_Prediction_Transcript(1) = -1
\par             Imitate_the_Best_Score_Transcript(1) = 0.5
\par             Imitate_the_Best_Success_Rate_Transcript(1) = 0.5
\par             Imitate_the_Best_Favorite_Transcript(1) = Top_nonMI_Player_by_Success(Rounds)
\par             Prediction_Begins = 2
\par             'If ABC_Format = 1 Then
\par             '    Holder4 = RandomClass.NextDouble()
\par             '    If Holder4 > 0.5 Then
\par             '        Imitate_the_Best_Score_Transcript(1) = 1
\par             '        Imitate_the_Best_Success_Rate_Transcript(1) = 1
\par             '    Else
\par             '        Imitate_the_Best_Score_Transcript(1) = 0
\par             '        Imitate_the_Best_Success_Rate_Transcript(1) = 0
\par             '    End If
\par             'End If
\par         End If
\par 
\par         Dim counterx As Integer = 0
\par 
\par         For r = Prediction_Begins To Rounds
\par 
\par             Holder1 = Imitate_the_Best_Favorite_Transcript(r - 1)
\par             Holder2 = nonMI_Success_Rate_Transcript(Imitate_the_Best_Favorite_Transcript(r - 1), r - 1)
\par             For p = 2 To Players
\par                 If nonMI_Success_Rate_Transcript(p, r - 1) > Holder2 Then
\par                     Holder1 = p
\par                     Holder2 = nonMI_Success_Rate_Transcript(p, r - 1)
\par                 End If
\par             Next
\par             Imitate_the_Best_Favorite_Transcript(r) = Holder1
\par             Imitate_the_Best_Prediction_Transcript(r) = Forced_nonMI_Prediction_Transcript(Holder1, r)
\par 
\par 
\par             If Imitate_the_Best_Prediction_Transcript(r) = 0.5 Then
\par                 counterx = counterx + 1
\par             End If
\par 
\par             If ABC_Format = 1 Then
\par 
\par                 'Holder4 = RandomClass.NextDouble()
\par                 'If Holder4 <= Imitate_the_Best_Prediction_Transcript(r) Then
\par                 '    Imitate_the_Best_Prediction_Transcript(r) = 1
\par                 'Else
\par                 '    Imitate_the_Best_Prediction_Transcript(r) = 0
\par                 'End If
\par 
\par                 If Imitate_the_Best_Prediction_Transcript(r) > 0.5 + Null_Prediction_Margin Then
\par                     Imitate_the_Best_Prediction_Transcript(r) = 1
\par                 Else
\par                     If Imitate_the_Best_Prediction_Transcript(r) < 0.5 - Null_Prediction_Margin Then
\par                         Imitate_the_Best_Prediction_Transcript(r) = 0
\par                     Else
\par                         'Holder4 = RandomClass.NextDouble()
\par                         'If Holder4 > 0.5 Then
\par                         '    Imitate_the_Best_Prediction_Transcript(r) = 1
\par                         'Else
\par                         '    Imitate_the_Best_Prediction_Transcript(r) = 0
\par                         'End If
\par                         Imitate_the_Best_Prediction_Transcript(r) = 0.5
\par                     End If
\par                 End If
\par             End If
\par 
\par             If Nat_Scoring = 1 Then
\par                 If SpreadSheetData(1, r) >= Imitate_the_Best_Prediction_Transcript(r) Then 'linear scoring 
\par                     Imitate_the_Best_Score_Transcript(r) = 1 - SpreadSheetData(1, r) + Imitate_the_Best_Prediction_Transcript(r)
\par                 Else
\par                     Imitate_the_Best_Score_Transcript(r) = 1 - Imitate_the_Best_Prediction_Transcript(r) + SpreadSheetData(1, r)
\par                 End If
\par             Else
\par                 Imitate_the_Best_Score_Transcript(r) = 1 - (Math.Abs(SpreadSheetData(1, r) - Imitate_the_Best_Prediction_Transcript(r)) * Math.Abs(SpreadSheetData(1, r) - Imitate_the_Best_Prediction_Transcript(r)))
\par             End If
\par 
\par 
\par             Imitate_the_Best_Success_Rate_Transcript(r) = ((Imitate_the_Best_Success_Rate_Transcript(r - 1) * (r - 1)) + Imitate_the_Best_Score_Transcript(r)) / r
\par 
\par         Next
\par 
\par 
\par 
\par         'Computes unforced prediction imitate-the-best predictions, scores, and success rates
\par         Dim TTB_Prediction_Transcript(Rounds) As Double
\par         Dim TTB_Score_Transcript(Rounds) As Double
\par         Dim TTB_Success_Rate_Transcript(Rounds) As Double
\par         Dim TTB_Favorite_Transcript(Rounds) As Integer
\par 
\par         If Use_Sample_to_Set_Cue_Validities = 1 Then
\par             Prediction_Begins = 1
\par             TTB_Favorite_Transcript(0) = 2 'Top_UnForced_nonMI_Player(Rounds)
\par         Else
\par             TTB_Prediction_Transcript(1) = -1
\par             TTB_Score_Transcript(1) = 0.5
\par             TTB_Success_Rate_Transcript(1) = 0.5
\par             TTB_Favorite_Transcript(1) = 2 'Top_UnForced_nonMI_Player(Rounds)
\par             Prediction_Begins = 2
\par             If ABC_Format = 1 Then
\par                 Holder4 = RandomClass.NextDouble()
\par                 If Holder4 > 0.5 Then
\par                     TTB_Score_Transcript(1) = 1
\par                     TTB_Success_Rate_Transcript(1) = 1
\par                 Else
\par                     TTB_Score_Transcript(1) = 0
\par                     TTB_Success_Rate_Transcript(1) = 0
\par                 End If
\par             End If
\par         End If
\par 
\par         Holder1 = 2
\par         Holder2 = 0
\par         For r = Prediction_Begins To Rounds
\par 
\par             If Not SpreadSheetData(Holder1, r) = -1 Then
\par                 Holder1 = TTB_Favorite_Transcript(r - 1)
\par                 Holder2 = nonMI_Variants_Validity_Transcript(TTB_Favorite_Transcript(r - 1), r - 1, 12)
\par             Else
\par                 Holder1 = 2
\par                 Holder2 = 0
\par             End If
\par 
\par             For p = 2 To Players
\par                 If nonMI_Variants_Validity_Transcript(p, r - 1, 12) > Holder2 And Not SpreadSheetData(p, r) = -1 Then
\par                     Holder1 = p
\par                     Holder2 = nonMI_Variants_Validity_Transcript(p, r - 1, 12)
\par                 End If
\par             Next
\par             TTB_Favorite_Transcript(r) = Holder1
\par             TTB_Prediction_Transcript(r) = Forced_nonMI_Prediction_Transcript(Holder1, r)
\par 
\par             If ABC_Format = 1 Then
\par                 If TTB_Prediction_Transcript(r) > 0.5 + Null_Prediction_Margin Then
\par                     TTB_Prediction_Transcript(r) = 1
\par                 Else
\par                     If TTB_Prediction_Transcript(r) < 0.5 - Null_Prediction_Margin Then
\par                         TTB_Prediction_Transcript(r) = 0
\par                     Else
\par                         Holder4 = RandomClass.NextDouble()
\par                         If Holder4 > 0.5 Then
\par                             TTB_Prediction_Transcript(r) = 1
\par                         Else
\par                             TTB_Prediction_Transcript(r) = 0
\par                         End If
\par                     End If
\par                 End If
\par             End If
\par 
\par             If Nat_Scoring = 1 Then
\par                 If SpreadSheetData(1, r) >= TTB_Prediction_Transcript(r) Then 'linear scoring 
\par                     TTB_Score_Transcript(r) = 1 - SpreadSheetData(1, r) + TTB_Prediction_Transcript(r)
\par                 Else
\par                     TTB_Score_Transcript(r) = 1 - TTB_Prediction_Transcript(r) + SpreadSheetData(1, r)
\par                 End If
\par             Else
\par                 TTB_Score_Transcript(r) = 1 - (TTB_Prediction_Transcript(r) + SpreadSheetData(1, r) * TTB_Prediction_Transcript(r) + SpreadSheetData(1, r))
\par             End If
\par 
\par             TTB_Success_Rate_Transcript(r) = ((TTB_Success_Rate_Transcript(r - 1) * (r - 1)) + TTB_Score_Transcript(r)) / r
\par 
\par         Next
\par 
\par 
\par 
\par         'This block ranks players by their success rates: 
\par         Dim nonMI_Success_Rate_Rank(Players) As Integer 'Returns the rank of nonMI player n ( n in \{2, ..., Players\}
 ). For example, nonMI_Success_Rate_Rank(10) returns the rank of the player named "10", i.e., 10th on list, where event sequence is first on list.
\par         For p = 1 To Players - 1 'runs thru the ranks
\par             Holder1 = -1000000
\par             For x = 2 To Players 'runs thru the players
\par                 test = 0
\par                 For y = 1 To p - 1 'runs thru the ranked so far
\par                     If nonMI_Success_Rate_Rank(x) = y Then
\par                         test = 1
\par                     End If
\par                 Next
\par                 If test = 0 Then
\par                     If Duplicate_nonMI_Success_Rate_Transcript(x, Rounds) > Holder1 Then
\par                         Holder1 = Duplicate_nonMI_Success_Rate_Transcript(x, Rounds)
\par                         Holder2 = x
\par                     End If
\par                     If p = Players - 1 Then 'worst player is lowest ranked
\par                         Holder2 = x
\par                     End If
\par                 End If
\par             Next
\par             nonMI_Success_Rate_Rank(Holder2) = p
\par         Next
\par 
\par 
\par         'The following sub-routine computes a function that returns the player of rank x:
\par         Dim nonMI_player_of_Rank_x_Success_Rate(Players) As Integer 'Returns the number (i.e., name) of the xth most successful nonMI player. For example, nonMI_player_of_Rank_x_Success_Rate(1) returns the number of the top player.
\par         For p = 2 To Players
\par             For rank = 1 To Players - 1
\par                 If nonMI_Success_Rate_Rank(p) = rank Then
\par                     nonMI_player_of_Rank_x_Success_Rate(rank) = p
\par                 End If
\par             Next
\par         Next
\par 
\par 
\par         'Dim nonMI_Valdity_Rank(Players) As Integer 'Assigns a rank to each player. For example, nonMI_Valdity_Rank(3) = 10 means that the third player is the 10th most successful.
\par         ''This block ranks players by success rates
\par         'For p = 1 To Players - 1 'runs thru the ranks
\par         '    Holder1 = -1000000
\par         '    For x = 2 To Players 'runs thru the players
\par         '        test = 0
\par         '        For y = 1 To p - 1 'runs thru the ranked so far
\par         '            If nonMI_Valdity_Rank(x) = y Then
\par         '                test = 1
\par         '            End If
\par         '        Next
\par         '        If test = 0 Then
\par         '            If Final_nonMI_Validities(x) > Holder1 Then '* Number_of_Predictions_Made(x)
\par         '                Holder1 = Final_nonMI_Validities(x)  '* Number_of_Predictions_Made(x)
\par         '                Holder2 = x
\par         '            End If
\par         '            If p = Players - 1 Then 'worst player is lowest ranked
\par         '                Holder2 = x
\par         '            End If
\par         '        End If
\par         '    Next
\par         '    nonMI_Valdity_Rank(Holder2) = p
\par         'Next
\par 
\par 
\par         ' ''Ranks players by number of predictions they made:
\par         'Dim Num_of_Predictions_Rank(Players) As Integer
\par         'For p = 1 To Players - 1 'Ranks by number of predictions 
\par         '    Holder1 = -1000000
\par         '    For x = 2 To Players 'runs thru the players
\par         '        test = 0
\par         '        For y = 1 To p - 1 'runs thru the ranked so far
\par         '            If Num_of_Predictions_Rank(x) = y Then
\par         '                test = 1
\par         '            End If
\par         '        Next
\par         '        If test = 0 Then
\par         '            If Number_of_Predictions_Made(x) > Holder1 Then
\par         '                Holder1 = Number_of_Predictions_Made(x)
\par         '                Holder2 = x
\par         '            End If
\par         '            If p = Players - 1 Then 'worst player is lowest ranked
\par         '                Holder2 = x
\par         '            End If
\par         '        End If
\par         '    Next
\par         '    Num_of_Predictions_Rank(Holder2) = p
\par         'Next
\par 
\par 
\par         ''Ranks players by number of predictions they made:
\par         'Dim Few_Predictions_Rank(Players) As Integer
\par         'For p = 1 To Players - 1 'Ranks by number of predictions 
\par         '    Holder1 = 1000000
\par         '    For x = 2 To Players 'runs thru the players
\par         '        test = 0
\par         '        For y = 1 To p - 1 'runs thru the ranked so far
\par         '            If Few_Predictions_Rank(x) = y Then
\par         '                test = 1
\par         '            End If
\par         '        Next
\par         '        If test = 0 Then
\par         '            If Number_of_Predictions_Made(x) < Holder1 Then
\par         '                Holder1 = Number_of_Predictions_Made(x)
\par         '                Holder2 = x
\par         '            End If
\par         '            If p = Players - 1 Then 
\par         '                Holder2 = x
\par         '            End If
\par         '        End If
\par         '    Next
\par         '    Few_Predictions_Rank(Holder2) = p
\par         'Next
\par 
\par 
\par         'The following prints details  of the game into the open EXCEL spreadsheet (and can be modified):
\par         For r = 1 To Rounds
\par 
\par             objApp.Cells(1, 1) = "Top_nonMI_Success_Rate"
\par             objApp.Cells(1, r + 1) = Top_nonMI_Success_Rate(r)
\par 
\par             objApp.Cells(2, 1) = "Success_Rate_Transcript of the Top finishing nonMI Player"
\par             objApp.Cells(2, r + 1) = Duplicate_nonMI_Success_Rate_Transcript(nonMI_player_of_Rank_x_Success_Rate(1), r)
\par 
\par 
\par             objApp.Cells(3, 1) = "Imitate_the_Best_Success_Rate_Transcript"
\par             objApp.Cells(3, r + 1) = Imitate_the_Best_Success_Rate_Transcript(r)
\par 
\par             objApp.Cells(4, 1) = "LRW_Success_Rate_Transcript"
\par             objApp.Cells(4, r + 1) = AW_Success_Rate_Transcript(r)
\par 
\par             objApp.Cells(5, 1) = "ERW_Success_Rate_Transcript"
\par             objApp.Cells(5, r + 1) = eAW_Success_Rate_Transcript(r)
\par 
\par             objApp.Cells(6, 1) = "Top_nonMI_Player_by_Success"
\par             objApp.Cells(6, r + 1) = Top_nonMI_Player_by_Success(r)
\par 
\par 
\par             objApp.Cells(7, 1) = ""
\par             objApp.Cells(7, r + 1) = ""
\par 
\par             objApp.Cells(8, 1) = ""
\par             objApp.Cells(8, r + 1) = ""
\par 
\par             objApp.Cells(9, 1) = ""
\par             objApp.Cells(9, r + 1) = ""
\par 
\par             objApp.Cells(10, 1) = ""
\par             objApp.Cells(10, r + 1) = ""
\par 
\par             objApp.Cells(11, 1) = ""
\par             objApp.Cells(11, r + 1) = ""
\par 
\par             objApp.Cells(12, 1) = ""
\par             objApp.Cells(12, r + 1) = ""
\par 
\par         Next
\par 
\par 
\par     End Sub
\par 
\par 
\par     Private Function Normal(Optional ByVal Sigma As Double = 1, Optional ByVal Mean As Double = 0) As Double
\par         Normal = GetGausse() * Sigma + Mean
\par     End Function
\par 
\par     Private Function GetGausse() As Double 'generates a value with Gaussian distribution (mean = 0, sd = 1) via Box-Muller Transformation. 
\par         RandomNumber = RandomClass.NextDouble()
\par         RandomNumber2 = RandomClass.NextDouble()
\par         Return Sqrt(Log(RandomNumber) * -2) * Cos(2 * RandomNumber2 * 3.14159265)
\par     End Function
\par 
\par     Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
\par 
\par     End Sub
\par End Class}{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid12133299 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100aa5225dfc60600008b1a0000160000007468656d652f7468656d652f
7468656d65312e786d6cec595d8bdb46147d2ff43f08bd3bfe92fcb1c41b6cd9ceb6d94d42eca4e4716c8fadc98e344633de8d0981923c160aa569e943037deb
43691b48a02fe9afd936a54d217fa17746b63c638fbb9b2585a5640d8b343af7ce997bafce1d4997afdc8fa87384134e58dc708b970aae83e3211b9178d2706f
f7bbb99aeb7081e211a22cc60d778eb97b65f7c30f2ea31d11e2083b601ff31dd4704321a63bf93c1fc230e297d814c7706dcc920809384d26f951828ec16f44
f3a542a1928f10895d274611b8bd311e932176fad2a5bbbb74dea1701a0b2e078634e949d7d8b050d8d1615122f89c0734718e106db830cf881df7f17de13a14
7101171a6e41fdb9f9ddcb79b4b330a2628bad66d7557f0bbb85c1e8b0a4e64c26836c52cff3bd4a33f3af00546ce23ad54ea553c9fc29001a0e61a52917dda7
dfaab7dafe02ab81d2438bef76b55d2e1a78cd7f798373d3973f03af40a97f6f03dfed06104503af4029dedfc07b5eb51478065e81527c65035f2d34db5ed5c0
2b5048497cb8812ef89572b05c6d061933ba6785d77daf5b2d2d9caf50500d5975c929c62c16db6a2d42f758d2058004522448ec88f9148fd110aa3840940c12
e2ec93490885374531e3305c2815ba8532fc973f4f1da988a01d8c346bc90b98f08d21c9c7e1c3844c45c3fd18bcba1ae4cdcb1fdfbc7cee9c3c7a71f2e89793
c78f4f1efd9c3a32acf6503cd1ad5e7fffc5df4f3f75fe7afeddeb275fd9f15cc7fffed367bffdfaa51d082b5d85e0d5d7cffe78f1ecd5379ffff9c3130bbc99
a0810eef930873e73a3e766eb10816a6426032c783e4ed2cfa2122ba45339e701423398bc57f478406fafa1c5164c1b5b019c13b09488c0d787576cf20dc0b93
9920168fd7c2c8001e30465b2cb146e19a9c4b0b737f164fec9327331d770ba123dbdc018a8dfc766653d05662731984d8a07993a258a0098eb170e4357688b1
6575770931e27a408609e36c2c9cbbc46921620d499f0c8c6a5a19ed9108f232b711847c1bb139b8e3b418b5adba8d8f4c24dc15885ac8f73135c27815cd048a
6c2efb28a27ac0f791086d247bf364a8e33a5c40a6279832a733c29cdb6c6e24b05e2de9d7405eec693fa0f3c84426821cda7cee23c674649b1d06218aa6366c
8fc4a18efd881f428922e7261336f80133ef10790e7940f1d674df21d848f7e96a701b9455a7b42a107965965872791533a37e7b733a4658490d08bfa1e71189
4f15f73559f7ff5b5907217df5ed53cbaa2eaaa0371362bda3f6d6647c1b6e5dbc03968cc8c5d7ee369ac53731dc2e9b0decbd74bf976ef77f2fdddbeee7772f
d82b8d06f9965bc574abae36eed1d67dfb9850da13738af7b9daba73e84ca32e0c4a3bf5cc8ab3e7b8690887f24e86090cdc2441cac64998f88488b017a229ec
ef8bae7432e10bd713ee4c19876dbf1ab6fa96783a8b0ed8287d5c2d16e5a3692a1e1c89d578c1cfc6e15143a4e84a75f50896b9576c27ea51794940dabe0d09
6d329344d942a2ba1c9441520fe610340b09b5b277c2a26e615193ee97a9da6001d4b2acc0d6c9810d57c3f53d30012378a242148f649ed2542fb3ab92f92e33
bd2d984605c03e625901ab4cd725d7adcb93ab4b4bed0c99364868e566925091513d8c87688417d52947cf42e36d735d5fa5d4a02743a1e683d25ad1a8d6fe8d
c579730d76ebda40635d2968ec1c37dc4ad9879219a269c31dc3633f1c4653a81d2eb7bc884ee0ddd95024e90d7f1e6599265cb4110fd3802bd149d520220227
0e2551c395cbcfd24063a5218a5bb104827061c9d541562e1a3948ba99643c1ee3a1d0d3ae8dc848a7a7a0f0a95658af2af3f383a5259b41ba7be1e8d819d059
720b4189f9d5a20ce0887078fb534ca33922f03a3313b255fdad35a685eceaef13550da5e3884e43b4e828ba98a77025e5191d7596c5403b5bac1902aa8564d1
080713d960f5a01add34eb1a2987ad5df7742319394d34573dd35015d935ed2a66ccb06c036bb13c5f93d7582d430c9aa677f854bad725b7bed4bab57d42d625
20e059fc2c5df70c0d41a3b69acca026196fcab0d4ecc5a8d93b960b3c85da599a84a6fa95a5dbb5b8653dc23a1d0c9eabf383dd7ad5c2d078b9af549156df3d
f44f136c700fc4a30d2f81675470954af8f09020d810f5d49e24950db845ee8bc5ad0147ce2c210df741c16f7a41c90f72859adfc97965af90abf9cd72aee9fb
e562c72f16daadd243682c228c8a7efacda50bafa2e87cf1e5458d6f7c7d89966fdb2e0d599467eaeb4a5e11575f5f8aa5ed5f5f1c02a2f3a052ead6cbf55625
572f37bb39afddaae5ea41a5956b57826abbdb0efc5abdfbd0758e14d86b9603afd2a9e52ac520c8799582a45fabe7aa5ea9d4f4aacd5ac76b3e5c6c6360e5a9
7c2c6201e155bc76ff010000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f
7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be
9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980
ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5b
babac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c0200001300000000000000000000000000000000005b436f6e74656e
745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f
2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000190200007468656d652f7468656d652f74
68656d654d616e616765722e786d6c504b01022d0014000600080000002100aa5225dfc60600008b1a00001600000000000000000000000000d6020000746865
6d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b0100002700000000000000000000000000d00900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000cb0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax371\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef0{\lsdlockedexcept \lsdqformat1 \lsdlocked0 Normal;\lsdqformat1 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 caption;\lsdqformat1 \lsdlocked0 Title;
\lsdqformat1 \lsdlocked0 Subtitle;\lsdqformat1 \lsdlocked0 Strong;\lsdqformat1 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdpriority99 \lsdlocked0 Placeholder Text;\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdpriority65 \lsdlocked0 Medium List 1;
\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;\lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdpriority62 \lsdlocked0 Light Grid Accent 1;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdpriority99 \lsdlocked0 Revision;
\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e50000000000000000000000001019
797ffeecd701feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}