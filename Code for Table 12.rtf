{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff0\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1031\deflangfe1031\themelang1031\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f45\fbidi \fmodern\fcharset0\fprq1{\*\panose 020b0609020204030204}Consolas;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0302020204030204}Calibri Light;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f46\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f47\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f49\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f50\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f51\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f52\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f53\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f54\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f66\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f67\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f69\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f70\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f71\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f72\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f73\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f74\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f66\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f67\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f69\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f70\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f71\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f72\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f73\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f74\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f496\fbidi \fmodern\fcharset238\fprq1 Consolas CE;}{\f497\fbidi \fmodern\fcharset204\fprq1 Consolas Cyr;}
{\f499\fbidi \fmodern\fcharset161\fprq1 Consolas Greek;}{\f500\fbidi \fmodern\fcharset162\fprq1 Consolas Tur;}{\f503\fbidi \fmodern\fcharset186\fprq1 Consolas Baltic;}{\f504\fbidi \fmodern\fcharset163\fprq1 Consolas (Vietnamese);}
{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri Light CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Light Cyr;}
{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Light Greek;}{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Light Tur;}{\fhimajor\f31533\fbidi \fswiss\fcharset177\fprq2 Calibri Light (Hebrew);}
{\fhimajor\f31534\fbidi \fswiss\fcharset178\fprq2 Calibri Light (Arabic);}{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Light Baltic;}{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri Light (Vietnamese);}
{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31573\fbidi \fswiss\fcharset177\fprq2 Calibri (Hebrew);}{\fhiminor\f31574\fbidi \fswiss\fcharset178\fprq2 Calibri (Arabic);}{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}
{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green176\blue80;}{\*\defchp }{\*\defpap \ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }
\noqfpromote {\stylesheet{\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs24\alang1025 \ltrch\fcs0 \fs24\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 \snext0 \sqformat \spriority0 Normal;}{\*
\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs20\alang1025 \ltrch\fcs0 \fs20\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 \snext11 \ssemihidden \sunhideused Normal Table;}{
\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 \f45\fs21\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 \sbasedon0 \snext15 \slink16 \spriority0 \styrsid11013529 
Plain Text;}{\*\cs16 \additive \rtlch\fcs1 \af0\afs21 \ltrch\fcs0 \f45\fs21 \sbasedon10 \slink15 \slocked \spriority0 \styrsid11013529 Nur Text Zchn;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid137847\rsid201765\rsid282756\rsid329567\rsid545605\rsid875983\rsid998865\rsid1012666
\rsid1079702\rsid1186914\rsid1187558\rsid1210323\rsid1379773\rsid1397456\rsid1402677\rsid1458918\rsid1657607\rsid1716039\rsid1920351\rsid2171971\rsid2450779\rsid2566317\rsid2639395\rsid2709274\rsid2883584\rsid2889805\rsid2954327\rsid2980729\rsid3090963
\rsid3098676\rsid3155038\rsid3358091\rsid3360257\rsid3424994\rsid3438939\rsid3440572\rsid3496379\rsid3496729\rsid3608540\rsid3813628\rsid3825170\rsid3963763\rsid4029312\rsid4074728\rsid4083796\rsid4262738\rsid4287694\rsid4416945\rsid4465477\rsid4479936
\rsid4532565\rsid4535590\rsid4551512\rsid4589506\rsid4613223\rsid4741630\rsid4927341\rsid4996566\rsid5136470\rsid5191541\rsid5195352\rsid5388715\rsid5643276\rsid5724249\rsid5786944\rsid5835967\rsid5968245\rsid5969036\rsid5982360\rsid6162926\rsid6166058
\rsid6176082\rsid6190352\rsid6362924\rsid6364577\rsid6433188\rsid6502697\rsid6632644\rsid6635347\rsid6773162\rsid6778264\rsid6821690\rsid6833870\rsid6977765\rsid7013080\rsid7168019\rsid7372597\rsid7413415\rsid7544151\rsid7756367\rsid7812302\rsid7880272
\rsid8012932\rsid8284120\rsid8482517\rsid8608084\rsid8683301\rsid8717971\rsid8747016\rsid8791328\rsid8938124\rsid9052799\rsid9057667\rsid9400825\rsid9448165\rsid9518021\rsid9664352\rsid9780539\rsid9782442\rsid9852053\rsid9927085\rsid9966034\rsid9967546
\rsid9987885\rsid10027220\rsid10034115\rsid10241298\rsid10245498\rsid10432447\rsid10436233\rsid10437813\rsid10499346\rsid10507949\rsid10758690\rsid10775448\rsid10836641\rsid10891252\rsid10894412\rsid11013529\rsid11172405\rsid11218417\rsid11274652
\rsid11367522\rsid11627947\rsid11758734\rsid11819092\rsid11862215\rsid11873673\rsid11877205\rsid12020922\rsid12068694\rsid12075594\rsid12085799\rsid12145584\rsid12211182\rsid12218911\rsid12280048\rsid12394241\rsid12547716\rsid12789208\rsid13064829
\rsid13119477\rsid13121319\rsid13240905\rsid13388970\rsid13456105\rsid13501532\rsid13521221\rsid13528419\rsid13633541\rsid13783138\rsid13789258\rsid13848946\rsid13857606\rsid13897917\rsid13923016\rsid13967962\rsid13978108\rsid14030984\rsid14101533
\rsid14162425\rsid14186245\rsid14302041\rsid14433429\rsid14437351\rsid14769836\rsid14822470\rsid14842639\rsid14895016\rsid14905876\rsid15078625\rsid15084164\rsid15085326\rsid15208560\rsid15236935\rsid15341357\rsid15351618\rsid15414212\rsid15495668
\rsid15674585\rsid15738252\rsid15860003\rsid15929632\rsid15937999\rsid15939874\rsid16022663\rsid16069708\rsid16137513\rsid16138115\rsid16479115\rsid16606392\rsid16611029\rsid16737148}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1
\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author Windows-Benutzer}{\operator Windows-Benutzer}{\creatim\yr2021\mo12\dy9\hr14\min14}{\revtim\yr2021\mo12\dy9\hr14\min14}{\version3}{\edmins0}{\nofpages71}{\nofwords23652}
{\nofchars149011}{\*\company Philosophische Fakultaet HHUD}{\nofcharsws172319}{\vern57451}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/office/word/2003/wordml}}\paperw11906\paperh16838\margl1334\margr1335\margt1417\margb1134\gutter0\ltrsect 
\deftab708\widowctrl\ftnbj\aenddoc\hyphhotz425\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata0\grfdocevents0\validatexml1\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0
\showxmlerrors1\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1334\dgvorigin1417\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct
\asianbrkrule\nojkernpunct\rsidroot2883584\newtblstyruls\nogrowautofit\usenormstyforlist\noindnmbrts\felnbrelev\nocxsptable\indrlsweleven\noafcnsttbl\afelev\utinl\hwelev\spltpgpar\notcvasp\notbrkcnstfrctbl\notvatxbx\krnprsnet\cachedcolbal 
\nouicompat \fet0{\*\wgrffmtfilter 013f}\nofeaturethrottle1\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\headery708\footery708\colsx708\endnhere\sectlinegrid360\sectdefaultcl\sectrsid11013529\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang 
{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}
{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9
\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\s15\ql \li0\ri0\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid11013529 \rtlch\fcs1 \af0\afs21\alang1025 \ltrch\fcs0 
\f45\fs21\lang1031\langfe1031\cgrid\langnp1031\langfenp1031 {\rtlch\fcs1 \af2 \ltrch\fcs0 \b\f2\cf17\insrsid3358865\charrsid11274652 'This program was used to compute the predictions, success rates, etc. for the CGG data set.
\par 
\par 'The code is currently set up to generate the data for Figures Table 12, of the the paper "Escaping the No Free Lunch Theorem: A Priori
\par 'Advantages of Regret-Based Meta-Induction". (Switch the variable Nat_Scoring to 0 to generate the data for Figure 4.) 
\par 
\par 'The code can be pasted into a newly created Windows Form Application. One just needs to add two buttons, and the appropriate references. 
\par 'To add references select "PROJECT" tab, and then select "Add Reference". Add: System.Numerics, and Microsoft Excel 15.0 Object Library.
\par 
\par 'The code needs to be modified according to the size of the data set used, by setting Cues to the actual number of cues plus 1, and Objects to the actual number of objects.
\par 
\par 'The variable Quadratic_Scoring may be set to 1. The default is 0, natural (linear) scoring.
\par 
\par 'Upon executing program, press the first button to open an Excel spreadsheet, then paste the relevant data into the spreadsheet, 
\par 'then press button 2.
\par 
\par 'Data format for spreadsheet: First row of the data set contains the the criterion values for the objects in the data set. Subsequent rows are the cue values. 
\par 
\par 'The program 'prints' data back into the spreadsheet. This can be modified, i.e., what data is printed.
\par 
\par 'Numerous parameters can be adjusted, at the top of the program. 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid3358865\charrsid11013529 
\par Imports Microsoft.Office.Interop
\par Imports System.Numerics
\par 
\par Public Class Form1
\par     Dim objApp As Excel.Application
\par     Dim objBook As Excel._Workbook
\par     Dim Objects As Integer = 32
\par     Dim Cues As Integer = 4 'number of cues, plus one. plus one q is the true
\par     Dim Object_Pairs As Integer = (Objects * (Objects - 1)) / 2
\par 
\par     Dim Rounds_Played As Integer = 100 'Object_Pairs
\par     Dim New_Round_Count As Integer = Rounds_Played 'Rounds_Played
\par 
\par     Dim Number_of_Games As Integer = 100
\par 
\par     Dim Binary_Prediction As Integer = 0
\par 
\par     Dim Quadratic_Scoring As Integer = 1
\par 
\par     Dim Game_Ends_At(Number_of_Games) As Integer
\par 
\par     Dim Total_Rounds As Integer
\par 
\par     Dim EAW_EXP As Double
\par     Dim EAW_Holder As Double
\par 
\par     Dim MLR_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim pTTB_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim iTTB_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim Minimalist_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim Dawes_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim pAW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim iAW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim pSW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim iSW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim v1pAW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim v2pAW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim v3pAW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim v4pAW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim v5pAW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim v6pAW_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim v7pAW_Avg_at_Term_Score(Rounds_Played) As Double
\par 
\par     Dim epAW_Avg_at_Term_Score(Rounds_Played) As Double
\par 
\par     Dim TopCue_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim Second_Avg_at_Term_Score(Rounds_Played) As Double
\par     Dim Third_Avg_at_Term_Score(Rounds_Played) As Double
\par 
\par     Dim Cue_Object_Matrix(Objects, Cues) As Double
\par     Dim Cue_Object_Pair_Matrix(Object_Pairs, Cues) As Double
\par     Dim Cue_Object_Pair_Matrix_Tracker(Object_Pairs, 2) As Integer
\par 
\par     Dim Extended_Cue_Object_Pair_Matrix(Rounds_Played, Cues) As Double
\par     Dim Extended_Cue_Object_Pair_Matrix_Tracker(Rounds_Played, 2) As Integer
\par 
\par     Dim Cue_Object_Sub_Matrix(Objects, Cues) As Double
\par     Dim Cue_Object_Sub_Matrix_Size As Integer
\par 
\par     Dim Cue_Order(Rounds_Played, Cues) As Integer
\par     Dim Cues_Was_Ordered(Cues) As Integer
\par     Dim Random_Cue_Order(Rounds_Played, Cues) As Integer
\par     Dim Cue_Order2(Rounds_Played, Cues) As Integer
\par 
\par     Dim Objects_Seen(Rounds_Played) As Integer
\par     Dim Avg_Objects_Seen As Integer
\par 
\par     Dim Estimator(Cues) As Double
\par 
\par     Dim Estimation_Failed_Test As Integer
\par 
\par     Dim With_Online_Learning As Integer = 1
\par     Dim Cross_Validate As Integer = 0
\par 
\par     Dim succ_count As Integer = 0
\par 
\par     Dim Cues_Accessed_Matrix(16, Cues) As Integer '1 = MLR, 2 = Daws, 3 = Min, 4 = pTTB, 5 = iTTB, 6 = pSW, 7 = iSW, 8 = pAW, 9 = iAW, 10 = v1pAW, 11 = v2pAW, 12 = v3pAW, 13 = v4pAW, 13 = v5pAW, 
\par 
\par     Dim Cue_Predictions(Rounds_Played, Cues) As Double 'Prediction made (or non-prediction = -1)
\par     Dim Cue_Num_of_Predictions(Rounds_Played, Cues) As Double 'Number of actual predictions
\par     Dim Cue_Raw_Score_at_a_Round(Rounds_Played, Cues) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim Cue_Adjusted_Score_at_a_Round(Rounds_Played, Cues) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim Cue_Avg_Score_as_of_Round(Rounds_Played, Cues) As Double 'Adjusted_Score divided by rounds so far
\par     Dim Cue_Validity_as_of_Round(Rounds_Played, Cues) As Double 'Raw_Score divided by number of actual predictions so far
\par 
\par     Dim MLR_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim MLR_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim MLR_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim MLR_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim MLR_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim MLR_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim MLR_Frugality As Double = 0
\par 
\par     Dim Dawes_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim Dawes_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim Dawes_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim Dawes_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim Dawes_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim Dawes_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim Dawes_Accuracy_as_of_Round(Rounds_Played) As Double
\par     Dim Dawes_Frugality As Double = 0
\par 
\par     Dim Minimalist_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim Minimalist_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim Minimalist_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim Minimalist_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim Minimalist_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim Minimalist_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim Minimalist_Accuracy_as_of_Round(Rounds_Played) As Double
\par     Dim Minimalist_Frugality As Double = 0
\par 
\par     Dim pTTB_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim pTTB_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim pTTB_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim pTTB_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim pTTB_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim pTTB_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim pTTB_Accuracy_as_of_Round(Rounds_Played) As Double
\par     Dim pTTB_Frugality As Double = 0
\par     Dim pTTB_Temp_Frugality As Double = 0
\par 
\par     Dim iTTB_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim iTTB_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim iTTB_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim iTTB_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim iTTB_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim iTTB_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim iTTB_Accuracy_as_of_Round(Rounds_Played) As Double
\par     Dim iTTB_Frugality As Double = 0
\par     Dim iTTB_Temp_Frugality As Double = 0
\par 
\par     Dim pSW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim pSW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim pSW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim pSW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim pSW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim pSW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim pSW_Accuracy_as_of_Round(Rounds_Played) As Double
\par     Dim pSW_Frugality As Double = 0
\par 
\par     Dim iSW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim iSW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim iSW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim iSW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim iSW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim iSW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim iSW_Accuracy_as_of_Round(Rounds_Played) As Double
\par     Dim iSW_Frugality As Double = 0
\par 
\par     Dim pAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim pAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim pAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim pAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim pAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim pAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim pAW_Frugality As Double = 0
\par 
\par     Dim epAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim epAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim epAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim epAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim epAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim epAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim epAW_Frugality As Double = 0
\par 
\par 
\par     Dim iAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim iAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim iAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim iAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim iAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim iAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim iAW_Frugality As Double = 0
\par     Dim iAW_reverts_to_FR_Count As Integer
\par 
\par     Dim v1pAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim v1pAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim v1pAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim v1pAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim v1pAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim v1pAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim v1pAW_Frugality As Double = 0
\par 
\par     Dim v2pAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim v2pAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim v2pAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim v2pAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim v2pAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim v2pAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim v2pAW_Frugality As Double = 0
\par 
\par     Dim v3pAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim v3pAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim v3pAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim v3pAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim v3pAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim v3pAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim v3pAW_Frugality As Double = 0
\par 
\par     Dim v4pAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim v4pAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim v4pAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim v4pAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim v4pAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim v4pAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim v4pAW_Frugality As Double = 0
\par 
\par     Dim v5pAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim v5pAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim v5pAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim v5pAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim v5pAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim v5pAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim v5pAW_Frugality As Double = 0
\par 
\par     Dim v6pAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim v6pAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim v6pAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim v6pAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim v6pAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim v6pAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim v6pAW_Frugality As Double = 0
\par 
\par     Dim v7pAW_Predictions(Rounds_Played) As Double 'Prediction made (or non-prediction = -1)
\par     Dim v7pAW_Num_of_Predictions(Rounds_Played) As Double 'Number of actual predictions
\par     Dim v7pAW_Raw_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0
\par     Dim v7pAW_Adjusted_Score_at_a_Round(Rounds_Played) As Double 'Score earned for actual predictions, and non-predictions = 0.5
\par     Dim v7pAW_Avg_Score_as_of_Round(Rounds_Played) As Double 'Adjusted_Score divided by rounds so far
\par     Dim v7pAW_Validity_as_of_Round(Rounds_Played) As Double 'Raw_Score divided by number of actual predictions so far
\par     Dim v7pAW_Frugality As Double = 0
\par 
\par     Dim MLR_Final_Avg_Score(Number_of_Games) As Double
\par     Dim Dawes_Final_Avg_Score(Number_of_Games) As Double
\par     Dim Minimalist_Final_Avg_Score(Number_of_Games) As Double
\par     Dim pTTB_Final_Avg_Score(Number_of_Games) As Double
\par     Dim iTTB_Final_Avg_Score(Number_of_Games) As Double
\par     Dim pSW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim iSW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim pAW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim epAW_Final_Avg_Score(Number_of_Games) As Double
\par 
\par     Dim iAW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim v1pAW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim v2pAW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim v3pAW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim v4pAW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim v5pAW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim v6pAW_Final_Avg_Score(Number_of_Games) As Double
\par     Dim v7pAW_Final_Avg_Score(Number_of_Games) As Double
\par 
\par     Dim MLR_Avg_Final_Score As Double = 0
\par     Dim Dawes_Avg_Final_Score As Double = 0
\par     Dim Minimalist_Avg_Final_Score As Double = 0
\par     Dim pTTB_Avg_Final_Score As Double = 0
\par     Dim iTTB_Avg_Final_Score As Double = 0
\par     Dim pSW_Avg_Final_Score As Double = 0
\par     Dim iSW_Avg_Final_Score As Double = 0
\par     Dim pAW_Avg_Final_Score As Double = 0
\par     Dim epAW_Avg_Final_Score As Double = 0
\par     Dim iAW_Avg_Final_Score As Double = 0
\par     Dim v1pAW_Avg_Final_Score As Double = 0
\par     Dim v2pAW_Avg_Final_Score As Double = 0
\par     Dim v3pAW_Avg_Final_Score As Double = 0
\par     Dim v4pAW_Avg_Final_Score As Double = 0
\par     Dim v5pAW_Avg_Final_Score As Double = 0
\par     Dim v6pAW_Avg_Final_Score As Double = 0
\par     Dim v7pAW_Avg_Final_Score As Double = 0
\par 
\par     Dim Test As Integer
\par     Dim Holder1 As Double
\par     Dim Holder2 As Integer
\par     Dim Holder3 As Double
\par 
\par     Dim Counter1 As Integer
\par     Dim Counter2 As Integer
\par 
\par     Dim Num_Holder As Double
\par     Dim Den_Holder As Double
\par 
\par     Dim Den_is_0 As Integer = 0
\par 
\par     Dim RandomClass As New Random()
\par     Dim RandomNumber As Double
\par     Dim IntRandomNumber As Integer
\par 
\par     Dim Cue_Object_Pair_Matrix_is_one_counter As Integer = 0
\par 
\par     Dim test_counter As Integer = 0
\par 
\par 
\par     Dim Non_Prediction_Counter(16) As Integer
\par     Dim Non_Prediction_Test As Integer
\par 
\par 
\par     'Open a spreadsheet in which data can be load, with columns corresponding to object/events and row to cues (and the actual outcome):
\par     Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
\par         Dim objBooks As Excel.Workbooks
\par         Dim objSheets As Excel.Sheets
\par         Dim objSheet As Excel._Worksheet
\par         Dim range As Excel.Range
\par 
\par         ' Create a new instance of Excel and start a new workbook.
\par         objApp = New Excel.Application()
\par         objBooks = objApp.Workbooks
\par         objBook = objBooks.Add
\par         objSheets = objBook.Worksheets
\par         objSheet = objSheets(1)
\par 
\par         range = objSheet.Range("A1", Reflection.Missing.Value)
\par         range = range.Resize(Cues, Objects)
\par 
\par         Dim saRet(Cues, Object_Pairs) As Double
\par 
\par         'Set the range value to the array.
\par         range.Value = saRet
\par 
\par         'Return control of Excel to the user.
\par         objApp.Visible = True
\par         objApp.UserControl = True
\par 
\par         'Clean up a little.
\par         range = Nothing
\par         objSheet = Nothing
\par         objSheets = Nothing
\par         objBooks = Nothing
\par 
\par     End Sub
\par 
\par 
\par     'Read the data from the spreadsheet and execute computations on that basis
\par     Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click
\par 
\par         Dim objSheets As Excel.Sheets
\par         Dim objSheet As Excel._Worksheet
\par         Dim range As Excel.Range
\par         'Dim counter As Integer = 1
\par 
\par         'Get a reference to the first sheet of the workbook.
\par         objSheets = objBook.Worksheets
\par         objSheet = objSheets(1)
\par 
\par         'Get a range of data.
\par         range = objSheet.Range("A1", "BIM19") 'needs to be adjusted according to size of object set ........................................
\par 
\par         'Retrieve the data from the range.
\par         Dim saRet(Cues, Object_Pairs) As Object
\par         saRet = range.Value
\par 
\par         For x = 1 To Cues
\par             For y = 1 To Objects
\par                 Cue_Object_Matrix(y, x) = saRet(x, y)
\par             Next
\par         Next
\par 
\par         Randomize()
\par 
\par         For g = 1 To Number_of_Games
\par 
\par             For z = 2 To Rounds_Played
\par                 Objects_Seen(z) = 0
\par             Next
\par             Avg_Objects_Seen = 0
\par 
\par 
\par             If Cross_Validate = 0 Then
\par 
\par                 'randomness
\par                 Cue_Object_Matrix = randomly_order_cue_object_matrix(Cue_Object_Matrix, Objects, Cues)
\par 
\par                 'Form Cue_Object_Pair_Matrix:
\par                 Cue_Object_Pair_Matrix = generate_cue_object_pair_matrix(Cue_Object_Matrix, Objects, Cues)
\par 
\par                 'Randomize Cue Object pair order:
\par                 Cue_Object_Pair_Matrix = randomly_order_cue_object_pair_matrix(Cue_Object_Pair_Matrix, Object_Pairs, Cues)
\par 
\par                 'For r = 1 To Rounds_Played
\par                 '    For c = 1 To Cues
\par                 '        Extended_Cue_Object_Pair_Matrix(r, c) = Cue_Object_Pair_Matrix(r, c)
\par                 '    Next
\par                 'Next
\par 
\par 
\par                 'The following is used to generate an extended Cue_Object_Pair_Matrix for large event sequences with no replacement
\par                 For r = 1 To Rounds_Played
\par                     RandomNumber = RandomClass.NextDouble()
\par                     IntRandomNumber = RandomNumber * Object_Pairs
\par                     If IntRandomNumber = 0 Then
\par                         IntRandomNumber = 1
\par                     End If
\par                     For c = 1 To Cues
\par                         Extended_Cue_Object_Pair_Matrix(r, c) = Cue_Object_Pair_Matrix(IntRandomNumber, c)
\par                     Next
\par                     Extended_Cue_Object_Pair_Matrix_Tracker(r, 1) = Cue_Object_Pair_Matrix_Tracker(IntRandomNumber, 1)
\par                     Extended_Cue_Object_Pair_Matrix_Tracker(r, 2) = Cue_Object_Pair_Matrix_Tracker(IntRandomNumber, 2)
\par                 Next
\par 
\par 
\par                 ''Randomize Cue Object pair order, again with possible duplication, via sampling with replacement:
\par                 'Cue_Object_Pair_Matrix = randomly_order_cue_object_pair_matrix_Var(Cue_Object_Pair_Matrix, Object_Pairs, Cues)
\par 
\par 
\par                 For r = 1 To New_Round_Count
\par 
\par                     'Determines Cue Predictions:
\par                     For y = 1 To Cues
\par                         Cue_Predictions(r, y) = Extended_Cue_Object_Pair_Matrix(r, y)
\par                     Next
\par 
\par                     'Determines Score, Average score, and Validity, for each 'natural cue':
\par                     If Quadratic_Scoring = 0 Then
\par 
\par                         For y = 1 To Cues
\par                             If Cue_Predictions(r, y) = -1 Then
\par                                 Cue_Raw_Score_at_a_Round(r, y) = 0
\par                                 Cue_Adjusted_Score_at_a_Round(r, y) = 0.5
\par                                 Cue_Num_of_Predictions(r, y) = Cue_Num_of_Predictions(r - 1, y)
\par                             Else
\par                                 If Extended_Cue_Object_Pair_Matrix(r, 1) = Cue_Predictions(r, y) Then
\par                                     Cue_Raw_Score_at_a_Round(r, y) = 1
\par                                     Cue_Adjusted_Score_at_a_Round(r, y) = 1
\par                                 Else
\par                                     Cue_Raw_Score_at_a_Round(r, y) = 0
\par                                     Cue_Adjusted_Score_at_a_Round(r, y) = 0
\par                                 End If
\par                                 Cue_Num_of_Predictions(r, y) = Cue_Num_of_Predictions(r - 1, y) + 1
\par                                 If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                                     Cue_Raw_Score_at_a_Round(r, y) = 0.5
\par                                     Cue_Adjusted_Score_at_a_Round(r, y) = 0.5
\par                                 End If
\par 
\par                             End If
\par                             Cue_Avg_Score_as_of_Round(r, y) = (Cue_Adjusted_Score_at_a_Round(r, y) + (Cue_Avg_Score_as_of_Round(r - 1, y) * (r - 1))) / r
\par 
\par                             If Cue_Num_of_Predictions(r, y) > 0 Then
\par                                 Cue_Validity_as_of_Round(r, y) = (Cue_Raw_Score_at_a_Round(r, y) + (Cue_Validity_as_of_Round(r - 1, y) * Cue_Num_of_Predictions(r - 1, y))) / Cue_Num_of_Predictions(r, y)
\par                             Else
\par                                 Cue_Validity_as_of_Round(r, y) = -1
\par                             End If
\par                         Next
\par 
\par                     Else
\par 
\par                         For y = 1 To Cues
\par                             If Cue_Predictions(r, y) = -1 Then
\par                                 Cue_Raw_Score_at_a_Round(r, y) = 0
\par                                 Cue_Adjusted_Score_at_a_Round(r, y) = 0.75
\par                                 Cue_Num_of_Predictions(r, y) = Cue_Num_of_Predictions(r - 1, y)
\par                             Else
\par                                 If Extended_Cue_Object_Pair_Matrix(r, 1) = Cue_Predictions(r, y) Then
\par                                     Cue_Raw_Score_at_a_Round(r, y) = 1
\par                                     Cue_Adjusted_Score_at_a_Round(r, y) = 1
\par                                 Else
\par                                     Cue_Raw_Score_at_a_Round(r, y) = 0
\par                                     Cue_Adjusted_Score_at_a_Round(r, y) = 0
\par                                 End If
\par                                 Cue_Num_of_Predictions(r, y) = Cue_Num_of_Predictions(r - 1, y) + 1
\par                                 If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                                     Cue_Raw_Score_at_a_Round(r, y) = 0.75
\par                                     Cue_Adjusted_Score_at_a_Round(r, y) = 0.75
\par                                 End If
\par 
\par                             End If
\par                             Cue_Avg_Score_as_of_Round(r, y) = (Cue_Adjusted_Score_at_a_Round(r, y) + (Cue_Avg_Score_as_of_Round(r - 1, y) * (r - 1))) / r
\par 
\par                             If Cue_Num_of_Predictions(r, y) > 0 Then
\par                                 Cue_Validity_as_of_Round(r, y) = (Cue_Raw_Score_at_a_Round(r, y) + (Cue_Validity_as_of_Round(r - 1, y) * Cue_Num_of_Predictions(r - 1, y))) / Cue_Num_of_Predictions(r, y)
\par                             Else
\par                                 Cue_Validity_as_of_Round(r, y) = -1
\par                             End If
\par                         Next
\par 
\par                     End If
\par 
\par 
\par                 Next
\par 
\par                 For y = 1 To Cues
\par                     Cue_Validity_as_of_Round(0, y) = -1
\par                 Next
\par 
\par 
\par                 If With_Online_Learning = 0 Then
\par                     For r = 0 To Object_Pairs
\par                         For y = 2 To Cues
\par                             Cue_Validity_as_of_Round(r, y) = Cue_Validity_as_of_Round(Object_Pairs, y)
\par                         Next
\par                     Next
\par                 End If
\par 
\par 
\par                 'rank cues by randomly:
\par                 For r = 0 To Rounds_Played
\par 
\par                     For y = 2 To Cues
\par                         Cues_Was_Ordered(y) = 0
\par                     Next
\par 
\par                     For z = 2 To Cues
\par 
\par                         RandomNumber = RandomClass.NextDouble()
\par                         IntRandomNumber = RandomNumber * (Cues - (z - 1))
\par                         If IntRandomNumber = 0 Then
\par                             IntRandomNumber = 1
\par                         End If
\par                         IntRandomNumber = IntRandomNumber + 1
\par 
\par                         Counter1 = 0
\par                         Counter2 = 0
\par                         Do While Counter2 < IntRandomNumber
\par                             Counter1 = Counter1 + 1
\par                             If Cues_Was_Ordered(Counter1) = 0 Then
\par                                 Counter2 = Counter2 + 1
\par                             End If
\par                         Loop
\par                         Random_Cue_Order(r, z) = Counter1
\par                         Cues_Was_Ordered(Counter1) = 1
\par 
\par                     Next
\par 
\par                 Next
\par                 'rank cues randomly ends.
\par 
\par 
\par                 'rank cues by validity:
\par                 For r = 0 To Rounds_Played
\par 
\par                     For y = 2 To Cues
\par                         Cues_Was_Ordered(y) = 0
\par                     Next
\par 
\par                     For z = 2 To Cues
\par                         Holder1 = 0
\par                         Holder2 = 0
\par                         For y = 2 To Cues
\par                             If Cue_Validity_as_of_Round(r, Random_Cue_Order(r, y)) >= (1 - Cue_Validity_as_of_Round(r, Random_Cue_Order(r, y))) Then
\par                                 Holder3 = Cue_Validity_as_of_Round(r, Random_Cue_Order(r, y))
\par                             Else
\par                                 If Cue_Num_of_Predictions(r, Random_Cue_Order(r, y)) > 0 Then
\par                                     Holder3 = (1 - Cue_Validity_as_of_Round(r, Random_Cue_Order(r, y)))
\par                                 Else
\par                                     Holder3 = 0
\par                                 End If
\par                             End If
\par 
\par                             If Cues_Was_Ordered(Random_Cue_Order(r, y)) = 0 Then
\par                                 If Holder3 >= Holder1 Then
\par                                     Holder1 = Holder3
\par                                     Holder2 = Random_Cue_Order(r, y)
\par                                 End If
\par                             End If
\par                         Next
\par                         Cues_Was_Ordered(Holder2) = 1
\par                         Cue_Order(r, z) = Holder2
\par                     Next
\par 
\par                 Next
\par                 'rank cues by validity ends.
\par 
\par 
\par                 'rank cues by score:
\par                 For r = 0 To Rounds_Played
\par 
\par                     For y = 2 To Cues
\par                         Cues_Was_Ordered(y) = 0
\par                     Next
\par 
\par                     For z = 2 To Cues
\par                         Holder1 = 0
\par                         Holder2 = 0
\par                         For y = 2 To Cues
\par                             If Cue_Avg_Score_as_of_Round(r, Random_Cue_Order(r, y)) >= (1 - Cue_Avg_Score_as_of_Round(r, Random_Cue_Order(r, y))) Then
\par                                 Holder3 = Cue_Avg_Score_as_of_Round(r, Random_Cue_Order(r, y))
\par                             Else
\par                                 If Cue_Num_of_Predictions(r, Random_Cue_Order(r, y)) > 0 Then
\par                                     Holder3 = (1 - Cue_Avg_Score_as_of_Round(r, Random_Cue_Order(r, y)))
\par                                 Else
\par                                     Holder3 = 0
\par                                 End If
\par                             End If
\par 
\par                             If Cues_Was_Ordered(Random_Cue_Order(r, y)) = 0 Then
\par                                 If Holder3 >= Holder1 Then
\par                                     Holder1 = Holder3
\par                                     Holder2 = Random_Cue_Order(r, y)
\par                                 End If
\par                             End If
\par                         Next
\par                         Cues_Was_Ordered(Holder2) = 1
\par                         Cue_Order2(r, z) = Holder2
\par                     Next
\par 
\par                 Next
\par                 'rank cues by scores ends.
\par 
\par             End If
\par 
\par 
\par 
\par             For r = 1 To New_Round_Count
\par 
\par                 Game_Ends_At(g) = New_Round_Count
\par 
\par                 For x = 1 To 16
\par                     For y = 1 To Cues
\par                         Cues_Accessed_Matrix(x, y) = 0
\par                     Next
\par                 Next
\par 
\par 
\par                 ''*************MLR Begins****************************************
\par                 ''Generate a sub matrix of the cue object matrix consisting of object cue tuples that correspond to object cue pair that have been observed, so far, if possible:
\par                 'If With_Online_Learning = 1 Then
\par                 '    Cue_Object_Sub_Matrix = generate_cue_object_sub_matrix(Extended_Cue_Object_Pair_Matrix, r - 1)
\par                 'Else
\par                 '    If r = 1 Then
\par                 '        Cue_Object_Sub_Matrix = generate_cue_object_sub_matrix(Extended_Cue_Object_Pair_Matrix, Object_Pairs)
\par                 '    End If
\par                 'End If
\par 
\par                 'If Objects_Seen(r - 1) >= Cues Or With_Online_Learning = 0 Then 'test to make sure it is possible to construct a regression model 'Cues
\par                 '    MLR_Frugality = MLR_Frugality + Cues - 1
\par 
\par                 '    For y = 2 To Cues
\par                 '        Cues_Accessed_Matrix(1, y) = 1
\par                 '    Next
\par 
\par                 '    'Generate the Regression Model for the current submatrix, if data is sufficient:
\par                 '    If r > 1 And With_Online_Learning = 1 Then
\par                 '        If Objects_Seen(r - 1) > Objects_Seen(r - 2) Then
\par                 '            Estimator = compute_estimator(Cue_Object_Sub_Matrix, Cues, Objects_Seen(r - 1))
\par                 '        End If
\par                 '    End If
\par 
\par                 '    'Determines MLR's Prediction:
\par                 '    If apply_estimator(Extended_Cue_Object_Pair_Matrix_Tracker(r, 1)) > apply_estimator(Extended_Cue_Object_Pair_Matrix_Tracker(r, 2)) Then
\par                 '        MLR_Predictions(r) = 1
\par                 '    Else
\par                 '        If apply_estimator(Extended_Cue_Object_Pair_Matrix_Tracker(r, 2)) > apply_estimator(Extended_Cue_Object_Pair_Matrix_Tracker(r, 1)) Then
\par                 '            MLR_Predictions(r) = 0
\par                 '        Else
\par                 '            MLR_Predictions(r) = -1
\par                 '        End If
\par                 '    End If
\par                 'Else
\par                 '    MLR_Predictions(r) = -1
\par                 'End If
\par 
\par                 ''Determines MLR's Score, Average score, and Validity:
\par                 'If MLR_Predictions(r) = -1 Then
\par                 '    MLR_Raw_Score_at_a_Round(r) = 0
\par                 '    MLR_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    MLR_Num_of_Predictions(r) = MLR_Num_of_Predictions(r - 1)
\par                 '    Non_Prediction_Counter(1) = Non_Prediction_Counter(1) + 1
\par                 'Else
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = MLR_Predictions(r) Then
\par                 '        MLR_Raw_Score_at_a_Round(r) = 1
\par                 '        MLR_Adjusted_Score_at_a_Round(r) = 1
\par                 '    Else
\par                 '        MLR_Raw_Score_at_a_Round(r) = 0
\par                 '        MLR_Adjusted_Score_at_a_Round(r) = 0
\par                 '    End If
\par                 '    MLR_Num_of_Predictions(r) = MLR_Num_of_Predictions(r - 1) + 1
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                 '        MLR_Raw_Score_at_a_Round(r) = 0.5
\par                 '        MLR_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    End If
\par 
\par                 'End If
\par                 'MLR_Avg_Score_as_of_Round(r) = (MLR_Adjusted_Score_at_a_Round(r) + (MLR_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 'If MLR_Num_of_Predictions(r) > 0 Then
\par                 '    MLR_Validity_as_of_Round(r) = (MLR_Raw_Score_at_a_Round(r) + (MLR_Validity_as_of_Round(r - 1) * MLR_Num_of_Predictions(r - 1))) / MLR_Num_of_Predictions(r)
\par                 'Else
\par                 '    MLR_Validity_as_of_Round(r) = 0
\par                 'End If
\par                 ''*************MLR Ends****************************************
\par 
\par 
\par 
\par                 ' ''*************Dawes Rule over Natural Cues Begins****************************************
\par                 If r = 1 And With_Online_Learning = 1 Then
\par                     Num_Holder = 0
\par                     Den_Holder = 0
\par                     Dawes_Predictions(r) = -1
\par                 Else
\par                     Num_Holder = 0
\par                     Den_Holder = 0
\par                     Dawes_Predictions(r) = -1
\par                     For m = 2 To Cues
\par                         If Not Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) = -1 Then
\par                             Dawes_Frugality = Dawes_Frugality + 1
\par 
\par                             Cues_Accessed_Matrix(2, Cue_Order(r - 1, m)) = 1
\par 
\par                             If Not Cue_Predictions(r, m) = -1 And Not Cue_Validity_as_of_Round(r - 1, m) = -1 Then
\par                                 If Cue_Validity_as_of_Round(r - 1, m) > (1 - Cue_Validity_as_of_Round(r - 1, m)) Then
\par                                     Num_Holder = Num_Holder + Cue_Predictions(r, m)
\par                                     Den_Holder = Den_Holder + 1
\par                                 Else
\par                                     Num_Holder = Num_Holder + (1 - Cue_Predictions(r, m))
\par                                     Den_Holder = Den_Holder + 1
\par                                 End If
\par                             End If
\par                         End If
\par                     Next
\par                 End If
\par 
\par                 If Den_Holder = 0 Then
\par                     Dawes_Predictions(r) = -1
\par                 Else
\par                     If Num_Holder / Den_Holder > 0.5 Then
\par                         Dawes_Predictions(r) = 1
\par                     Else
\par                         If Num_Holder / Den_Holder < 0.5 Then
\par                             Dawes_Predictions(r) = 0
\par                         Else
\par                             Dawes_Predictions(r) = -1
\par                         End If
\par                     End If
\par                 End If
\par 
\par                 If Dawes_Predictions(r) = -1 Then
\par                     Dawes_Raw_Score_at_a_Round(r) = 0
\par                     Dawes_Adjusted_Score_at_a_Round(r) = 0.5
\par                     Dawes_Num_of_Predictions(r) = Dawes_Num_of_Predictions(r - 1)
\par                     Non_Prediction_Counter(2) = Non_Prediction_Counter(2) + 1
\par                 Else
\par                     Dawes_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - Dawes_Predictions(r))
\par                     Dawes_Adjusted_Score_at_a_Round(r) = Dawes_Raw_Score_at_a_Round(r)
\par                     Dawes_Num_of_Predictions(r) = Dawes_Num_of_Predictions(r - 1) + 1
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                         Dawes_Raw_Score_at_a_Round(r) = 1 - Math.Abs(0.5 - Dawes_Predictions(r))
\par                         Dawes_Adjusted_Score_at_a_Round(r) = Dawes_Raw_Score_at_a_Round(r)
\par                         Cue_Object_Pair_Matrix_is_one_counter = Cue_Object_Pair_Matrix_is_one_counter + 1
\par                     End If
\par                 End If
\par                 Dawes_Avg_Score_as_of_Round(r) = (Dawes_Adjusted_Score_at_a_Round(r) + (Dawes_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If Dawes_Num_of_Predictions(r) > 0 Then
\par                     Dawes_Validity_as_of_Round(r) = (Dawes_Raw_Score_at_a_Round(r) + (Dawes_Validity_as_of_Round(r - 1) * Dawes_Num_of_Predictions(r - 1))) / Dawes_Num_of_Predictions(r)
\par                 Else
\par                     Dawes_Validity_as_of_Round(r) = 0
\par                 End If
\par                 ' ''************* Dawes Rule over Natural Cues Ends****************************************
\par 
\par 
\par 
\par                 '*************minimalist over Natural Cues Begins****************************************
\par                 If r = 1 And With_Online_Learning = 1 Then
\par                     Minimalist_Predictions(r) = -1
\par                 Else
\par                     Minimalist_Predictions(r) = -1
\par                     For m = 2 To Cues
\par                         If Not Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) = -1 Then
\par                             Minimalist_Frugality = Minimalist_Frugality + 1
\par 
\par                             Cues_Accessed_Matrix(3, Random_Cue_Order(r - 1, m)) = 1
\par 
\par                             If Not Cue_Predictions(r, Random_Cue_Order(r - 1, m)) = -1 And Not Cue_Validity_as_of_Round(r - 1, Random_Cue_Order(r - 1, m)) = -1 Then
\par                                 If Cue_Validity_as_of_Round(r - 1, Random_Cue_Order(r - 1, m)) > (1 - Cue_Validity_as_of_Round(r - 1, Random_Cue_Order(r - 1, m))) Then
\par                                     Minimalist_Predictions(r) = Cue_Predictions(r, Random_Cue_Order(r - 1, m))
\par                                     m = Cues
\par                                 Else
\par                                     Minimalist_Predictions(r) = (1 - Cue_Predictions(r, Random_Cue_Order(r - 1, m)))
\par                                     m = Cues
\par                                 End If
\par                             End If
\par                         End If
\par                     Next
\par 
\par                 End If
\par 
\par                 If Minimalist_Predictions(r) = -1 Then
\par                     Minimalist_Raw_Score_at_a_Round(r) = 0
\par                     Minimalist_Adjusted_Score_at_a_Round(r) = 0.5
\par                     Minimalist_Num_of_Predictions(r) = Minimalist_Num_of_Predictions(r - 1)
\par                     Non_Prediction_Counter(3) = Non_Prediction_Counter(3) + 1
\par                 Else
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = Minimalist_Predictions(r) Then
\par                         Minimalist_Raw_Score_at_a_Round(r) = 1
\par                         Minimalist_Adjusted_Score_at_a_Round(r) = 1
\par                     Else
\par                         Minimalist_Raw_Score_at_a_Round(r) = 0
\par                         Minimalist_Adjusted_Score_at_a_Round(r) = 0
\par                     End If
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                         Minimalist_Raw_Score_at_a_Round(r) = 0.5
\par                         Minimalist_Adjusted_Score_at_a_Round(r) = 0.5
\par                     End If
\par                     Minimalist_Num_of_Predictions(r) = Minimalist_Num_of_Predictions(r - 1) + 1
\par                 End If
\par                 Minimalist_Avg_Score_as_of_Round(r) = (Minimalist_Adjusted_Score_at_a_Round(r) + (Minimalist_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If Minimalist_Num_of_Predictions(r) > 0 Then
\par                     Minimalist_Validity_as_of_Round(r) = (Minimalist_Raw_Score_at_a_Round(r) + (Minimalist_Validity_as_of_Round(r - 1) * Minimalist_Num_of_Predictions(r - 1))) / Minimalist_Num_of_Predictions(r)
\par                 Else
\par                     Minimalist_Validity_as_of_Round(r) = 0
\par                 End If
\par                 '*************Minimalist over Natural Cues Ends****************************************
\par 
\par 
\par 
\par                 '*************pTTB over Natural Cues Begins****************************************
\par                 'Determines pTTB's Prediction:
\par                 pTTB_Predictions(r) = -1
\par                 If r = 1 And With_Online_Learning = 1 Then
\par                     pTTB_Predictions(r) = -1
\par                 Else
\par                     For m = 2 To Cues
\par                         If Not Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) = -1 Then
\par                             pTTB_Frugality = pTTB_Frugality + 1
\par 
\par                             Cues_Accessed_Matrix(4, Cue_Order2(r - 1, m)) = 1
\par 
\par                             If r > 1 And Not Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) = -1 Then
\par                                 If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                                     If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then
\par                                         pTTB_Predictions(r) = Cue_Predictions(r, Cue_Order2(r - 1, m))
\par                                         m = Cues
\par                                     Else
\par                                         pTTB_Predictions(r) = (1 - Cue_Predictions(r, Cue_Order2(r - 1, m)))
\par                                         m = Cues
\par                                     End If
\par                                 Else
\par                                     pTTB_Predictions(r) = -1
\par                                     m = Cues
\par                                 End If
\par                             End If
\par                         End If
\par                     Next
\par                 End If
\par 
\par 
\par                 'Determines pTTB's Score, Average score, and Validity:
\par                 If Quadratic_Scoring = 0 Then
\par 
\par                     If pTTB_Predictions(r) = -1 Then
\par                         pTTB_Raw_Score_at_a_Round(r) = 0
\par                         pTTB_Adjusted_Score_at_a_Round(r) = 0.5
\par                         pTTB_Num_of_Predictions(r) = pTTB_Num_of_Predictions(r - 1)
\par                         Non_Prediction_Counter(4) = Non_Prediction_Counter(4) + 1
\par                     Else
\par                         If Extended_Cue_Object_Pair_Matrix(r, 1) = pTTB_Predictions(r) Then
\par                             pTTB_Raw_Score_at_a_Round(r) = 1
\par                             pTTB_Adjusted_Score_at_a_Round(r) = 1
\par                         Else
\par                             pTTB_Raw_Score_at_a_Round(r) = 0
\par                             pTTB_Adjusted_Score_at_a_Round(r) = 0
\par                         End If
\par                         If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                             pTTB_Raw_Score_at_a_Round(r) = 0.5
\par                             pTTB_Adjusted_Score_at_a_Round(r) = 0.5
\par                         End If
\par                         pTTB_Num_of_Predictions(r) = pTTB_Num_of_Predictions(r - 1) + 1
\par                     End If
\par 
\par                 Else
\par 
\par                     If pTTB_Predictions(r) = -1 Then
\par                         pTTB_Raw_Score_at_a_Round(r) = 0
\par                         pTTB_Adjusted_Score_at_a_Round(r) = 0.75
\par                         pTTB_Num_of_Predictions(r) = pTTB_Num_of_Predictions(r - 1)
\par                         Non_Prediction_Counter(4) = Non_Prediction_Counter(4) + 1
\par                     Else
\par                         If Extended_Cue_Object_Pair_Matrix(r, 1) = pTTB_Predictions(r) Then
\par                             pTTB_Raw_Score_at_a_Round(r) = 1
\par                             pTTB_Adjusted_Score_at_a_Round(r) = 1
\par                         Else
\par                             pTTB_Raw_Score_at_a_Round(r) = 0
\par                             pTTB_Adjusted_Score_at_a_Round(r) = 0
\par                         End If
\par                         If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                             pTTB_Raw_Score_at_a_Round(r) = 0.5
\par                             pTTB_Adjusted_Score_at_a_Round(r) = 0.5
\par                         End If
\par                         pTTB_Num_of_Predictions(r) = pTTB_Num_of_Predictions(r - 1) + 1
\par                     End If
\par 
\par                 End If
\par 
\par                 pTTB_Avg_Score_as_of_Round(r) = (pTTB_Adjusted_Score_at_a_Round(r) + (pTTB_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If pTTB_Num_of_Predictions(r) > 0 Then
\par                     pTTB_Validity_as_of_Round(r) = (pTTB_Raw_Score_at_a_Round(r) + (pTTB_Validity_as_of_Round(r - 1) * pTTB_Num_of_Predictions(r - 1))) / pTTB_Num_of_Predictions(r)
\par                 Else
\par                     pTTB_Validity_as_of_Round(r) = 0
\par                 End If
\par                 '*************pTTB over Natural Cues Ends****************************************
\par 
\par 
\par 
\par                 '*************iTTB over Natural Cues Begins****************************************
\par                 'Determines TTB's Prediction:
\par                 iTTB_Predictions(r) = -1
\par                 If r = 1 And With_Online_Learning = 1 Then
\par                     iTTB_Predictions(r) = -1
\par                 Else
\par                     For m = 2 To Cues
\par                         If Not Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) = -1 Then
\par                             iTTB_Frugality = iTTB_Frugality + 1
\par 
\par                             Cues_Accessed_Matrix(5, Cue_Order(r - 1, m)) = 1
\par 
\par                             If r > 1 And Not Cue_Predictions(r, Cue_Order(r - 1, m)) = -1 And Not Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) = -1 Then
\par                                 If Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) > (1 - Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m))) Then
\par                                     iTTB_Predictions(r) = Cue_Predictions(r, Cue_Order(r - 1, m))
\par                                     m = Cues
\par                                 Else
\par                                     iTTB_Predictions(r) = (1 - Cue_Predictions(r, Cue_Order(r - 1, m)))
\par                                     m = Cues
\par                                 End If
\par                             End If
\par                         End If
\par                     Next
\par                 End If
\par 
\par 
\par                 'Determines iTTB's Score, Average score, and Validity:
\par                 If iTTB_Predictions(r) = -1 Then
\par                     iTTB_Raw_Score_at_a_Round(r) = 0
\par                     iTTB_Adjusted_Score_at_a_Round(r) = 0.5
\par                     iTTB_Num_of_Predictions(r) = iTTB_Num_of_Predictions(r - 1)
\par                     Non_Prediction_Counter(5) = Non_Prediction_Counter(5) + 1
\par                 Else
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = iTTB_Predictions(r) Then
\par                         iTTB_Raw_Score_at_a_Round(r) = 1
\par                         iTTB_Adjusted_Score_at_a_Round(r) = 1
\par                     Else
\par                         iTTB_Raw_Score_at_a_Round(r) = 0
\par                         iTTB_Adjusted_Score_at_a_Round(r) = 0
\par                     End If
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                         iTTB_Raw_Score_at_a_Round(r) = 0.5
\par                         iTTB_Adjusted_Score_at_a_Round(r) = 0.5
\par                     End If
\par                     iTTB_Num_of_Predictions(r) = iTTB_Num_of_Predictions(r - 1) + 1
\par                 End If
\par                 iTTB_Avg_Score_as_of_Round(r) = (iTTB_Adjusted_Score_at_a_Round(r) + (iTTB_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If iTTB_Num_of_Predictions(r) > 0 Then
\par                     iTTB_Validity_as_of_Round(r) = (iTTB_Raw_Score_at_a_Round(r) + (iTTB_Validity_as_of_Round(r - 1) * iTTB_Num_of_Predictions(r - 1))) / iTTB_Num_of_Predictions(r)
\par                 Else
\par                     iTTB_Validity_as_of_Round(r) = 0
\par                 End If
\par                 '*************iTTB over Natural Cues Ends****************************************
\par 
\par 
\par 
\par                 '*************pSW Begins (over Natural Cues)****************************************
\par                 'Determines pSW's Prediction:
\par                 Num_Holder = 0
\par                 Den_Holder = 0
\par                 pSW_Predictions(r) = -1
\par                 Non_Prediction_Test = 1
\par 
\par                 If r > 1 Then
\par                     For y = 2 To Cues
\par                         If Not Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, y)) = -1 Then
\par                             pSW_Frugality = pSW_Frugality + 1
\par 
\par                             Cues_Accessed_Matrix(6, Cue_Order2(r - 1, y)) = 1
\par 
\par                             If Not Cue_Predictions(r, y) = -1 Then
\par                                 Non_Prediction_Test = 0
\par                                 If Cue_Avg_Score_as_of_Round(r - 1, y) >= 0.5 Then
\par                                     Num_Holder = Num_Holder + (Cue_Avg_Score_as_of_Round(r - 1, y) * Cue_Predictions(r, y))
\par                                     Den_Holder = Den_Holder + Cue_Avg_Score_as_of_Round(r - 1, y)
\par                                 Else
\par                                     Num_Holder = Num_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, y)) * (1 - Cue_Predictions(r, y)))
\par                                     Den_Holder = Den_Holder + (1 - Cue_Avg_Score_as_of_Round(r - 1, y))
\par                                 End If
\par                             Else
\par                                 If Cue_Avg_Score_as_of_Round(r - 1, y) >= 0.5 Then
\par                                     Num_Holder = Num_Holder + (Cue_Avg_Score_as_of_Round(r - 1, y) * 0.5)
\par                                     Den_Holder = Den_Holder + Cue_Avg_Score_as_of_Round(r - 1, y)
\par                                 Else
\par                                     Num_Holder = Num_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, y)) * (1 - 0.5))
\par                                     Den_Holder = Den_Holder + (1 - Cue_Avg_Score_as_of_Round(r - 1, y))
\par                                 End If
\par                             End If
\par                         End If
\par                     Next
\par                 End If
\par 
\par                 If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                     pSW_Predictions(r) = -1
\par                 Else
\par 
\par                     If Binary_Prediction = 1 Then
\par                         If Num_Holder / Den_Holder > 0.5 Then
\par                             pSW_Predictions(r) = 1
\par                         Else
\par                             If Num_Holder / Den_Holder < 0.5 Then
\par                                 pSW_Predictions(r) = 0
\par                             Else
\par                                 pSW_Predictions(r) = -1
\par                             End If
\par                         End If
\par                     Else
\par                         pSW_Predictions(r) = Num_Holder / Den_Holder
\par                     End If
\par 
\par                 End If
\par 
\par                 'Determines iSW's Rule Score, Average score, and Validity:
\par                 If pSW_Predictions(r) = -1 Then
\par                     pSW_Raw_Score_at_a_Round(r) = 0
\par                     pSW_Adjusted_Score_at_a_Round(r) = 0.5
\par                     pSW_Num_of_Predictions(r) = pSW_Num_of_Predictions(r - 1)
\par                     Non_Prediction_Counter(6) = Non_Prediction_Counter(6) + 1
\par                 Else
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = pSW_Predictions(r) Then
\par                         pSW_Raw_Score_at_a_Round(r) = 1
\par                         pSW_Adjusted_Score_at_a_Round(r) = 1
\par                     Else
\par                         pSW_Raw_Score_at_a_Round(r) = 0
\par                         pSW_Adjusted_Score_at_a_Round(r) = 0
\par                     End If
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                         pSW_Raw_Score_at_a_Round(r) = 0.5
\par                         pSW_Adjusted_Score_at_a_Round(r) = 0.5
\par                     End If
\par                     pSW_Num_of_Predictions(r) = pSW_Num_of_Predictions(r - 1) + 1
\par                 End If
\par                 pSW_Avg_Score_as_of_Round(r) = (pSW_Adjusted_Score_at_a_Round(r) + (pSW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If pSW_Num_of_Predictions(r) > 0 Then
\par                     pSW_Validity_as_of_Round(r) = (pSW_Raw_Score_at_a_Round(r) + (pSW_Validity_as_of_Round(r - 1) * pSW_Num_of_Predictions(r - 1))) / pSW_Num_of_Predictions(r)
\par                 Else
\par                     pSW_Validity_as_of_Round(r) = 0
\par                 End If
\par                 '*************pSW Rule Ends****************************************
\par 
\par 
\par 
\par                 '*************iSW Begins (over Natural Cues)****************************************
\par                 'Determines iSW's Prediction:
\par                 Num_Holder = 0
\par                 Den_Holder = 0
\par                 iSW_Predictions(r) = -1
\par 
\par                 If r > 1 Then
\par                     For y = 2 To Cues
\par                         If Not Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, y)) = -1 Then
\par                             iSW_Frugality = iSW_Frugality + 1
\par 
\par                             Cues_Accessed_Matrix(7, Cue_Order(r - 1, y)) = 1
\par 
\par                             If Not Cue_Predictions(r, y) = -1 And Cue_Num_of_Predictions(r - 1, y) > 0 Then
\par                                 If Cue_Validity_as_of_Round(r - 1, y) >= 0.5 Then
\par                                     Num_Holder = Num_Holder + (Cue_Validity_as_of_Round(r - 1, y) * Cue_Predictions(r, y))
\par                                     Den_Holder = Den_Holder + Cue_Validity_as_of_Round(r - 1, y)
\par                                 Else
\par                                     Num_Holder = Num_Holder + ((1 - Cue_Validity_as_of_Round(r - 1, y)) * (1 - Cue_Predictions(r, y)))
\par                                     Den_Holder = Den_Holder + (1 - Cue_Validity_as_of_Round(r - 1, y))
\par                                 End If
\par                             End If
\par                         End If
\par                     Next
\par                 End If
\par 
\par                 If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                     iSW_Predictions(r) = -1
\par                 Else
\par 
\par                     If Binary_Prediction = 1 Then
\par                         If Num_Holder / Den_Holder > 0.5 Then
\par                             iSW_Predictions(r) = 1
\par                         Else
\par                             If Num_Holder / Den_Holder < 0.5 Then
\par                                 iSW_Predictions(r) = 0
\par                             Else
\par                                 iSW_Predictions(r) = -1
\par                             End If
\par                         End If
\par                     Else
\par                         iSW_Predictions(r) = Num_Holder / Den_Holder
\par                     End If
\par 
\par                 End If
\par 
\par                 'Determines iSW's Rule Score, Average score, and Validity:
\par                 If iSW_Predictions(r) = -1 Then
\par                     iSW_Raw_Score_at_a_Round(r) = 0
\par                     iSW_Adjusted_Score_at_a_Round(r) = 0.5
\par                     iSW_Num_of_Predictions(r) = iSW_Num_of_Predictions(r - 1)
\par                     Non_Prediction_Counter(7) = Non_Prediction_Counter(7) + 1
\par                 Else
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = iSW_Predictions(r) Then
\par                         iSW_Raw_Score_at_a_Round(r) = 1
\par                         iSW_Adjusted_Score_at_a_Round(r) = 1
\par                     Else
\par                         iSW_Raw_Score_at_a_Round(r) = 0
\par                         iSW_Adjusted_Score_at_a_Round(r) = 0
\par                     End If
\par                     If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                         iSW_Raw_Score_at_a_Round(r) = 0.5
\par                         iSW_Adjusted_Score_at_a_Round(r) = 0.5
\par                     End If
\par                     iSW_Num_of_Predictions(r) = iSW_Num_of_Predictions(r - 1) + 1
\par                 End If
\par                 iSW_Avg_Score_as_of_Round(r) = (iSW_Adjusted_Score_at_a_Round(r) + (iSW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If iSW_Num_of_Predictions(r) > 0 Then
\par                     iSW_Validity_as_of_Round(r) = (iSW_Raw_Score_at_a_Round(r) + (iSW_Validity_as_of_Round(r - 1) * iSW_Num_of_Predictions(r - 1))) / iSW_Num_of_Predictions(r)
\par                 Else
\par                     iSW_Validity_as_of_Round(r) = 0
\par                 End If
\par                 '*************iSW Rule Ends****************************************
\par 
\par 
\par 
\par                 ' ''*************pAW over Natural Cues Begins (based on scores not validity)****************************************
\par                 If r = 1 And With_Online_Learning = 1 Then
\par                     Num_Holder = 0
\par                     Den_Holder = 0
\par                     pAW_Predictions(r) = -1
\par                 Else
\par                     Num_Holder = 0
\par                     Den_Holder = 0
\par                     pAW_Predictions(r) = -1
\par                     Non_Prediction_Test = 1
\par                     For m = 2 To Cues
\par                         If (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > pAW_Avg_Scor
e_as_of_Round(r - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > pAW_Avg_Score_as_of_Round(r - 1)) And Not Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) = -1 Then
\par                             pAW_Frugality = pAW_Frugality + 1
\par 
\par                             Cues_Accessed_Matrix(8, Cue_Order2(r - 1, m)) = 1
\par 
\par                             If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                                 Non_Prediction_Test = 0
\par                                 If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                                     Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - pAW_Avg_Score_as_of_Round(r - 1)))
\par                                     Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - pAW_Avg_Score_as_of_Round(r - 1))
\par                                 Else
\par                                     Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                                     Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - pAW_Avg_Score_as_of_Round(r - 1))
\par                                 End If
\par                             Else
\par                                 If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                                     Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - pAW_Avg_Score_as_of_Round(r - 1)))
\par                                     Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - pAW_Avg_Score_as_of_Round(r - 1))
\par                                 Else
\par                                     Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                                     Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - pAW_Avg_Score_as_of_Round(r - 1))
\par                                 End If
\par                             End If
\par 
\par                         End If
\par                     Next
\par                 End If
\par 
\par                 If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                     pAW_Predictions(r) = -1
\par                 Else
\par 
\par                     If Binary_Prediction = 1 Then
\par                         If Num_Holder / Den_Holder > 0.5 Then
\par                             pAW_Predictions(r) = 1
\par                         Else
\par                             If Num_Holder / Den_Holder < 0.5 Then
\par                                 pAW_Predictions(r) = 0
\par                             Else
\par                                 pAW_Predictions(r) = -1
\par                             End If
\par                         End If
\par                     Else
\par                         pAW_Predictions(r) = Num_Holder / Den_Holder
\par                     End If
\par 
\par                 End If
\par 
\par                 If Quadratic_Scoring = 0 Then
\par                     If pAW_Predictions(r) = -1 Or Non_Prediction_Test = 1 Then
\par                         pAW_Raw_Score_at_a_Round(r) = 0
\par                         pAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                         pAW_Num_of_Predictions(r) = pAW_Num_of_Predictions(r - 1)
\par                         Non_Prediction_Counter(8) = Non_Prediction_Counter(8) + 1
\par                     Else
\par                         pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - pAW_Predictions(r))
\par                         pAW_Adjusted_Score_at_a_Round(r) = pAW_Raw_Score_at_a_Round(r)
\par                         pAW_Num_of_Predictions(r) = pAW_Num_of_Predictions(r - 1) + 1
\par                     End If
\par 
\par                 Else
\par 
\par                     If pAW_Predictions(r) = -1 Or Non_Prediction_Test = 1 Then
\par                         pAW_Raw_Score_at_a_Round(r) = 0
\par                         pAW_Adjusted_Score_at_a_Round(r) = 0.75
\par                         pAW_Num_of_Predictions(r) = pAW_Num_of_Predictions(r - 1)
\par                         Non_Prediction_Counter(8) = Non_Prediction_Counter(8) + 1
\par                     Else
\par                         pAW_Raw_Score_at_a_Round(r) = 1 - (Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - pAW_Predictions(r)) * Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - pAW_Predictions(r)))
\par                         pAW_Adjusted_Score_at_a_Round(r) = pAW_Raw_Score_at_a_Round(r)
\par                         pAW_Num_of_Predictions(r) = pAW_Num_of_Predictions(r - 1) + 1
\par                     End If
\par 
\par 
\par                 End If
\par 
\par 
\par 
\par                 pAW_Avg_Score_as_of_Round(r) = (pAW_Adjusted_Score_at_a_Round(r) + (pAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If pAW_Num_of_Predictions(r) > 0 Then
\par                     pAW_Validity_as_of_Round(r) = (pAW_Raw_Score_at_a_Round(r) + (pAW_Validity_as_of_Round(r - 1) * pAW_Num_of_Predictions(r - 1))) / pAW_Num_of_Predictions(r)
\par                 Else
\par                     pAW_Validity_as_of_Round(r) = 0
\par                 End If
\par 
\par                 ' ''*************pAW over Natural Cues Ends****************************************
\par 
\par                 ' ''*************epAW over Natural Cues Begins (based on scores not validity)****************************************
\par                 If r = 1 And With_Online_Learning = 1 Then
\par                     Num_Holder = 0
\par                     Den_Holder = 0
\par                     epAW_Predictions(r) = -1
\par                 Else
\par                     EAW_EXP = Math.Sqrt((8 * Math.Log(Cues - 1)) / r)
\par                     EAW_Holder = 0
\par                     Num_Holder = 0
\par                     Den_Holder = 0
\par                     epAW_Predictions(r) = -1
\par 
\par                     For m = 2 To Cues
\par                         If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                             Non_Prediction_Test = 0
\par                             If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) >= 0.5 Then 'pos
\par                                 EAW_Holder = Math.Exp(EAW_EXP * ((r - 1) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - epAW_Avg_Score_as_of_Round(r - 1))))
\par                                 Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * EAW_Holder)
\par                                 Den_Holder = Den_Holder + EAW_Holder
\par                             Else
\par                                 EAW_Holder = Math.Exp(EAW_EXP * ((r - 1) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - epAW_Avg_Score_as_of_Round(r - 1)))) 'neg
\par                                 Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * EAW_Holder)
\par                                 Den_Holder = Den_Holder + EAW_Holder
\par 
\par                             End If
\par                         Else
\par                             If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) >= 0.5 Then 'pos
\par                                 EAW_Holder = Math.Exp(EAW_EXP * ((r - 1) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - epAW_Avg_Score_as_of_Round(r - 1))))
\par                                 Num_Holder = Num_Holder + (0.5 * EAW_Holder)
\par                                 Den_Holder = Den_Holder + EAW_Holder
\par                             Else
\par                                 EAW_Holder = Math.Exp(EAW_EXP * ((r - 1) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - epAW_Avg_Score_as_of_Round(r - 1))))
\par                                 Num_Holder = Num_Holder + (0.5 * EAW_Holder)
\par                                 Den_Holder = Den_Holder + EAW_Holder
\par                             End If
\par                         End If
\par 
\par                     Next
\par 
\par 
\par                     '    For m = 2 To Cues
\par                     '        If (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > epAW_Avg_Score_as_of_Round(r
 - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > epAW_Avg_Score_as_of_Round(r - 1)) And Not Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) = -1 Then
\par                     '            epAW_Frugality = epAW_Frugality + 1
\par 
\par                     '            Cues_Accessed_Matrix(8, Cue_Order2(r - 1, m)) = 1
\par 
\par                     '            If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                     '                Non_Prediction_Test = 0
\par                     '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                     '                    Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - epAW_Avg_Score_as_of_Round(r - 1)))
\par                     '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - epAW_Avg_Score_as_of_Round(r - 1))
\par                     '                Else
\par                     '                    Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - epAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                     '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - epAW_Avg_Score_as_of_Round(r - 1))
\par                     '                End If
\par                     '            Else
\par                     '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                     '                    Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - epAW_Avg_Score_as_of_Round(r - 1)))
\par                     '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - epAW_Avg_Score_as_of_Round(r - 1))
\par                     '                Else
\par                     '                    Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - epAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                     '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - epAW_Avg_Score_as_of_Round(r - 1))
\par                     '                End If
\par                     '            End If
\par 
\par                     '        End If
\par                     '    Next
\par                 End If
\par 
\par                 If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                     epAW_Predictions(r) = -1
\par                 Else
\par 
\par                     If Binary_Prediction = 1 Then
\par                         If Num_Holder / Den_Holder > 0.5 Then
\par                             epAW_Predictions(r) = 1
\par                         Else
\par                             If Num_Holder / Den_Holder < 0.5 Then
\par                                 epAW_Predictions(r) = 0
\par                             Else
\par                                 epAW_Predictions(r) = -1
\par                             End If
\par                         End If
\par                     Else
\par                         epAW_Predictions(r) = Num_Holder / Den_Holder
\par                     End If
\par 
\par                 End If
\par 
\par 
\par                 If Quadratic_Scoring = 0 Then
\par                     If epAW_Predictions(r) = -1 Or Non_Prediction_Test = 1 Then
\par                         epAW_Raw_Score_at_a_Round(r) = 0
\par                         epAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                         epAW_Num_of_Predictions(r) = epAW_Num_of_Predictions(r - 1)
\par                         Non_Prediction_Counter(8) = Non_Prediction_Counter(8) + 1
\par                     Else
\par                         epAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - epAW_Predictions(r))
\par                         epAW_Adjusted_Score_at_a_Round(r) = epAW_Raw_Score_at_a_Round(r)
\par                         epAW_Num_of_Predictions(r) = epAW_Num_of_Predictions(r - 1) + 1
\par                     End If
\par 
\par                 Else
\par 
\par                     If epAW_Predictions(r) = -1 Or Non_Prediction_Test = 1 Then
\par                         epAW_Raw_Score_at_a_Round(r) = 0
\par                         epAW_Adjusted_Score_at_a_Round(r) = 0.75
\par                         epAW_Num_of_Predictions(r) = epAW_Num_of_Predictions(r - 1)
\par                         Non_Prediction_Counter(8) = Non_Prediction_Counter(8) + 1
\par                     Else
\par                         epAW_Raw_Score_at_a_Round(r) = 1 - (Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - epAW_Predictions(r)) * Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - epAW_Predictions(r)))
\par                         epAW_Adjusted_Score_at_a_Round(r) = epAW_Raw_Score_at_a_Round(r)
\par                         epAW_Num_of_Predictions(r) = epAW_Num_of_Predictions(r - 1) + 1
\par                     End If
\par 
\par 
\par 
\par                 End If
\par 
\par 
\par                 epAW_Avg_Score_as_of_Round(r) = (epAW_Adjusted_Score_at_a_Round(r) + (epAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If epAW_Num_of_Predictions(r) > 0 Then
\par                     epAW_Validity_as_of_Round(r) = (epAW_Raw_Score_at_a_Round(r) + (epAW_Validity_as_of_Round(r - 1) * epAW_Num_of_Predictions(r - 1))) / epAW_Num_of_Predictions(r)
\par                 Else
\par                     epAW_Validity_as_of_Round(r) = 0
\par                 End If
\par 
\par                 ' ''*************epAW over Natural Cues Ends****************************************
\par 
\par 
\par                 ' ''*************iAW  over Natural Cues Begins (based on validity)****************************************
\par                 If r = 1 And With_Online_Learning = 1 Then
\par                     Num_Holder = 0
\par                     Den_Holder = 0
\par                     iAW_Predictions(r) = -1
\par                 Else
\par                     Num_Holder = 0
\par                     Den_Holder = 0
\par                     iAW_Predictions(r) = -1
\par                     For m = 2 To Cues
\par                         If (Cue_Validity
_as_of_Round(r - 1, Cue_Order(r - 1, m)) > iAW_Avg_Score_as_of_Round(r - 1) Or (1 - Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m))) > iAW_Avg_Score_as_of_Round(r - 1)) And Not Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) = -1 Then
\par                             iAW_Frugality = iAW_Frugality + 1
\par 
\par                             Cues_Accessed_Matrix(9, Cue_Order(r - 1, m)) = 1
\par 
\par                             If Not Cue_Predictions(r, Cue_Order(r - 1, m)) = -1 Then
\par                                 If Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) > (1 - Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m))) Then 'pos
\par                                     Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order(r - 1, m)) * (Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) - iAW_Avg_Score_as_of_Round(r - 1)))
\par                                     Den_Holder = Den_Holder + (Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m)) - iAW_Avg_Score_as_of_Round(r - 1))
\par                                 Else
\par                                     Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order(r - 1, m))) * ((1 - Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m))) - iAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                                     Den_Holder = Den_Holder + ((1 - Cue_Validity_as_of_Round(r - 1, Cue_Order(r - 1, m))) - iAW_Avg_Score_as_of_Round(r - 1))
\par                                 End If
\par                             End If
\par 
\par                         End If
\par                     Next
\par                 End If
\par 
\par 
\par                 If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                     iAW_Predictions(r) = iTTB_Predictions(r)
\par                 Else
\par 
\par                     If Binary_Prediction = 1 Then
\par                         If Num_Holder / Den_Holder > 0.5 Then
\par                             iAW_Predictions(r) = 1
\par                         Else
\par                             If Num_Holder / Den_Holder < 0.5 Then
\par                                 iAW_Predictions(r) = 0
\par                             Else
\par                                 iAW_Predictions(r) = -1
\par                             End If
\par                         End If
\par                     Else
\par                         iAW_Predictions(r) = Num_Holder / Den_Holder
\par                     End If
\par 
\par                 End If
\par 
\par 
\par                 If iAW_Predictions(r) = -1 Then
\par                     iAW_Raw_Score_at_a_Round(r) = 0
\par                     iAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                     iAW_Num_of_Predictions(r) = iAW_Num_of_Predictions(r - 1)
\par                     Non_Prediction_Counter(9) = Non_Prediction_Counter(9) + 1
\par                 Else
\par                     iAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - iAW_Predictions(r))
\par                     iAW_Adjusted_Score_at_a_Round(r) = iAW_Raw_Score_at_a_Round(r)
\par                     iAW_Num_of_Predictions(r) = iAW_Num_of_Predictions(r - 1) + 1
\par                 End If
\par 
\par                 iAW_Avg_Score_as_of_Round(r) = (iAW_Adjusted_Score_at_a_Round(r) + (iAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 If iAW_Num_of_Predictions(r) > 0 Then
\par                     iAW_Validity_as_of_Round(r) = (iAW_Raw_Score_at_a_Round(r) + (iAW_Validity_as_of_Round(r - 1) * iAW_Num_of_Predictions(r - 1))) / iAW_Num_of_Predictions(r)
\par                 Else
\par                     iAW_Validity_as_of_Round(r) = 0
\par                 End If
\par                 ' ''*************iAW over Natural Cues Ends****************************************
\par 
\par 
\par 
\par                 ''*************v1pAW Begins ****************************************
\par                 'If r = 1 And With_Online_Learning = 1 Then
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v1pAW_Predictions(r) = -1
\par                 'Else
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v1pAW_Predictions(r) = -1
\par                 '    Non_Prediction_Test = 1
\par 
\par                 '    For m = 2 To Cues
\par               
  '        If (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > v1pAW_Avg_Score_as_of_Round(r - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > v1pAW_Avg_Score_as_of_Round(r - 1)) And Not Cue_Avg_Score_as_of_Round(r - 1, Cue_O
rder2(r - 1, m)) = -1 Then
\par                 '            v1pAW_Frugality = v1pAW_Frugality + 1
\par 
\par                 '            Cues_Accessed_Matrix(10, Cue_Order2(r - 1, m)) = 1
\par 
\par                 '            If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                 '                Non_Prediction_Test = 0
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v1pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v1pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par 
\par                 '            Else
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v1pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v1pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par                 '            End If
\par 
\par                 '        End If
\par                 '    Next
\par                 'End If
\par 
\par 
\par 
\par 
\par                 'If MLR_Avg_Score_as_of_Round(r - 1) > v1pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(1, y) = 1 And Cues_Accessed_Matrix(10, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(10, y) = 1
\par                 '            v1pAW_Frugality = v1pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not MLR_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (MLR_Predictions(r) * (MLR_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (MLR_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par                 'If iTTB_Avg_Score_as_of_Round(r - 1) > v1pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(5, y) = 1 And Cues_Accessed_Matrix(10, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(10, y) = 1
\par                 '            v1pAW_Frugality = v1pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iTTB_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iTTB_Predictions(r) * (iTTB_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iTTB_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iTTB_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iTTB_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par                 'If iSW_Avg_Score_as_of_Round(r - 1) > v1pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(7, y) = 1 And Cues_Accessed_Matrix(10, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(10, y) = 1
\par                 '            v1pAW_Frugality = v1pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iSW_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iSW_Predictions(r) * (iSW_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iSW_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iSW_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iSW_Avg_Score_as_of_Round(r - 1) - v1pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par 
\par 
\par                 'If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                 '    v1pAW_Predictions(r) = -1
\par                 'Else
\par 
\par                 '    If Binary_Prediction = 1 Then
\par                 '        If Num_Holder / Den_Holder > 0.5 Then
\par                 '            v1pAW_Predictions(r) = 1
\par                 '        Else
\par                 '            If Num_Holder / Den_Holder < 0.5 Then
\par                 '                v1pAW_Predictions(r) = 0
\par                 '            Else
\par                 '                v1pAW_Predictions(r) = -1
\par                 '            End If
\par                 '        End If
\par                 '    Else
\par                 '        v1pAW_Predictions(r) = Num_Holder / Den_Holder
\par                 '    End If
\par 
\par                 'End If
\par 
\par 
\par                 'If v1pAW_Predictions(r) = -1 Then
\par                 '    v1pAW_Raw_Score_at_a_Round(r) = 0
\par                 '    v1pAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    v1pAW_Num_of_Predictions(r) = v1pAW_Num_of_Predictions(r - 1)
\par                 '    Non_Prediction_Counter(10) = Non_Prediction_Counter(10) + 1
\par                 'Else
\par                 '    v1pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - v1pAW_Predictions(r))
\par                 '    v1pAW_Adjusted_Score_at_a_Round(r) = v1pAW_Raw_Score_at_a_Round(r)
\par                 '    v1pAW_Num_of_Predictions(r) = v1pAW_Num_of_Predictions(r - 1) + 1
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                 '        v1pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(0.5 - v1pAW_Predictions(r))
\par                 '        v1pAW_Adjusted_Score_at_a_Round(r) = v1pAW_Raw_Score_at_a_Round(r)
\par                 '    End If
\par                 'End If
\par                 'v1pAW_Avg_Score_as_of_Round(r) = (v1pAW_Adjusted_Score_at_a_Round(r) + (v1pAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 'If v1pAW_Num_of_Predictions(r) > 0 Then
\par                 '    v1pAW_Validity_as_of_Round(r) = (v1pAW_Raw_Score_at_a_Round(r) + (v1pAW_Validity_as_of_Round(r - 1) * v1pAW_Num_of_Predictions(r - 1))) / v1pAW_Num_of_Predictions(r)
\par                 'Else
\par                 '    v1pAW_Validity_as_of_Round(r) = 0
\par                 'End If
\par                 ''*************v1pAW Ends****************************************
\par 
\par 
\par 
\par                 ''*************v2pAW Begins ****************************************
\par                 'If r = 1 And With_Online_Learning = 1 Then
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v2pAW_Predictions(r) = -1
\par                 'Else
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v2pAW_Predictions(r) = -1
\par                 '    Non_Prediction_Test = 1
\par 
\par                 '    For m = 2 To Cues
\par                 '        If (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > v2pAW_Avg_Score_as_of_Round(r - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > v2pAW_Avg_Score_as_of_Round(r - 1)) And Not Cue_Avg_Score_as_of_Roun
d(r - 1, Cue_Order2(r - 1, m)) = -1 Then
\par                 '            v2pAW_Frugality = v2pAW_Frugality + 1
\par 
\par                 '            Cues_Accessed_Matrix(11, Cue_Order2(r - 1, m)) = 1
\par 
\par                 '            If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                 '                Non_Prediction_Test = 0
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v2pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v2pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par 
\par                 '            Else
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v2pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v2pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par                 '            End If
\par 
\par                 '        End If
\par                 '    Next
\par                 'End If
\par 
\par 
\par                 'If MLR_Avg_Score_as_of_Round(r - 1) > v2pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(1, y) = 1 And Cues_Accessed_Matrix(11, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(11, y) = 1
\par                 '            v2pAW_Frugality = v2pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not MLR_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (MLR_Predictions(r) * (MLR_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (MLR_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par                 'If iAW_Avg_Score_as_of_Round(r - 1) > v2pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(9, y) = 1 And Cues_Accessed_Matrix(11, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(11, y) = 1
\par                 '            v2pAW_Frugality = v2pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iAW_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iAW_Predictions(r) * (iAW_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iAW_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iAW_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iAW_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par                 'If iSW_Avg_Score_as_of_Round(r - 1) > v2pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(7, y) = 1 And Cues_Accessed_Matrix(11, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(11, y) = 1
\par                 '            v2pAW_Frugality = v2pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iSW_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iSW_Predictions(r) * (iSW_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iSW_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iSW_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iSW_Avg_Score_as_of_Round(r - 1) - v2pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par 
\par 
\par                 'If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                 '    v2pAW_Predictions(r) = -1
\par                 'Else
\par 
\par                 '    If Binary_Prediction = 1 Then
\par                 '        If Num_Holder / Den_Holder > 0.5 Then
\par                 '            v2pAW_Predictions(r) = 1
\par                 '        Else
\par                 '            If Num_Holder / Den_Holder < 0.5 Then
\par                 '                v2pAW_Predictions(r) = 0
\par                 '            Else
\par                 '                v2pAW_Predictions(r) = -1
\par                 '            End If
\par                 '        End If
\par                 '    Else
\par                 '        v2pAW_Predictions(r) = Num_Holder / Den_Holder
\par                 '    End If
\par 
\par                 'End If
\par 
\par 
\par                 'If v2pAW_Predictions(r) = -1 Then
\par                 '    v2pAW_Raw_Score_at_a_Round(r) = 0
\par                 '    v2pAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    v2pAW_Num_of_Predictions(r) = v2pAW_Num_of_Predictions(r - 1)
\par                 '    Non_Prediction_Counter(11) = Non_Prediction_Counter(11) + 1
\par                 'Else
\par                 '    v2pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - v2pAW_Predictions(r))
\par                 '    v2pAW_Adjusted_Score_at_a_Round(r) = v2pAW_Raw_Score_at_a_Round(r)
\par                 '    v2pAW_Num_of_Predictions(r) = v2pAW_Num_of_Predictions(r - 1) + 1
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                 '        v2pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(0.5 - v2pAW_Predictions(r))
\par                 '        v2pAW_Adjusted_Score_at_a_Round(r) = v2pAW_Raw_Score_at_a_Round(r)
\par                 '    End If
\par                 'End If
\par                 'v2pAW_Avg_Score_as_of_Round(r) = (v2pAW_Adjusted_Score_at_a_Round(r) + (v2pAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 'If v2pAW_Num_of_Predictions(r) > 0 Then
\par                 '    v2pAW_Validity_as_of_Round(r) = (v2pAW_Raw_Score_at_a_Round(r) + (v2pAW_Validity_as_of_Round(r - 1) * v2pAW_Num_of_Predictions(r - 1))) / v2pAW_Num_of_Predictions(r)
\par                 'Else
\par                 '    v2pAW_Validity_as_of_Round(r) = 0
\par                 'End If
\par                 ''*************v2pAW Ends****************************************
\par 
\par 
\par 
\par                 ''*************v3pAW Begins ****************************************
\par                 'If r = 1 And With_Online_Learning = 1 Then
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v3pAW_Predictions(r) = -1
\par                 'Else
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v3pAW_Predictions(r) = -1
\par                 '    Non_Prediction_Test = 1
\par 
\par                 '    For m = 2 To Cues
\par                 '        If (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > v3pAW_Avg_Score_as_of_Round(r - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > v3pAW_Avg_Score_as_of_Round(r - 1)) And Not Cue_Avg_Score_as_of_
Round(r - 1, Cue_Order2(r - 1, m)) = -1 Then
\par                 '            v3pAW_Frugality = v3pAW_Frugality + 1
\par 
\par                 '            Cues_Accessed_Matrix(12, Cue_Order2(r - 1, m)) = 1
\par 
\par                 '            If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                 '                Non_Prediction_Test = 0
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v3pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v3pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v3pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v3pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par 
\par                 '            Else
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v3pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v3pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v3pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v3pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par                 '            End If
\par 
\par                 '        End If
\par                 '    Next
\par                 'End If
\par 
\par 
\par                 'If MLR_Avg_Score_as_of_Round(r - 1) > v3pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(1, y) = 1 And Cues_Accessed_Matrix(12, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(12, y) = 1
\par                 '            v3pAW_Frugality = v3pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not MLR_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (MLR_Predictions(r) * (MLR_Avg_Score_as_of_Round(r - 1) - v3pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v3pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (MLR_Avg_Score_as_of_Round(r - 1) - v3pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v3pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par                 'If iTTB_Avg_Score_as_of_Round(r - 1) > v3pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(5, y) = 1 And Cues_Accessed_Matrix(12, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(12, y) = 1
\par                 '            v3pAW_Frugality = v3pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iTTB_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iTTB_Predictions(r) * (iTTB_Avg_Score_as_of_Round(r - 1) - v3pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iTTB_Avg_Score_as_of_Round(r - 1) - v3pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iTTB_Avg_Score_as_of_Round(r - 1) - v3pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iTTB_Avg_Score_as_of_Round(r - 1) - v3pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par 
\par 
\par                 'If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                 '    v3pAW_Predictions(r) = -1
\par                 'Else
\par 
\par                 '    If Binary_Prediction = 1 Then
\par                 '        If Num_Holder / Den_Holder > 0.5 Then
\par                 '            v3pAW_Predictions(r) = 1
\par                 '        Else
\par                 '            If Num_Holder / Den_Holder < 0.5 Then
\par                 '                v3pAW_Predictions(r) = 0
\par                 '            Else
\par                 '                v3pAW_Predictions(r) = -1
\par                 '            End If
\par                 '        End If
\par                 '    Else
\par                 '        v3pAW_Predictions(r) = Num_Holder / Den_Holder
\par                 '    End If
\par 
\par                 'End If
\par 
\par 
\par                 'If v3pAW_Predictions(r) = -1 Then
\par                 '    v3pAW_Raw_Score_at_a_Round(r) = 0
\par                 '    v3pAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    v3pAW_Num_of_Predictions(r) = v3pAW_Num_of_Predictions(r - 1)
\par                 '    Non_Prediction_Counter(12) = Non_Prediction_Counter(12) + 1
\par                 'Else
\par                 '    v3pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - v3pAW_Predictions(r))
\par                 '    v3pAW_Adjusted_Score_at_a_Round(r) = v3pAW_Raw_Score_at_a_Round(r)
\par                 '    v3pAW_Num_of_Predictions(r) = v3pAW_Num_of_Predictions(r - 1) + 1
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                 '        v3pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(0.5 - v3pAW_Predictions(r))
\par                 '        v3pAW_Adjusted_Score_at_a_Round(r) = v3pAW_Raw_Score_at_a_Round(r)
\par                 '    End If
\par                 'End If
\par                 'v3pAW_Avg_Score_as_of_Round(r) = (v3pAW_Adjusted_Score_at_a_Round(r) + (v3pAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 'If v3pAW_Num_of_Predictions(r) > 0 Then
\par                 '    v3pAW_Validity_as_of_Round(r) = (v3pAW_Raw_Score_at_a_Round(r) + (v3pAW_Validity_as_of_Round(r - 1) * v3pAW_Num_of_Predictions(r - 1))) / v3pAW_Num_of_Predictions(r)
\par                 'Else
\par                 '    v3pAW_Validity_as_of_Round(r) = 0
\par                 'End If
\par                 ''*************v3pAW Ends****************************************
\par 
\par 
\par 
\par                 ''*************v4pAW Begins ****************************************
\par                 'If r = 1 And With_Online_Learning = 1 Then
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v4pAW_Predictions(r) = -1
\par                 'Else
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v4pAW_Predictions(r) = -1
\par                 '    Non_Prediction_Test = 1
\par 
\par                 '    For m = 2 To Cues
\par                 '        If (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > v4pAW_Avg_Score_as_
of_Round(r - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > v4pAW_Avg_Score_as_of_Round(r - 1)) And Not Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) = -1 Then
\par                 '            v4pAW_Frugality = v4pAW_Frugality + 1
\par 
\par                 '            Cues_Accessed_Matrix(13, Cue_Order2(r - 1, m)) = 1
\par 
\par                 '            If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                 '                Non_Prediction_Test = 0
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v4pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v4pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v4pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v4pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par 
\par                 '            Else
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v4pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v4pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v4pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v4pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par                 '            End If
\par 
\par                 '        End If
\par                 '    Next
\par                 'End If
\par 
\par 
\par                 'If MLR_Avg_Score_as_of_Round(r - 1) > v4pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(1, y) = 1 And Cues_Accessed_Matrix(13, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(13, y) = 1
\par                 '            v4pAW_Frugality = v4pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not MLR_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (MLR_Predictions(r) * (MLR_Avg_Score_as_of_Round(r - 1) - v4pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v4pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (MLR_Avg_Score_as_of_Round(r - 1) - v4pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v4pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par                 'If iAW_Avg_Score_as_of_Round(r - 1) > v4pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(9, y) = 1 And Cues_Accessed_Matrix(13, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(13, y) = 1
\par                 '            v4pAW_Frugality = v4pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iAW_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iAW_Predictions(r) * (iAW_Avg_Score_as_of_Round(r - 1) - v4pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iAW_Avg_Score_as_of_Round(r - 1) - v4pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iAW_Avg_Score_as_of_Round(r - 1) - v4pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iAW_Avg_Score_as_of_Round(r - 1) - v4pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par 
\par                 'If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                 '    v4pAW_Predictions(r) = -1
\par                 'Else
\par 
\par                 '    If Binary_Prediction = 1 Then
\par                 '        If Num_Holder / Den_Holder > 0.5 Then
\par                 '            v4pAW_Predictions(r) = 1
\par                 '        Else
\par                 '            If Num_Holder / Den_Holder < 0.5 Then
\par                 '                v4pAW_Predictions(r) = 0
\par                 '            Else
\par                 '                v4pAW_Predictions(r) = -1
\par                 '            End If
\par                 '        End If
\par                 '    Else
\par                 '        v4pAW_Predictions(r) = Num_Holder / Den_Holder
\par                 '    End If
\par 
\par                 'End If
\par 
\par 
\par                 'If v4pAW_Predictions(r) = -1 Then
\par                 '    v4pAW_Raw_Score_at_a_Round(r) = 0
\par                 '    v4pAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    v4pAW_Num_of_Predictions(r) = v4pAW_Num_of_Predictions(r - 1)
\par                 '    Non_Prediction_Counter(13) = Non_Prediction_Counter(13) + 1
\par                 'Else
\par                 '    v4pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - v4pAW_Predictions(r))
\par                 '    v4pAW_Adjusted_Score_at_a_Round(r) = v4pAW_Raw_Score_at_a_Round(r)
\par                 '    v4pAW_Num_of_Predictions(r) = v4pAW_Num_of_Predictions(r - 1) + 1
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                 '        v4pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(0.5 - v4pAW_Predictions(r))
\par                 '        v4pAW_Adjusted_Score_at_a_Round(r) = v4pAW_Raw_Score_at_a_Round(r)
\par                 '    End If
\par                 'End If
\par                 'v4pAW_Avg_Score_as_of_Round(r) = (v4pAW_Adjusted_Score_at_a_Round(r) + (v4pAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 'If v4pAW_Num_of_Predictions(r) > 0 Then
\par                 '    v4pAW_Validity_as_of_Round(r) = (v4pAW_Raw_Score_at_a_Round(r) + (v4pAW_Validity_as_of_Round(r - 1) * v4pAW_Num_of_Predictions(r - 1))) / v4pAW_Num_of_Predictions(r)
\par                 'Else
\par                 '    v4pAW_Validity_as_of_Round(r) = 0
\par                 'End If
\par                 ''*************v4pAW Ends****************************************
\par 
\par 
\par 
\par                 ''*************v5pAW Begins ****************************************
\par                 'If r = 1 And With_Online_Learning = 1 Then
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v5pAW_Predictions(r) = -1
\par                 'Else
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v5pAW_Predictions(r) = -1
\par                 '    Non_Prediction_Test = 1
\par 
\par                 '    For m = 2 To Cues
\par                 '        If (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > v5pAW_Avg_Score_as_of_Round(r - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > v5pAW_Avg_Score_as_of_Round(r - 1)) A
nd Not Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) = -1 Then
\par                 '            v5pAW_Frugality = v5pAW_Frugality + 1
\par 
\par                 '            Cues_Accessed_Matrix(14, Cue_Order2(r - 1, m)) = 1
\par 
\par                 '            If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                 '                Non_Prediction_Test = 0
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v5pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v5pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v5pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v5pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par 
\par                 '            Else
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v5pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v5pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v5pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v5pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par                 '            End If
\par 
\par                 '        End If
\par                 '    Next
\par                 'End If
\par 
\par 
\par 
\par                 'If MLR_Avg_Score_as_of_Round(r - 1) > v5pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(1, y) = 1 And Cues_Accessed_Matrix(14, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(14, y) = 1
\par                 '            v5pAW_Frugality = v5pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not MLR_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (MLR_Predictions(r) * (MLR_Avg_Score_as_of_Round(r - 1) - v5pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v5pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (MLR_Avg_Score_as_of_Round(r - 1) - v5pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (MLR_Avg_Score_as_of_Round(r - 1) - v5pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par 
\par                 'If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                 '    v5pAW_Predictions(r) = -1
\par                 'Else
\par 
\par                 '    If Binary_Prediction = 1 Then
\par                 '        If Num_Holder / Den_Holder > 0.5 Then
\par                 '            v5pAW_Predictions(r) = 1
\par                 '        Else
\par                 '            If Num_Holder / Den_Holder < 0.5 Then
\par                 '                v5pAW_Predictions(r) = 0
\par                 '            Else
\par                 '                v5pAW_Predictions(r) = -1
\par                 '            End If
\par                 '        End If
\par                 '    Else
\par                 '        v5pAW_Predictions(r) = Num_Holder / Den_Holder
\par                 '    End If
\par 
\par                 'End If
\par 
\par 
\par                 'If v5pAW_Predictions(r) = -1 Then
\par                 '    v5pAW_Raw_Score_at_a_Round(r) = 0
\par                 '    v5pAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    v5pAW_Num_of_Predictions(r) = v5pAW_Num_of_Predictions(r - 1)
\par                 '    Non_Prediction_Counter(14) = Non_Prediction_Counter(14) + 1
\par                 'Else
\par                 '    v5pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - v5pAW_Predictions(r))
\par                 '    v5pAW_Adjusted_Score_at_a_Round(r) = v5pAW_Raw_Score_at_a_Round(r)
\par                 '    v5pAW_Num_of_Predictions(r) = v5pAW_Num_of_Predictions(r - 1) + 1
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                 '        v5pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(0.5 - v5pAW_Predictions(r))
\par                 '        v5pAW_Adjusted_Score_at_a_Round(r) = v5pAW_Raw_Score_at_a_Round(r)
\par                 '    End If
\par                 'End If
\par                 'v5pAW_Avg_Score_as_of_Round(r) = (v5pAW_Adjusted_Score_at_a_Round(r) + (v5pAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 'If v5pAW_Num_of_Predictions(r) > 0 Then
\par                 '    v5pAW_Validity_as_of_Round(r) = (v5pAW_Raw_Score_at_a_Round(r) + (v5pAW_Validity_as_of_Round(r - 1) * v5pAW_Num_of_Predictions(r - 1))) / v5pAW_Num_of_Predictions(r)
\par                 'Else
\par                 '    v5pAW_Validity_as_of_Round(r) = 0
\par                 'End If
\par                 ''*************v5pAW Ends****************************************
\par 
\par 
\par                 ''*************v6pAW Begins ****************************************
\par                 'If r = 1 And With_Online_Learning = 1 Then
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v6pAW_Predictions(r) = -1
\par                 'Else
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v6pAW_Predictions(r) = -1
\par                 '    Non_Prediction_Test = 1
\par 
\par                 '    For m = 2 To Cues
\par                 '        If (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > v6pAW_Avg_Score_as_of_Round(r - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > v6pAW_Avg_Score_as_of
_Round(r - 1)) And Not Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) = -1 Then
\par                 '            v6pAW_Frugality = v6pAW_Frugality + 1
\par 
\par                 '            Cues_Accessed_Matrix(15, Cue_Order2(r - 1, m)) = 1
\par 
\par                 '            If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                 '                Non_Prediction_Test = 0
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v6pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v6pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v6pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v6pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par 
\par                 '            Else
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v6pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v6pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v6pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v6pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par                 '            End If
\par 
\par                 '        End If
\par                 '    Next
\par                 'End If
\par 
\par 
\par 
\par                 'If iTTB_Avg_Score_as_of_Round(r - 1) > v6pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(5, y) = 1 And Cues_Accessed_Matrix(15, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(15, y) = 1
\par                 '            v6pAW_Frugality = v6pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iTTB_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iTTB_Predictions(r) * (iTTB_Avg_Score_as_of_Round(r - 1) - v6pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iTTB_Avg_Score_as_of_Round(r - 1) - v6pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iTTB_Avg_Score_as_of_Round(r - 1) - v6pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iTTB_Avg_Score_as_of_Round(r - 1) - v6pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par                 'If iSW_Avg_Score_as_of_Round(r - 1) > v6pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(7, y) = 1 And Cues_Accessed_Matrix(15, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(15, y) = 1
\par                 '            v6pAW_Frugality = v6pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iSW_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iSW_Predictions(r) * (iSW_Avg_Score_as_of_Round(r - 1) - v6pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iSW_Avg_Score_as_of_Round(r - 1) - v6pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iSW_Avg_Score_as_of_Round(r - 1) - v6pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iSW_Avg_Score_as_of_Round(r - 1) - v6pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par 
\par 
\par                 'If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                 '    v6pAW_Predictions(r) = -1
\par                 'Else
\par 
\par                 '    If Binary_Prediction = 1 Then
\par                 '        If Num_Holder / Den_Holder > 0.5 Then
\par                 '            v6pAW_Predictions(r) = 1
\par                 '        Else
\par                 '            If Num_Holder / Den_Holder < 0.5 Then
\par                 '                v6pAW_Predictions(r) = 0
\par                 '            Else
\par                 '                v6pAW_Predictions(r) = -1
\par                 '            End If
\par                 '        End If
\par                 '    Else
\par                 '        v6pAW_Predictions(r) = Num_Holder / Den_Holder
\par                 '    End If
\par 
\par                 'End If
\par 
\par 
\par                 'If v6pAW_Predictions(r) = -1 Then
\par                 '    v6pAW_Raw_Score_at_a_Round(r) = 0
\par                 '    v6pAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    v6pAW_Num_of_Predictions(r) = v6pAW_Num_of_Predictions(r - 1)
\par                 '    Non_Prediction_Counter(15) = Non_Prediction_Counter(15) + 1
\par                 'Else
\par                 '    v6pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - v6pAW_Predictions(r))
\par                 '    v6pAW_Adjusted_Score_at_a_Round(r) = v6pAW_Raw_Score_at_a_Round(r)
\par                 '    v6pAW_Num_of_Predictions(r) = v6pAW_Num_of_Predictions(r - 1) + 1
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                 '        v6pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(0.5 - v6pAW_Predictions(r))
\par                 '        v6pAW_Adjusted_Score_at_a_Round(r) = v6pAW_Raw_Score_at_a_Round(r)
\par                 '    End If
\par                 'End If
\par                 'v6pAW_Avg_Score_as_of_Round(r) = (v6pAW_Adjusted_Score_at_a_Round(r) + (v6pAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 'If v6pAW_Num_of_Predictions(r) > 0 Then
\par                 '    v6pAW_Validity_as_of_Round(r) = (v6pAW_Raw_Score_at_a_Round(r) + (v6pAW_Validity_as_of_Round(r - 1) * v6pAW_Num_of_Predictions(r - 1))) / v6pAW_Num_of_Predictions(r)
\par                 'Else
\par                 '    v6pAW_Validity_as_of_Round(r) = 0
\par                 'End If
\par                 ''*************v6pAW Ends****************************************
\par 
\par 
\par 
\par                 ''*************v7pAW Begins ****************************************
\par                 'If r = 1 And With_Online_Learning = 1 Then
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v7pAW_Predictions(r) = -1
\par                 'Else
\par                 '    Num_Holder = 0
\par                 '    Den_Holder = 0
\par                 '    v7pAW_Predictions(r) = -1
\par                 '    Non_Prediction_Test = 1
\par 
\par                 '    For m = 2 To Cues
\par                 '        If (Cue_Avg_Score_as_of_Round(r - 1
, Cue_Order2(r - 1, m)) > v7pAW_Avg_Score_as_of_Round(r - 1) Or (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) > v7pAW_Avg_Score_as_of_Round(r - 1)) And Not Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) = -1 Then
\par                 '            v7pAW_Frugality = v7pAW_Frugality + 1
\par 
\par                 '            Cues_Accessed_Matrix(16, Cue_Order2(r - 1, m)) = 1
\par 
\par                 '            If Not Cue_Predictions(r, Cue_Order2(r - 1, m)) = -1 Then
\par                 '                Non_Prediction_Test = 0
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (Cue_Predictions(r, Cue_Order2(r - 1, m)) * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v7pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v7pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + ((1 - Cue_Predictions(r, Cue_Order2(r - 1, m))) * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v7pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v7pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par 
\par                 '            Else
\par                 '                If Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) > (1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) Then 'pos
\par                 '                    Num_Holder = Num_Holder + (0.5 * (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v7pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '                    Den_Holder = Den_Holder + (Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m)) - v7pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                Else
\par                 '                    Num_Holder = Num_Holder + (0.5 * ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v7pAW_Avg_Score_as_of_Round(r - 1))) 'neg
\par                 '                    Den_Holder = Den_Holder + ((1 - Cue_Avg_Score_as_of_Round(r - 1, Cue_Order2(r - 1, m))) - v7pAW_Avg_Score_as_of_Round(r - 1))
\par                 '                End If
\par                 '            End If
\par 
\par                 '        End If
\par                 '    Next
\par                 'End If
\par 
\par 
\par 
\par                 'If iAW_Avg_Score_as_of_Round(r - 1) > v7pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(9, y) = 1 And Cues_Accessed_Matrix(16, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(16, y) = 1
\par                 '            v7pAW_Frugality = v7pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iAW_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iAW_Predictions(r) * (iAW_Avg_Score_as_of_Round(r - 1) - v7pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iAW_Avg_Score_as_of_Round(r - 1) - v7pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iAW_Avg_Score_as_of_Round(r - 1) - v7pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iAW_Avg_Score_as_of_Round(r - 1) - v7pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par                 'If iSW_Avg_Score_as_of_Round(r - 1) > v7pAW_Avg_Score_as_of_Round(r - 1) Then
\par                 '    For y = 2 To Cues
\par                 '        If Cues_Accessed_Matrix(7, y) = 1 And Cues_Accessed_Matrix(16, y) = 0 Then
\par                 '            Cues_Accessed_Matrix(16, y) = 1
\par                 '            v7pAW_Frugality = v7pAW_Frugality + 1
\par                 '        End If
\par                 '    Next
\par                 '    If Not iSW_Predictions(r) = -1 Then
\par                 '        Non_Prediction_Test = 0
\par                 '        Num_Holder = Num_Holder + (iSW_Predictions(r) * (iSW_Avg_Score_as_of_Round(r - 1) - v7pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iSW_Avg_Score_as_of_Round(r - 1) - v7pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    Else
\par                 '        Num_Holder = Num_Holder + (0.5 * (iSW_Avg_Score_as_of_Round(r - 1) - v7pAW_Avg_Score_as_of_Round(r - 1)))
\par                 '        Den_Holder = Den_Holder + (iSW_Avg_Score_as_of_Round(r - 1) - v7pAW_Avg_Score_as_of_Round(r - 1))
\par                 '    End If
\par                 'End If
\par 
\par 
\par 
\par                 'If Den_Holder = 0 Or Non_Prediction_Test = 1 Then
\par                 '    v7pAW_Predictions(r) = -1
\par                 'Else
\par 
\par                 '    If Binary_Prediction = 1 Then
\par                 '        If Num_Holder / Den_Holder > 0.5 Then
\par                 '            v7pAW_Predictions(r) = 1
\par                 '        Else
\par                 '            If Num_Holder / Den_Holder < 0.5 Then
\par                 '                v7pAW_Predictions(r) = 0
\par                 '            Else
\par                 '                v7pAW_Predictions(r) = -1
\par                 '            End If
\par                 '        End If
\par                 '    Else
\par                 '        v7pAW_Predictions(r) = Num_Holder / Den_Holder
\par                 '    End If
\par 
\par                 'End If
\par 
\par 
\par                 'If v7pAW_Predictions(r) = -1 Then
\par                 '    v7pAW_Raw_Score_at_a_Round(r) = 0
\par                 '    v7pAW_Adjusted_Score_at_a_Round(r) = 0.5
\par                 '    v7pAW_Num_of_Predictions(r) = v7pAW_Num_of_Predictions(r - 1)
\par                 '    Non_Prediction_Counter(15) = Non_Prediction_Counter(15) + 1
\par                 'Else
\par                 '    v7pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(Extended_Cue_Object_Pair_Matrix(r, 1) - v7pAW_Predictions(r))
\par                 '    v7pAW_Adjusted_Score_at_a_Round(r) = v7pAW_Raw_Score_at_a_Round(r)
\par                 '    v7pAW_Num_of_Predictions(r) = v7pAW_Num_of_Predictions(r - 1) + 1
\par                 '    If Extended_Cue_Object_Pair_Matrix(r, 1) = -1 Then
\par                 '        v7pAW_Raw_Score_at_a_Round(r) = 1 - Math.Abs(0.5 - v6pAW_Predictions(r))
\par                 '        v7pAW_Adjusted_Score_at_a_Round(r) = v7pAW_Raw_Score_at_a_Round(r)
\par                 '    End If
\par                 'End If
\par                 'v7pAW_Avg_Score_as_of_Round(r) = (v7pAW_Adjusted_Score_at_a_Round(r) + (v7pAW_Avg_Score_as_of_Round(r - 1) * (r - 1))) / r
\par 
\par                 'If v7pAW_Num_of_Predictions(r) > 0 Then
\par                 '    v7pAW_Validity_as_of_Round(r) = (v7pAW_Raw_Score_at_a_Round(r) + (v7pAW_Validity_as_of_Round(r - 1) * v7pAW_Num_of_Predictions(r - 1))) / v7pAW_Num_of_Predictions(r)
\par                 'Else
\par                 '    v7pAW_Validity_as_of_Round(r) = 0
\par                 'End If
\par                 ''*************v7pAW Ends****************************************
\par 
\par 
\par 
\par             Next 'smaller loop for event sequence
\par 
\par 
\par             MLR_Final_Avg_Score(g) = MLR_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             Dawes_Final_Avg_Score(g) = Dawes_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             Minimalist_Final_Avg_Score(g) = Minimalist_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             pTTB_Final_Avg_Score(g) = pTTB_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             iTTB_Final_Avg_Score(g) = iTTB_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             pSW_Final_Avg_Score(g) = pSW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             iSW_Final_Avg_Score(g) = iSW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             pAW_Final_Avg_Score(g) = pAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             epAW_Final_Avg_Score(g) = epAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par 
\par             iAW_Final_Avg_Score(g) = iAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             v1pAW_Final_Avg_Score(g) = v1pAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             v2pAW_Final_Avg_Score(g) = v2pAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             v3pAW_Final_Avg_Score(g) = v3pAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             v4pAW_Final_Avg_Score(g) = v4pAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             v5pAW_Final_Avg_Score(g) = v5pAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             v6pAW_Final_Avg_Score(g) = v6pAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par             v7pAW_Final_Avg_Score(g) = v7pAW_Avg_Score_as_of_Round(Game_Ends_At(g))
\par 
\par             Total_Rounds = Total_Rounds + Game_Ends_At(g)
\par 
\par 
\par 
\par             For x = 1 To Rounds_Played
\par                 MLR_Avg_at_Term_Score(x) = MLR_Avg_at_Term_Score(x) + MLR_Avg_Score_as_of_Round(x)
\par                 Dawes_Avg_at_Term_Score(x) = Dawes_Avg_at_Term_Score(x) + Dawes_Avg_Score_as_of_Round(x)
\par                 Minimalist_Avg_at_Term_Score(x) = Minimalist_Avg_at_Term_Score(x) + Minimalist_Avg_Score_as_of_Round(x)
\par                 pTTB_Avg_at_Term_Score(x) = pTTB_Avg_at_Term_Score(x) + pTTB_Avg_Score_as_of_Round(x)
\par                 iTTB_Avg_at_Term_Score(x) = iTTB_Avg_at_Term_Score(x) + iTTB_Avg_Score_as_of_Round(x)
\par                 pSW_Avg_at_Term_Score(x) = pSW_Avg_at_Term_Score(x) + pSW_Avg_Score_as_of_Round(x)
\par                 iSW_Avg_at_Term_Score(x) = iSW_Avg_at_Term_Score(x) + iSW_Avg_Score_as_of_Round(x)
\par                 pAW_Avg_at_Term_Score(x) = pAW_Avg_at_Term_Score(x) + pAW_Avg_Score_as_of_Round(x)
\par                 epAW_Avg_at_Term_Score(x) = epAW_Avg_at_Term_Score(x) + epAW_Avg_Score_as_of_Round(x)
\par 
\par                 iAW_Avg_at_Term_Score(x) = iAW_Avg_at_Term_Score(x) + iAW_Avg_Score_as_of_Round(x)
\par                 v1pAW_Avg_at_Term_Score(x) = v1pAW_Avg_at_Term_Score(x) + v1pAW_Avg_Score_as_of_Round(x)
\par                 v2pAW_Avg_at_Term_Score(x) = v2pAW_Avg_at_Term_Score(x) + v2pAW_Avg_Score_as_of_Round(x)
\par                 v3pAW_Avg_at_Term_Score(x) = v3pAW_Avg_at_Term_Score(x) + v3pAW_Avg_Score_as_of_Round(x)
\par                 v4pAW_Avg_at_Term_Score(x) = v4pAW_Avg_at_Term_Score(x) + v4pAW_Avg_Score_as_of_Round(x)
\par                 v5pAW_Avg_at_Term_Score(x) = v5pAW_Avg_at_Term_Score(x) + v5pAW_Avg_Score_as_of_Round(x)
\par                 v6pAW_Avg_at_Term_Score(x) = v6pAW_Avg_at_Term_Score(x) + v6pAW_Avg_Score_as_of_Round(x)
\par                 v7pAW_Avg_at_Term_Score(x) = v7pAW_Avg_at_Term_Score(x) + v7pAW_Avg_Score_as_of_Round(x)
\par                 If Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 2)) >= 1 - Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 2)) Then
\par                     TopCue_Avg_at_Term_Score(x) = TopCue_Avg_at_Term_Score(x) + Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 2))
\par                 Else
\par                     TopCue_Avg_at_Term_Score(x) = TopCue_Avg_at_Term_Score(x) + 1 - Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 2))
\par                 End If
\par                 If Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 3)) >= 1 - Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 3)) Then
\par                     Second_Avg_at_Term_Score(x) = Second_Avg_at_Term_Score(x) + Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 3))
\par                 Else
\par                     Second_Avg_at_Term_Score(x) = Second_Avg_at_Term_Score(x) + 1 - Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 3))
\par                 End If
\par                 If Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 4)) >= 1 - Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 4)) Then
\par                     Third_Avg_at_Term_Score(x) = Third_Avg_at_Term_Score(x) + Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 4))
\par                 Else
\par                     Third_Avg_at_Term_Score(x) = Third_Avg_at_Term_Score(x) + 1 - Cue_Avg_Score_as_of_Round(x, Cue_Order2(x, 4))
\par                 End If
\par             Next
\par 
\par 
\par         Next 'large loop for multiple games
\par 
\par 
\par         For x = 1 To Rounds_Played
\par             'MLR_Avg_at_Term_Score(x) = MLR_Avg_at_Term_Score(x) / Number_of_Games
\par             'Dawes_Avg_at_Term_Score(x) = Dawes_Avg_at_Term_Score(x) / Number_of_Games
\par             'Minimalist_Avg_at_Term_Score(x) = Minimalist_Avg_at_Term_Score(x) / Number_of_Games
\par             pTTB_Avg_at_Term_Score(x) = pTTB_Avg_at_Term_Score(x) / Number_of_Games
\par             'iTTB_Avg_at_Term_Score(x) = iTTB_Avg_at_Term_Score(x) / Number_of_Games
\par             'pSW_Avg_at_Term_Score(x) = pSW_Avg_at_Term_Score(x) / Number_of_Games
\par             'iSW_Avg_at_Term_Score(x) = iSW_Avg_at_Term_Score(x) / Number_of_Games
\par             pAW_Avg_at_Term_Score(x) = pAW_Avg_at_Term_Score(x) / Number_of_Games
\par             epAW_Avg_at_Term_Score(x) = epAW_Avg_at_Term_Score(x) / Number_of_Games
\par 
\par             'iAW_Avg_at_Term_Score(x) = iAW_Avg_at_Term_Score(x) / Number_of_Games
\par             'v1pAW_Avg_at_Term_Score(x) = v1pAW_Avg_at_Term_Score(x) / Number_of_Games
\par             'v2pAW_Avg_at_Term_Score(x) = v2pAW_Avg_at_Term_Score(x) / Number_of_Games
\par             'v3pAW_Avg_at_Term_Score(x) = v3pAW_Avg_at_Term_Score(x) / Number_of_Games
\par             'v4pAW_Avg_at_Term_Score(x) = v4pAW_Avg_at_Term_Score(x) / Number_of_Games
\par             'v5pAW_Avg_at_Term_Score(x) = v5pAW_Avg_at_Term_Score(x) / Number_of_Games
\par             'v6pAW_Avg_at_Term_Score(x) = v6pAW_Avg_at_Term_Score(x) / Number_of_Games
\par             'v7pAW_Avg_at_Term_Score(x) = v7pAW_Avg_at_Term_Score(x) / Number_of_Games
\par             TopCue_Avg_at_Term_Score(x) = TopCue_Avg_at_Term_Score(x) / Number_of_Games
\par             'Second_Avg_at_Term_Score(x) = Second_Avg_at_Term_Score(x) / Number_of_Games
\par             'Third_Avg_at_Term_Score(x) = Third_Avg_at_Term_Score(x) / Number_of_Games
\par         Next
\par 
\par 
\par         For z = 1 To Number_of_Games
\par             'MLR_Avg_Final_Score = MLR_Avg_Final_Score + MLR_Final_Avg_Score(z)
\par             'Dawes_Avg_Final_Score = Dawes_Avg_Final_Score + Dawes_Final_Avg_Score(z)
\par             'Minimalist_Avg_Final_Score = Minimalist_Avg_Final_Score + Minimalist_Final_Avg_Score(z)
\par             pTTB_Avg_Final_Score = pTTB_Avg_Final_Score + pTTB_Final_Avg_Score(z)
\par             'iTTB_Avg_Final_Score = iTTB_Avg_Final_Score + iTTB_Final_Avg_Score(z)
\par             'pSW_Avg_Final_Score = pSW_Avg_Final_Score + pSW_Final_Avg_Score(z)
\par             'iSW_Avg_Final_Score = iSW_Avg_Final_Score + iSW_Final_Avg_Score(z)
\par             pAW_Avg_Final_Score = pAW_Avg_Final_Score + pAW_Final_Avg_Score(z)
\par             epAW_Avg_Final_Score = epAW_Avg_Final_Score + epAW_Final_Avg_Score(z)
\par 
\par             'iAW_Avg_Final_Score = iAW_Avg_Final_Score + iAW_Final_Avg_Score(z)
\par             'v1pAW_Avg_Final_Score = v1pAW_Avg_Final_Score + v1pAW_Final_Avg_Score(z)
\par             'v2pAW_Avg_Final_Score = v2pAW_Avg_Final_Score + v2pAW_Final_Avg_Score(z)
\par             'v3pAW_Avg_Final_Score = v3pAW_Avg_Final_Score + v3pAW_Final_Avg_Score(z)
\par             'v4pAW_Avg_Final_Score = v4pAW_Avg_Final_Score + v4pAW_Final_Avg_Score(z)
\par             'v5pAW_Avg_Final_Score = v5pAW_Avg_Final_Score + v5pAW_Final_Avg_Score(z)
\par             'v6pAW_Avg_Final_Score = v6pAW_Avg_Final_Score + v6pAW_Final_Avg_Score(z)
\par             'v7pAW_Avg_Final_Score = v7pAW_Avg_Final_Score + v7pAW_Final_Avg_Score(z)
\par         Next
\par 
\par 
\par         'MLR_Avg_Final_Score = MLR_Avg_Final_Score / Number_of_Games
\par         'Dawes_Avg_Final_Score = Dawes_Avg_Final_Score / Number_of_Games
\par         'Minimalist_Avg_Final_Score = Minimalist_Avg_Final_Score / Number_of_Games
\par         pTTB_Avg_Final_Score = pTTB_Avg_Final_Score / Number_of_Games
\par         'iTTB_Avg_Final_Score = iTTB_Avg_Final_Score / Number_of_Games
\par         'pSW_Avg_Final_Score = pSW_Avg_Final_Score / Number_of_Games
\par         'iSW_Avg_Final_Score = iSW_Avg_Final_Score / Number_of_Games
\par         pAW_Avg_Final_Score = pAW_Avg_Final_Score / Number_of_Games
\par         epAW_Avg_Final_Score = epAW_Avg_Final_Score / Number_of_Games
\par 
\par         'iAW_Avg_Final_Score = iAW_Avg_Final_Score / Number_of_Games
\par         'v1pAW_Avg_Final_Score = v1pAW_Avg_Final_Score / Number_of_Games
\par         'v2pAW_Avg_Final_Score = v2pAW_Avg_Final_Score / Number_of_Games
\par         'v3pAW_Avg_Final_Score = v3pAW_Avg_Final_Score / Number_of_Games
\par         'v4pAW_Avg_Final_Score = v4pAW_Avg_Final_Score / Number_of_Games
\par         'v5pAW_Avg_Final_Score = v5pAW_Avg_Final_Score / Number_of_Games
\par         'v6pAW_Avg_Final_Score = v6pAW_Avg_Final_Score / Number_of_Games
\par         'v7pAW_Avg_Final_Score = v7pAW_Avg_Final_Score / Number_of_Games
\par 
\par         'MLR_Frugality = MLR_Frugality / Total_Rounds
\par         'Dawes_Frugality = Dawes_Frugality / Total_Rounds
\par         'Minimalist_Frugality = Minimalist_Frugality / Total_Rounds
\par         'pTTB_Frugality = pTTB_Frugality / Total_Rounds
\par         'iTTB_Frugality = iTTB_Frugality / Total_Rounds
\par         'pSW_Frugality = pSW_Frugality / Total_Rounds
\par         'iSW_Frugality = iSW_Frugality / Total_Rounds
\par         'pAW_Frugality = pAW_Frugality / Total_Rounds
\par         'epAW_Frugality = epAW_Frugality / Total_Rounds
\par 
\par         'iAW_Frugality = iAW_Frugality / Total_Rounds
\par         'v1pAW_Frugality = v1pAW_Frugality / Total_Rounds
\par         'v2pAW_Frugality = v2pAW_Frugality / Total_Rounds
\par         'v3pAW_Frugality = v3pAW_Frugality / Total_Rounds
\par         'v4pAW_Frugality = v4pAW_Frugality / Total_Rounds
\par         'v5pAW_Frugality = v5pAW_Frugality / Total_Rounds
\par         'v6pAW_Frugality = v6pAW_Frugality / Total_Rounds
\par         'v7pAW_Frugality = v7pAW_Frugality / Total_Rounds
\par 
\par         objApp.Cells(1, 1) = "Round"
\par         'objApp.Cells(2, 1) = "MLR_Avg_at_Term_Score"
\par         'objApp.Cells(3, 1) = "Dawes_Avg_at_Term_Score"
\par         'objApp.Cells(4, 1) = "Minimalist_Avg_at_Term_Score"
\par         objApp.Cells(2, 1) = "ITB_Avg_at_Term_Score"
\par         'objApp.Cells(6, 1) = "iTTB_Avg_at_Term_Score"
\par         'objApp.Cells(7, 1) = "pSW_Avg_at_Term_Score"
\par         'objApp.Cells(8, 1) = "iSW_Avg_at_Term_Score"
\par         objApp.Cells(3, 1) = "LRW_Avg_at_Term_Score"
\par         'objApp.Cells(10, 1) = "iAW_Avg_at_Term_Score"
\par         'objApp.Cells(11, 1) = "v1pAW_Avg_at_Term_Score"
\par         'objApp.Cells(12, 1) = "v2pAW_Avg_at_Term_Score"
\par         'objApp.Cells(13, 1) = "v3pAW_Avg_at_Term_Score"
\par         'objApp.Cells(14, 1) = "v4pAW_Avg_at_Term_Score"
\par         'objApp.Cells(15, 1) = "v5pAW_Avg_at_Term_Score"
\par         'objApp.Cells(16, 1) = "v6pAW_Avg_at_Term_Score"
\par         'objApp.Cells(17, 1) = "v7pAW_Avg_at_Term_Score"
\par         objApp.Cells(5, 1) = "Top Cue Score"
\par         'objApp.Cells(19, 1) = "2nd Cue Score"
\par         'objApp.Cells(20, 1) = "3rd Cue Score"
\par         objApp.Cells(4, 1) = "ERW_Avg_at_Term_Score"
\par 
\par         objApp.Cells(6, 1) = ""
\par         objApp.Cells(7, 1) = ""
\par         objApp.Cells(8, 1) = ""
\par 
\par         For z = 1 To Rounds_Played
\par             objApp.Cells(1, z + 1) = z
\par             'objApp.Cells(2, z + 1) = MLR_Avg_at_Term_Score(z)
\par             'objApp.Cells(3, z + 1) = Dawes_Avg_at_Term_Score(z)
\par             'objApp.Cells(4, z + 1) = Minimalist_Avg_at_Term_Score(z)
\par             objApp.Cells(2, z + 1) = pTTB_Avg_at_Term_Score(z)
\par             'objApp.Cells(6, z + 1) = iTTB_Avg_at_Term_Score(z)
\par             'objApp.Cells(7, z + 1) = pSW_Avg_at_Term_Score(z)
\par             'objApp.Cells(8, z + 1) = iSW_Avg_at_Term_Score(z)
\par             objApp.Cells(3, z + 1) = pAW_Avg_at_Term_Score(z)
\par             'objApp.Cells(10, z + 1) = iAW_Avg_at_Term_Score(z)
\par             'objApp.Cells(11, z + 1) = v1pAW_Avg_at_Term_Score(z)
\par             'objApp.Cells(12, z + 1) = v2pAW_Avg_at_Term_Score(z)
\par             'objApp.Cells(13, z + 1) = v3pAW_Avg_at_Term_Score(z)
\par             'objApp.Cells(14, z + 1) = v4pAW_Avg_at_Term_Score(z)
\par             'objApp.Cells(15, z + 1) = v5pAW_Avg_at_Term_Score(z)
\par             'objApp.Cells(16, z + 1) = v6pAW_Avg_at_Term_Score(z)
\par             'objApp.Cells(17, z + 1) = v7pAW_Avg_at_Term_Score(z)
\par             objApp.Cells(5, z + 1) = TopCue_Avg_at_Term_Score(z)
\par             'objApp.Cells(19, z + 1) = Second_Avg_at_Term_Score(z)
\par             'objApp.Cells(20, z + 1) = Third_Avg_at_Term_Score(z)
\par             objApp.Cells(4, z + 1) = epAW_Avg_at_Term_Score(z)
\par 
\par             objApp.Cells(6, z + 1) = ""
\par             objApp.Cells(7, z + 1) = ""
\par             objApp.Cells(8, z + 1) = ""
\par         Next
\par 
\par         objApp.Cells(1, Rounds_Played + 2) = "Round"
\par         'objApp.Cells(2, Rounds_Played + 2) = "MLR_Avg_at_Term_Score"
\par         'objApp.Cells(3, Rounds_Played + 2) = "Dawes_Avg_at_Term_Score"
\par         'objApp.Cells(4, Rounds_Played + 2) = "Minimalist_Avg_at_Term_Score"
\par         objApp.Cells(2, Rounds_Played + 2) = "ITB_Avg_at_Term_Score"
\par         'objApp.Cells(6, Rounds_Played + 2) = "iTTB_Avg_at_Term_Score"
\par         'objApp.Cells(7, Rounds_Played + 2) = "pSW_Avg_at_Term_Score"
\par         'objApp.Cells(8, Rounds_Played + 2) = "iSW_Avg_at_Term_Score"
\par         objApp.Cells(3, Rounds_Played + 2) = "LRW_Avg_at_Term_Score"
\par         'objApp.Cells(10, Rounds_Played + 2) = "iAW_Avg_at_Term_Score"
\par         'objApp.Cells(11, Rounds_Played + 2) = "v1pAW_Avg_at_Term_Score"
\par         'objApp.Cells(12, Rounds_Played + 2) = "v2pAW_Avg_at_Term_Score"
\par         'objApp.Cells(13, Rounds_Played + 2) = "v3pAW_Avg_at_Term_Score"
\par         'objApp.Cells(14, Rounds_Played + 2) = "v4pAW_Avg_at_Term_Score"
\par         'objApp.Cells(15, Rounds_Played + 2) = "v5pAW_Avg_at_Term_Score"
\par         'objApp.Cells(16, Rounds_Played + 2) = "v6pAW_Avg_at_Term_Score"
\par         'objApp.Cells(17, Rounds_Played + 2) = "v7pAW_Avg_at_Term_Score"
\par         objApp.Cells(5, Rounds_Played + 2) = "Top Cue Score"
\par         'objApp.Cells(19, Rounds_Played + 2) = "2nd Cue Score"
\par         'objApp.Cells(20, Rounds_Played + 2) = "3rd Cue Score"
\par         objApp.Cells(4, Rounds_Played + 2) = "ERW_Avg_at_Term_Score"
\par 
\par 
\par         objApp.Cells(6, Rounds_Played + 2) = ""
\par         objApp.Cells(7, Rounds_Played + 2) = ""
\par         objApp.Cells(8, Rounds_Played + 2) = ""
\par 
\par         'objApp.Cells(22, 1) = "MLR_Frugality"
\par         'objApp.Cells(23, 1) = "Dawes_Frugality"
\par         'objApp.Cells(24, 1) = "Minimalist_Frugality"
\par         'objApp.Cells(25, 1) = "pTTB_Frugality"
\par         'objApp.Cells(26, 1) = "iTTB_Frugality"
\par         'objApp.Cells(27, 1) = "pSW_Frugality"
\par         'objApp.Cells(28, 1) = "iSW_Frugality"
\par         'objApp.Cells(29, 1) = "pAW_Frugality"
\par         'objApp.Cells(30, 1) = "iAW_Frugality"
\par         'objApp.Cells(31, 1) = "v1pAW_Frugality"
\par         'objApp.Cells(32, 1) = "v2pAW_Frugality"
\par         'objApp.Cells(33, 1) = "v3pAW_Frugality"
\par         'objApp.Cells(34, 1) = "v4pAW_Frugality"
\par         'objApp.Cells(35, 1) = "v5pAW_Frugality"
\par         'objApp.Cells(36, 1) = "v6pAW_Frugality"
\par         'objApp.Cells(37, 1) = "v7pAW_Frugality"
\par 
\par         'objApp.Cells(22, 2) = MLR_Frugality
\par         'objApp.Cells(23, 2) = Dawes_Frugality
\par         'objApp.Cells(24, 2) = Minimalist_Frugality
\par         'objApp.Cells(25, 2) = pTTB_Frugality
\par         'objApp.Cells(26, 2) = iTTB_Frugality
\par         'objApp.Cells(27, 2) = pSW_Frugality
\par         'objApp.Cells(28, 2) = iSW_Frugality
\par         'objApp.Cells(29, 2) = pAW_Frugality
\par         'objApp.Cells(30, 2) = iAW_Frugality
\par         'objApp.Cells(31, 2) = v1pAW_Frugality
\par         'objApp.Cells(32, 2) = v2pAW_Frugality
\par         'objApp.Cells(33, 2) = v3pAW_Frugality
\par         'objApp.Cells(34, 2) = v4pAW_Frugality
\par         'objApp.Cells(35, 2) = v5pAW_Frugality
\par         'objApp.Cells(36, 2) = v6pAW_Frugality
\par         'objApp.Cells(37, 2) = v7pAW_Frugality
\par 
\par         'objApp.Cells(39, 1) = "MLR_Non_Predictions"
\par         'objApp.Cells(40, 1) = "Dawes_Non_Predictions"
\par         'objApp.Cells(41, 1) = "Minimalist_Non_Predictions"
\par         'objApp.Cells(42, 1) = "pTTB_Non_Predictions"
\par         'objApp.Cells(43, 1) = "iTTB_Non_Predictions"
\par         'objApp.Cells(44, 1) = "pSW_Non_Predictions"
\par         'objApp.Cells(45, 1) = "iSW_Non_Predictions"
\par         'objApp.Cells(46, 1) = "pAW_Non_Predictions"
\par         'objApp.Cells(47, 1) = "iAW_Non_Predictions"
\par         'objApp.Cells(48, 1) = "v1pAW_Non_Predictions"
\par         'objApp.Cells(49, 1) = "v2pAW_Non_Predictions"
\par         'objApp.Cells(50, 1) = "v3pAW_Non_Predictions"
\par         'objApp.Cells(51, 1) = "v4pAW_Non_Predictions"
\par         'objApp.Cells(52, 1) = "v5pAW_Non_Predictions"
\par         'objApp.Cells(53, 1) = "v6pAW_Non_Predictions"
\par         'objApp.Cells(54, 1) = "v7pAW_Non_Predictions"
\par 
\par         For x = 1 To 16
\par             objApp.Cells(38 + x, 2) = Non_Prediction_Counter(x)
\par         Next
\par 
\par 
\par 
\par     End Sub
\par 
\par     Public Function apply_estimator(ByVal F_Object As Integer) As Double
\par 
\par         Dim Est As Double = Estimator(1)
\par 
\par         For y = 2 To Cues
\par             Est = Est + (Cue_Object_Matrix(F_Object, y) * Estimator(y))
\par         Next
\par 
\par         Return Est
\par     End Function
\par 
\par     Public Function apply_estimator_dawes(ByVal F_Object As Integer) As Double
\par 
\par         Dim Est As Double = 0
\par 
\par         For y = 2 To Cues
\par             If Estimator(y) > 0 Then
\par                 If Cue_Object_Matrix(F_Object, y) = 1 Then
\par                     Est = Est + 1
\par                 End If
\par                 If Cue_Object_Matrix(F_Object, y) = 0 Then
\par                     Est = Est - 1
\par                 End If
\par             Else
\par                 If Cue_Object_Matrix(F_Object, y) = 1 Then
\par                     Est = Est - 1
\par                 End If
\par                 If Cue_Object_Matrix(F_Object, y) = 0 Then
\par                     Est = Est + 1
\par                 End If
\par             End If
\par         Next
\par 
\par         Return Est
\par     End Function
\par 
\par     Public Function generate_cue_object_sub_matrix(ByVal F_Cue_Object_Pair_Matrix As Array, ByVal F_Round As Integer) As Array
\par 
\par         'form a list of represented events:
\par         Dim Matrix_Elements(Objects) As Integer
\par         Dim Counter1 As Integer = 1
\par         Dim Test1 As Integer = 0
\par 
\par         Objects_Seen(F_Round) = 0
\par 
\par         For x = 1 To Objects
\par 
\par             For r = 1 To F_Round
\par                 If Extended_Cue_Object_Pair_Matrix_Tracker(r, 1) = x Or Extended_Cue_Object_Pair_Matrix_Tracker(r, 2) = x Then
\par                     Test1 = 1
\par                     r = F_Round
\par                 End If
\par 
\par             Next
\par 
\par             If Test1 = 1 Then
\par                 Matrix_Elements(Counter1) = x
\par                 Counter1 = Counter1 + 1
\par                 Test1 = 0
\par             End If
\par 
\par         Next
\par 
\par         For x = 1 To Objects
\par             If Not Matrix_Elements(x) = 0 Then
\par                 Objects_Seen(F_Round) = Objects_Seen(F_Round) + 1
\par             End If
\par         Next
\par 
\par         'generate the sub_matrix based on the represented events:
\par         Cue_Object_Sub_Matrix_Size = Counter1 - 1
\par         Dim F_Cue_Object_Sub_Matrix(Counter1 - 1, Cues) As Double '(Objects, Cues)?
\par         For x = 1 To Counter1 - 1
\par             For y = 1 To Cues
\par                 F_Cue_Object_Sub_Matrix(x, y) = Cue_Object_Matrix(Matrix_Elements(x), y)
\par             Next
\par         Next
\par 
\par         Return F_Cue_Object_Sub_Matrix
\par     End Function
\par 
\par     'Proceeds by sampling without replacement:
\par     Public Function randomly_order_cue_object_pair_matrix(ByVal F_Cue_Object_Pair_Matrix As Array, ByVal F_Object_Pairs As Integer, ByVal F_Cues As Integer) As Array
\par 
\par         Dim Object_Pair_Order(F_Object_Pairs) As Integer
\par         Dim Object_Pair_Chosen(F_Object_Pairs) As Integer
\par         Dim F_Cue_Object_Pair_Matrix_Copy(F_Object_Pairs, F_Cues) As Double
\par         Dim Cue_Object_Pair_Matrix_Tracker_Copy(F_Object_Pairs, 2) As Double
\par 
\par         For x = 1 To F_Object_Pairs
\par             For y = 1 To F_Cues
\par                 F_Cue_Object_Pair_Matrix_Copy(x, y) = F_Cue_Object_Pair_Matrix(x, y)
\par             Next
\par         Next
\par 
\par         For x = 1 To F_Object_Pairs
\par             Cue_Object_Pair_Matrix_Tracker_Copy(x, 1) = Cue_Object_Pair_Matrix_Tracker(x, 1)
\par             Cue_Object_Pair_Matrix_Tracker_Copy(x, 2) = Cue_Object_Pair_Matrix_Tracker(x, 2)
\par         Next
\par 
\par         For y = 1 To F_Object_Pairs
\par             RandomNumber = RandomClass.NextDouble()
\par             IntRandomNumber = RandomNumber * (F_Object_Pairs - (y - 1))
\par             If IntRandomNumber = 0 Then
\par                 IntRandomNumber = 1
\par             End If
\par 
\par             Counter1 = 0
\par             Counter2 = 0
\par             Do While Counter2 < IntRandomNumber
\par                 Counter1 = Counter1 + 1
\par                 If Object_Pair_Chosen(Counter1) = 0 Then
\par                     Counter2 = Counter2 + 1
\par                 End If
\par             Loop
\par             Object_Pair_Order(y) = Counter1
\par             Object_Pair_Chosen(Counter1) = 1
\par         Next
\par 
\par         For x = 1 To F_Object_Pairs
\par             For y = 1 To F_Cues
\par                 F_Cue_Object_Pair_Matrix(x, y) = F_Cue_Object_Pair_Matrix_Copy(Object_Pair_Order(x), y)
\par             Next
\par         Next
\par 
\par         For x = 1 To F_Object_Pairs
\par             Cue_Object_Pair_Matrix_Tracker(x, 1) = Cue_Object_Pair_Matrix_Tracker_Copy(Object_Pair_Order(x), 1)
\par             Cue_Object_Pair_Matrix_Tracker(x, 2) = Cue_Object_Pair_Matrix_Tracker_Copy(Object_Pair_Order(x), 2)
\par         Next
\par 
\par         Return F_Cue_Object_Pair_Matrix
\par     End Function
\par 
\par 
\par     ''Variant that proceeds by sampling with replacement:
\par     'Public Function randomly_order_cue_object_pair_matrix_Var(ByVal F_Cue_Object_Pair_Matrix As Array, ByVal F_Object_Pairs As Integer, ByVal F_Cues As Integer) As Array
\par 
\par     '    Dim Object_Pair_Order(F_Object_Pairs) As Integer
\par     '    Dim Object_Pair_Chosen(F_Object_Pairs) As Integer
\par     '    Dim F_Cue_Object_Pair_Matrix_Copy(F_Object_Pairs, F_Cues) As Double
\par     '    Dim Cue_Object_Pair_Matrix_Tracker_Copy(F_Object_Pairs, 2) As Double
\par 
\par     '    For x = 1 To F_Object_Pairs
\par     '        For y = 1 To F_Cues
\par     '            F_Cue_Object_Pair_Matrix_Copy(x, y) = F_Cue_Object_Pair_Matrix(x, y)
\par     '        Next
\par     '    Next
\par 
\par     '    For x = 1 To F_Object_Pairs
\par     '        Cue_Object_Pair_Matrix_Tracker_Copy(x, 1) = Cue_Object_Pair_Matrix_Tracker(x, 1)
\par     '        Cue_Object_Pair_Matrix_Tracker_Copy(x, 2) = Cue_Object_Pair_Matrix_Tracker(x, 2)
\par     '    Next
\par 
\par     '    'original version
\par     '    'For y = 1 To F_Object_Pairs
\par     '    '    RandomNumber = RandomClass.NextDouble()
\par     '    '    IntRandomNumber = RandomNumber * (F_Object_Pairs - (y - 1))
\par     '    '    If IntRandomNumber = 0 Then
\par     '    '        IntRandomNumber = 1
\par     '    '    End If
\par 
\par     '    '    Counter1 = 0
\par     '    '    Counter2 = 0
\par     '    '    Do While Counter2 < IntRandomNumber
\par     '    '        Counter1 = Counter1 + 1
\par     '    '        If Object_Pair_Chosen(Counter1) = 0 Then
\par     '    '            Counter2 = Counter2 + 1
\par     '    '        End If
\par     '    '    Loop
\par     '    '    Object_Pair_Order(y) = Counter1
\par     '    '    Object_Pair_Chosen(Counter1) = 1
\par     '    'Next
\par 
\par     '    For y = 1 To F_Object_Pairs
\par     '        RandomNumber = RandomClass.NextDouble()
\par     '        IntRandomNumber = RandomNumber * F_Object_Pairs
\par     '        If IntRandomNumber = 0 Then
\par     '            IntRandomNumber = 1
\par     '        End If
\par     '        Object_Pair_Order(y) = IntRandomNumber
\par     '    Next
\par 
\par     '    For x = 1 To F_Object_Pairs
\par     '        For y = 1 To F_Cues
\par     '            F_Cue_Object_Pair_Matrix(x, y) = F_Cue_Object_Pair_Matrix_Copy(Object_Pair_Order(x), y)
\par     '        Next
\par     '    Next
\par 
\par     '    For x = 1 To F_Object_Pairs
\par     '        Cue_Object_Pair_Matrix_Tracker(x, 1) = Cue_Object_Pair_Matrix_Tracker_Copy(Object_Pair_Order(x), 1)
\par     '        Cue_Object_Pair_Matrix_Tracker(x, 2) = Cue_Object_Pair_Matrix_Tracker_Copy(Object_Pair_Order(x), 2)
\par     '    Next
\par 
\par     '    Return F_Cue_Object_Pair_Matrix
\par     'End Function
\par 
\par 
\par     Public Function randomly_order_cue_object_matrix(ByVal F_Cue_Object_Matrix As Array, ByVal F_Objects As Integer, ByVal F_Cues As Integer) As Array
\par 
\par         Dim Object_Order(F_Objects) As Integer
\par         Dim Object_Chosen(F_Objects) As Integer
\par         Dim F_Cue_Object_Matrix_Copy(F_Objects, F_Cues) As Double
\par 
\par 
\par         For x = 1 To F_Objects
\par             For y = 1 To F_Cues
\par                 F_Cue_Object_Matrix_Copy(x, y) = F_Cue_Object_Matrix(x, y)
\par             Next
\par         Next
\par 
\par         For y = 1 To F_Objects
\par             RandomNumber = RandomClass.NextDouble()
\par             IntRandomNumber = RandomNumber * (F_Objects - (y - 1))
\par             If IntRandomNumber = 0 Then
\par                 IntRandomNumber = 1
\par             End If
\par 
\par             Counter1 = 0
\par             Counter2 = 0
\par             Do While Counter2 < IntRandomNumber
\par                 Counter1 = Counter1 + 1
\par                 If Object_Chosen(Counter1) = 0 Then
\par                     Counter2 = Counter2 + 1
\par                 End If
\par             Loop
\par             Object_Order(y) = Counter1
\par             Object_Chosen(Counter1) = 1
\par         Next
\par 
\par         For x = 1 To F_Objects
\par             For y = 1 To F_Cues
\par                 F_Cue_Object_Matrix(x, y) = F_Cue_Object_Matrix_Copy(Object_Order(x), y)
\par             Next
\par         Next
\par 
\par         Return F_Cue_Object_Matrix
\par     End Function
\par 
\par     ''variant proceeds by sampling with replacement:
\par     'Public Function randomly_order_cue_object_matrix_Var(ByVal F_Cue_Object_Matrix As Array, ByVal F_Objects As Integer, ByVal F_Cues As Integer) As Array
\par 
\par     '    Dim Object_Order(F_Objects) As Integer
\par     '    Dim Object_Chosen(F_Objects) As Integer
\par     '    Dim F_Cue_Object_Matrix_Copy(F_Objects, F_Cues) As Double
\par 
\par 
\par     '    For x = 1 To F_Objects
\par     '        For y = 1 To F_Cues
\par     '            F_Cue_Object_Matrix_Copy(x, y) = F_Cue_Object_Matrix(x, y)
\par     '        Next
\par     '    Next
\par 
\par     '    For y = 1 To F_Objects
\par     '        RandomNumber = RandomClass.NextDouble()
\par     '        IntRandomNumber = RandomNumber * (F_Objects - (y - 1))
\par     '        If IntRandomNumber = 0 Then
\par     '            IntRandomNumber = 1
\par     '        End If
\par 
\par     '        Counter1 = 0
\par     '        Counter2 = 0
\par     '        Do While Counter2 < IntRandomNumber
\par     '            Counter1 = Counter1 + 1
\par     '            If Object_Chosen(Counter1) = 0 Then
\par     '                Counter2 = Counter2 + 1
\par     '            End If
\par     '        Loop
\par     '        Object_Order(y) = Counter1
\par     '        Object_Chosen(Counter1) = 1
\par     '    Next
\par 
\par 
\par     '    For y = 1 To F_Objects
\par     '        RandomNumber = RandomClass.NextDouble()
\par     '        IntRandomNumber = RandomNumber * F_Objects
\par     '        Object_Order(y) = IntRandomNumber
\par     '    Next
\par 
\par 
\par     '    For x = 1 To F_Objects
\par     '        For y = 1 To F_Cues
\par     '            F_Cue_Object_Matrix(x, y) = F_Cue_Object_Matrix_Copy(Object_Order(x), y)
\par     '        Next
\par     '    Next
\par 
\par     '    Return F_Cue_Object_Matrix
\par     'End Function
\par 
\par 
\par     Public Function generate_cue_object_pair_matrix(ByVal F_Cue_Object_Matrix As Array, ByVal F_Objects As Integer, ByVal F_Cues As Integer) As Array
\par 
\par         Dim F_Cue_Object_Pair_Matrix(Object_Pairs, Cues) As Double
\par         Dim Counter1 As Integer = 1
\par 
\par         For y = 1 To F_Cues
\par 
\par             Counter1 = 1
\par             For v = 1 To F_Objects - 1
\par                 For w = v + 1 To F_Objects
\par 
\par                     Cue_Object_Pair_Matrix_Tracker(Counter1, 1) = v
\par                     Cue_Object_Pair_Matrix_Tracker(Counter1, 2) = w
\par 
\par                     If Not F_Cue_Object_Matrix(v, y) = -1 And Not F_Cue_Object_Matrix(w, y) = -1 Then
\par                         If F_Cue_Object_Matrix(v, y) > F_Cue_Object_Matrix(w, y) Then
\par                             F_Cue_Object_Pair_Matrix(Counter1, y) = 1
\par                         Else
\par                             If F_Cue_Object_Matrix(v, y) < F_Cue_Object_Matrix(w, y) Then
\par                                 F_Cue_Object_Pair_Matrix(Counter1, y) = 0
\par                             Else
\par                                 F_Cue_Object_Pair_Matrix(Counter1, y) = -1
\par                             End If
\par                         End If
\par                     Else
\par                         F_Cue_Object_Pair_Matrix(Counter1, y) = -1
\par                     End If
\par                     Counter1 = Counter1 + 1
\par 
\par                 Next
\par             Next
\par 
\par         Next
\par 
\par         Return F_Cue_Object_Pair_Matrix
\par     End Function
\par 
\par     Public Function compute_estimator(ByRef F_Cue_Object_Matrix As Array, ByVal F_Cue_Columns As Integer, ByVal F_Cue_Rows As Integer) As Array
\par 
\par         Dim Cue_Value_Matrix(F_Cue_Columns, F_Cue_Rows) As Double
\par         Dim Event_Seq_Segment(F_Cue_Rows) As Double
\par 
\par         'Event_Seq_Segment(1) = 1
\par         For x = 1 To F_Cue_Rows
\par             Event_Seq_Segment(x) = F_Cue_Object_Matrix(x, 1)
\par         Next
\par 
\par         For y = 1 To F_Cue_Rows
\par             Cue_Value_Matrix(1, y) = 1
\par         Next
\par 
\par         For x = 2 To F_Cue_Columns
\par             For y = 1 To F_Cue_Rows
\par                 Cue_Value_Matrix(x, y) = F_Cue_Object_Matrix(y, x)
\par             Next
\par         Next
\par 
\par         'Generate the transpose:
\par         Dim Transpose_Matrix(F_Cue_Rows, F_Cue_Columns) As Double
\par         For x = 1 To F_Cue_Columns
\par             For y = 1 To F_Cue_Rows
\par                 Transpose_Matrix(y, x) = Cue_Value_Matrix(x, y)
\par             Next
\par         Next
\par 
\par         'Generate the product of the Cue_Object_Matrix and its transpose:
\par         Dim Product_of_Input_and_Transpose(F_Cue_Columns, F_Cue_Columns) As Double
\par         For x = 1 To F_Cue_Columns
\par             For y = 1 To F_Cue_Columns
\par                 Product_of_Input_and_Transpose(x, y) = 0
\par                 For z = 1 To F_Cue_Rows
\par                     Product_of_Input_and_Transpose(x, y) = Product_of_Input_and_Transpose(x, y) + (Transpose_Matrix(z, y) * Cue_Value_Matrix(x, z))
\par                 Next
\par             Next
\par         Next
\par 
\par         'Generate the matrix of minors for the product of the Cue_Object_Matrix and its transpose:
\par         Dim Minors_of_Product_of_Input_and_Transpose(F_Cue_Columns, F_Cue_Columns) As Double
\par         Dim xspot As Integer
\par         Dim yspot As Integer
\par         Dim matrix_holder(F_Cue_Columns - 1, F_Cue_Columns - 1) As Double
\par         For x = 1 To F_Cue_Columns
\par             For y = 1 To F_Cue_Columns
\par                 For xp = 1 To F_Cue_Columns - 1
\par                     For yp = 1 To F_Cue_Columns - 1
\par                         If xp < x Then
\par                             xspot = xp
\par                         Else
\par                             xspot = xp + 1
\par                         End If
\par                         If yp < y Then
\par                             yspot = yp
\par                         Else
\par                             yspot = yp + 1
\par                         End If
\par                         matrix_holder(xp, yp) = Product_of_Input_and_Transpose(xspot, yspot)
\par                     Next
\par                 Next
\par                 'check_counter = 0
\par 
\par                 'For x1 = 1 To F_Cue_Columns - 1
\par                 '    For y1 = 1 To F_Cue_Columns - 1
\par                 '        objApp.Cells(x1, y1) = matrix_holder(x1, y1)
\par                 '    Next
\par                 'Next
\par 
\par                 Minors_of_Product_of_Input_and_Transpose(x, y) = determinant(matrix_holder, F_Cue_Columns - 1)
\par                 Minors_of_Product_of_Input_and_Transpose(x, y) = Minors_of_Product_of_Input_and_Transpose(x, y)
\par             Next
\par         Next
\par 
\par         'Generate the co-factor matrix for the product of the Cue_Object_Matrix and its transpose:
\par         Dim Adjoint_of_Product_of_Input_and_Transpose(F_Cue_Columns, F_Cue_Columns) As Double
\par         Dim Column_is_Odd As Integer
\par         Dim Row_is_Odd As Integer
\par         For x = 1 To F_Cue_Columns
\par             For y = 1 To F_Cue_Columns
\par                 If Not x Mod 2 = 0 Then
\par                     Column_is_Odd = 1
\par                 Else
\par                     Column_is_Odd = 0
\par                 End If
\par                 If Not y Mod 2 = 0 Then
\par                     Row_is_Odd = 1
\par                 Else
\par                     Row_is_Odd = 0
\par                 End If
\par                 If (Row_is_Odd = 1 And Column_is_Odd = 0) Or (Row_is_Odd = 0 And Column_is_Odd = 1) Then
\par                     Minors_of_Product_of_Input_and_Transpose(x, y) = -1 * Minors_of_Product_of_Input_and_Transpose(x, y)
\par                 End If
\par             Next
\par         Next
\par 
\par         'Generate the transpose...:
\par         For x = 1 To F_Cue_Columns
\par             For y = 1 To F_Cue_Columns
\par                 Adjoint_of_Product_of_Input_and_Transpose(y, x) = Minors_of_Product_of_Input_and_Transpose(x, y)
\par             Next
\par         Next
\par 
\par         'Multiply by determinant...:
\par         Dim Inverse_of_Product_of_Input_and_Transpose(F_Cue_Columns, F_Cue_Columns) As Double
\par         For x = 1 To F_Cue_Columns
\par             For y = 1 To F_Cue_Columns
\par                 Inverse_of_Product_of_Input_and_Transpose(x, y) = Adjoint_of_Product_of_Input_and_Transpose(x, y) * (1 / determinant(Product_of_Input_and_Transpose, F_Cue_Columns))
\par             Next
\par         Next
\par 
\par         'Generate the Prod_of_Transpose_and_Inverse_of_Product_of_Input_and_Transpose:
\par         Dim Prod_of_Transpose_and_Inverse_of_Product_of_Input_and_Transpose(F_Cue_Rows, F_Cue_Columns) As Double
\par         For x = 1 To F_Cue_Rows
\par             For y = 1 To F_Cue_Columns
\par                 Prod_of_Transpose_and_Inverse_of_Product_of_Input_and_Transpose(x, y) = 0
\par                 For z = 1 To F_Cue_Columns
\par                     Prod_of_Transpose_and_Inverse_of_Product_of_Input_and_Transpose(x, y) = Prod_of_Transpose_and_Inverse_of_Product_of_Input_and_Transpose(x, y) + (Inverse_of_Product_of_Input_and_Transpose(z, y) * Transpose_Matrix(x, z))
\par                 Next
\par             Next
\par         Next
\par 
\par         'Generate the product of Prod_of_Transpose_and_Inverse_of_Product_of_Input_and_Transpose and Event_Seq_Segment:
\par         For y = 1 To F_Cue_Columns '
\par             Estimator(y) = 0 '
\par             For x = 1 To F_Cue_Rows
\par                 Estimator(y) = Estimator(y) + (Prod_of_Transpose_and_Inverse_of_Product_of_Input_and_Transpose(x, y) * Event_Seq_Segment(x))
\par             Next
\par         Next
\par 
\par         'If check_counter = 1000000 Then
\par         '    'Return (-1, -1)
\par         'Else
\par         '    Return Estimator
\par         'End If
\par 
\par         Return Estimator
\par     End Function
\par 
\par     'simpler (faster) alogythm, based on LU decomposition:
\par     Public Function determinant(ByRef holder(,) As Double, ByVal n As Integer) As Double
\par 
\par         Dim Mutiplier As Double = 0
\par 
\par         'holder(1, 1) = 2
\par         'holder(1, 2) = 1
\par         'holder(1, 3) = -6
\par         'holder(2, 1) = 4
\par         'holder(2, 2) = -4
\par         'holder(2, 3) = -9
\par         'holder(3, 1) = -4
\par         'holder(3, 2) = 3
\par         'holder(3, 3) = 5
\par 
\par         For y = 2 To n
\par 
\par             For x = 1 To y - 1
\par 
\par                 'If y = 8 And x = 7 Then
\par                 '    y = y
\par                 'End If
\par 
\par                 If Not holder(x, x) = 0 Then
\par                     Mutiplier = -holder(x, y) / holder(x, x)
\par                 Else
\par                     holder(x, x) = 0.0000000001
\par                     Mutiplier = -holder(x, y) / holder(x, x)
\par                 End If
\par 
\par 
\par                 If Not (Mutiplier >= 0 Or Mutiplier <= 0) Then
\par                     Mutiplier = Mutiplier
\par                 End If
\par 
\par                 For xv = 1 To n
\par                     holder(xv, y) = holder(xv, y) + (holder(xv, x) * Mutiplier)
\par                     If Not (holder(xv, y) >= 0 Or holder(xv, y) <= 0) Then
\par                         Mutiplier = Mutiplier
\par                     End If
\par                 Next
\par 
\par             Next
\par         Next
\par 
\par         Mutiplier = 1
\par         For z = 1 To n
\par             Mutiplier = Mutiplier * holder(z, z)
\par         Next
\par 
\par         Return Mutiplier
\par     End Function
\par 
\par     'Public Function determinant(ByRef holder(,) As Double, ByVal n As Integer) As Double
\par 
\par     '    If Not Math.Sqrt(holder.Length) - 1 = n Then
\par     '        holder = holder
\par     '    End If
\par     '    Dim Output As Double = 0
\par     '    If Estimation_Failed_Test = 0 Then
\par 
\par     '        If n = 1 Then Return holder(1, 1)
\par     '        If n = 2 Then Return holder(1, 1) * holder(2, 2) - holder(2, 1) * holder(1, 2)
\par 
\par     '        Dim holder2(n - 1, n - 1) As Double
\par     '        For x As Integer = 1 To n
\par     '            For y As Integer = 1 To n - 1
\par     '                For z As Integer = 1 To n - 1
\par     '                    If z >= x Then
\par     '                        holder2(y, z) = holder(y + 1, z + 1)
\par     '                    Else
\par     '                        holder2(y, z) = holder(y + 1, z)
\par     '                    End If
\par     '                Next
\par     '            Next
\par 
\par     '            Output = Output + ((-1) ^ (x + 1)) * holder(1, x) * determinant(holder2, n - 1)
\par 
\par     '            'check_counter = check_counter + 1
\par     '            'If check_counter > 1000000 Then
\par     '            '    Output = 0
\par     '            '    Estimation_Failed_Test = 1
\par     '            'Else
\par     '            '    Output = Output + ((-1) ^ (x + 1)) * holder(1, x) * determinant(holder2, n - 1)
\par     '            'End If
\par     '        Next
\par     '    Else
\par     '        Output = 0
\par     '    End If
\par 
\par     '    Return Output
\par     'End Function
\par 
\par End Class
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid11013529 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b030414000600080000002100aa5225dfc60600008b1a0000160000007468656d652f7468656d652f
7468656d65312e786d6cec595d8bdb46147d2ff43f08bd3bfe92fcb1c41b6cd9ceb6d94d42eca4e4716c8fadc98e344633de8d0981923c160aa569e943037deb
43691b48a02fe9afd936a54d217fa17746b63c638fbb9b2585a5640d8b343af7ce997bafce1d4997afdc8fa87384134e58dc708b970aae83e3211b9178d2706f
f7bbb99aeb7081e211a22cc60d778eb97b65f7c30f2ea31d11e2083b601ff31dd4704321a63bf93c1fc230e297d814c7706dcc920809384d26f951828ec16f44
f3a542a1928f10895d274611b8bd311e932176fad2a5bbbb74dea1701a0b2e078634e949d7d8b050d8d1615122f89c0734718e106db830cf881df7f17de13a14
7101171a6e41fdb9f9ddcb79b4b330a2628bad66d7557f0bbb85c1e8b0a4e64c26836c52cff3bd4a33f3af00546ce23ad54ea553c9fc29001a0e61a52917dda7
dfaab7dafe02ab81d2438bef76b55d2e1a78cd7f798373d3973f03af40a97f6f03dfed06104503af4029dedfc07b5eb51478065e81527c65035f2d34db5ed5c0
2b5048497cb8812ef89572b05c6d061933ba6785d77daf5b2d2d9caf50500d5975c929c62c16db6a2d42f758d2058004522448ec88f9148fd110aa3840940c12
e2ec93490885374531e3305c2815ba8532fc973f4f1da988a01d8c346bc90b98f08d21c9c7e1c3844c45c3fd18bcba1ae4cdcb1fdfbc7cee9c3c7a71f2e89793
c78f4f1efd9c3a32acf6503cd1ad5e7fffc5df4f3f75fe7afeddeb275fd9f15cc7fffed367bffdfaa51d082b5d85e0d5d7cffe78f1ecd5379ffff9c3130bbc99
a0810eef930873e73a3e766eb10816a6426032c783e4ed2cfa2122ba45339e701423398bc57f478406fafa1c5164c1b5b019c13b09488c0d787576cf20dc0b93
9920168fd7c2c8001e30465b2cb146e19a9c4b0b737f164fec9327331d770ba123dbdc018a8dfc766653d05662731984d8a07993a258a0098eb170e4357688b1
6575770931e27a408609e36c2c9cbbc46921620d499f0c8c6a5a19ed9108f232b711847c1bb139b8e3b418b5adba8d8f4c24dc15885ac8f73135c27815cd048a
6c2efb28a27ac0f791086d247bf364a8e33a5c40a6279832a733c29cdb6c6e24b05e2de9d7405eec693fa0f3c84426821cda7cee23c674649b1d06218aa6366c
8fc4a18efd881f428922e7261336f80133ef10790e7940f1d674df21d848f7e96a701b9455a7b42a107965965872791533a37e7b733a4658490d08bfa1e71189
4f15f73559f7ff5b5907217df5ed53cbaa2eaaa0371362bda3f6d6647c1b6e5dbc03968cc8c5d7ee369ac53731dc2e9b0decbd74bf976ef77f2fdddbeee7772f
d82b8d06f9965bc574abae36eed1d67dfb9850da13738af7b9daba73e84ca32e0c4a3bf5cc8ab3e7b8690887f24e86090cdc2441cac64998f88488b017a229ec
ef8bae7432e10bd713ee4c19876dbf1ab6fa96783a8b0ed8287d5c2d16e5a3692a1e1c89d578c1cfc6e15143a4e84a75f50896b9576c27ea51794940dabe0d09
6d329344d942a2ba1c9441520fe610340b09b5b277c2a26e615193ee97a9da6001d4b2acc0d6c9810d57c3f53d30012378a242148f649ed2542fb3ab92f92e33
bd2d984605c03e625901ab4cd725d7adcb93ab4b4bed0c99364868e566925091513d8c87688417d52947cf42e36d735d5fa5d4a02743a1e683d25ad1a8d6fe8d
c579730d76ebda40635d2968ec1c37dc4ad9879219a269c31dc3633f1c4653a81d2eb7bc884ee0ddd95024e90d7f1e6599265cb4110fd3802bd149d520220227
0e2551c395cbcfd24063a5218a5bb104827061c9d541562e1a3948ba99643c1ee3a1d0d3ae8dc848a7a7a0f0a95658af2af3f383a5259b41ba7be1e8d819d059
720b4189f9d5a20ce0887078fb534ca33922f03a3313b255fdad35a685eceaef13550da5e3884e43b4e828ba98a77025e5191d7596c5403b5bac1902aa8564d1
080713d960f5a01add34eb1a2987ad5df7742319394d34573dd35015d935ed2a66ccb06c036bb13c5f93d7582d430c9aa677f854bad725b7bed4bab57d42d625
20e059fc2c5df70c0d41a3b69acca026196fcab0d4ecc5a8d93b960b3c85da599a84a6fa95a5dbb5b8653dc23a1d0c9eabf383dd7ad5c2d078b9af549156df3d
f44f136c700fc4a30d2f81675470954af8f09020d810f5d49e24950db845ee8bc5ad0147ce2c210df741c16f7a41c90f72859adfc97965af90abf9cd72aee9fb
e562c72f16daadd243682c228c8a7efacda50bafa2e87cf1e5458d6f7c7d89966fdb2e0d599467eaeb4a5e11575f5f8aa5ed5f5f1c02a2f3a052ead6cbf55625
572f37bb39afddaae5ea41a5956b57826abbdb0efc5abdfbd0758e14d86b9603afd2a9e52ac520c8799582a45fabe7aa5ea9d4f4aacd5ac76b3e5c6c6360e5a9
7c2c6201e155bc76ff010000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f7468656d652f5f72656c732f
7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c082e8761be
9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd08a54f980
ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa4c04ca5b
babac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c0200001300000000000000000000000000000000005b436f6e74656e
745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b00000000000000000000000000300100005f72656c732f
2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000190200007468656d652f7468656d652f74
68656d654d616e616765722e786d6c504b01022d0014000600080000002100aa5225dfc60600008b1a00001600000000000000000000000000d6020000746865
6d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b0100002700000000000000000000000000d00900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000cb0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax371\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef0{\lsdlockedexcept \lsdqformat1 \lsdlocked0 Normal;\lsdqformat1 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdlocked0 caption;\lsdqformat1 \lsdlocked0 Title;
\lsdqformat1 \lsdlocked0 Subtitle;\lsdqformat1 \lsdlocked0 Strong;\lsdqformat1 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdpriority99 \lsdlocked0 Placeholder Text;\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;
\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;\lsdpriority65 \lsdlocked0 Medium List 1;
\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;\lsdpriority71 \lsdlocked0 Colorful Shading;
\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;\lsdpriority62 \lsdlocked0 Light Grid Accent 1;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdpriority99 \lsdlocked0 Revision;
\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e50000000000000000000000000097
4cb6feecd701feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}